
EuropaOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800513c  0800513c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005144  08005144  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800514c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  2000000c  08005158  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08005158  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aa5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002549  00000000  00000000  00033ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00036030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00036f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002727  00000000  00000000  00037de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001217f  00000000  00000000  0003a50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011154b  00000000  00000000  0004c68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015dbd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  0015dc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080050b4 	.word	0x080050b4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080050b4 	.word	0x080050b4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fcc3 	bl	8000e8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f80b 	bl	8000522 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f9b8 	bl	8000880 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000510:	f000 f8f2 	bl	80006f8 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000514:	f000 f93e 	bl	8000794 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 f988 	bl	800082c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800051c:	f000 f854 	bl	80005c8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x20>

08000522 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b096      	sub	sp, #88	; 0x58
 8000526:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	2244      	movs	r2, #68	; 0x44
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f004 fdb7 	bl	80050a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000544:	2000      	movs	r0, #0
 8000546:	f002 f81b 	bl	8002580 <HAL_PWREx_ControlVoltageScaling>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000550:	f000 fa3a 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000554:	2322      	movs	r3, #34	; 0x22
 8000556:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2340      	movs	r3, #64	; 0x40
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800056e:	2302      	movs	r3, #2
 8000570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000572:	231e      	movs	r3, #30
 8000574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4618      	mov	r0, r3
 8000588:	f002 f8be 	bl	8002708 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000592:	f000 fa19 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	2105      	movs	r1, #5
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fcc3 	bl	8002f3c <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005bc:	f000 fa04 	bl	80009c8 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3758      	adds	r7, #88	; 0x58
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005de:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <MX_ADC1_Init+0x114>)
 80005e0:	4a3f      	ldr	r2, [pc, #252]	; (80006e0 <MX_ADC1_Init+0x118>)
 80005e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e4:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <MX_ADC1_Init+0x114>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <MX_ADC1_Init+0x114>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <MX_ADC1_Init+0x114>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <MX_ADC1_Init+0x114>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <MX_ADC1_Init+0x114>)
 80005fe:	2204      	movs	r2, #4
 8000600:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000602:	4b36      	ldr	r3, [pc, #216]	; (80006dc <MX_ADC1_Init+0x114>)
 8000604:	2200      	movs	r2, #0
 8000606:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <MX_ADC1_Init+0x114>)
 800060a:	2201      	movs	r2, #1
 800060c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <MX_ADC1_Init+0x114>)
 8000610:	2204      	movs	r2, #4
 8000612:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b31      	ldr	r3, [pc, #196]	; (80006dc <MX_ADC1_Init+0x114>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <MX_ADC1_Init+0x114>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_ADC1_Init+0x114>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_ADC1_Init+0x114>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <MX_ADC1_Init+0x114>)
 8000632:	2200      	movs	r2, #0
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_ADC1_Init+0x114>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063e:	4827      	ldr	r0, [pc, #156]	; (80006dc <MX_ADC1_Init+0x114>)
 8000640:	f000 fe5e 	bl	8001300 <HAL_ADC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800064a:	f000 f9bd 	bl	80009c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_ADC1_Init+0x11c>)
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000652:	2306      	movs	r3, #6
 8000654:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000656:	2305      	movs	r3, #5
 8000658:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MX_ADC1_Init+0x120>)
 800065c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800065e:	2304      	movs	r3, #4
 8000660:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	481c      	ldr	r0, [pc, #112]	; (80006dc <MX_ADC1_Init+0x114>)
 800066c:	f000 ff94 	bl	8001598 <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000676:	f000 f9a7 	bl	80009c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC1_Init+0x124>)
 800067c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800067e:	230c      	movs	r3, #12
 8000680:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4619      	mov	r1, r3
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <MX_ADC1_Init+0x114>)
 8000688:	f000 ff86 	bl	8001598 <HAL_ADC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000692:	f000 f999 	bl	80009c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_ADC1_Init+0x128>)
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800069a:	2312      	movs	r3, #18
 800069c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <MX_ADC1_Init+0x114>)
 80006a4:	f000 ff78 	bl	8001598 <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80006ae:	f000 f98b 	bl	80009c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_ADC1_Init+0x12c>)
 80006b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006b6:	2318      	movs	r3, #24
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ba:	237f      	movs	r3, #127	; 0x7f
 80006bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0x114>)
 80006c4:	f000 ff68 	bl	8001598 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80006ce:	f000 f97b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000028 	.word	0x20000028
 80006e0:	50040000 	.word	0x50040000
 80006e4:	0c900008 	.word	0x0c900008
 80006e8:	407f0000 	.word	0x407f0000
 80006ec:	14f00020 	.word	0x14f00020
 80006f0:	1d500080 	.word	0x1d500080
 80006f4:	43210000 	.word	0x43210000

080006f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <MX_LPUART1_UART_Init+0x94>)
 8000700:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000704:	4a22      	ldr	r2, [pc, #136]	; (8000790 <MX_LPUART1_UART_Init+0x98>)
 8000706:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 800070a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800070e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000740:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000742:	f003 fbd1 	bl	8003ee8 <HAL_UART_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f93c 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000754:	f004 f902 	bl	800495c <HAL_UARTEx_SetTxFifoThreshold>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800075e:	f000 f933 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000766:	f004 f937 	bl	80049d8 <HAL_UARTEx_SetRxFifoThreshold>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f92a 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_LPUART1_UART_Init+0x90>)
 8000776:	f004 f8b8 	bl	80048ea <HAL_UARTEx_DisableFifoMode>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f922 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000090 	.word	0x20000090
 800078c:	40008000 	.word	0x40008000
 8000790:	00033324 	.word	0x00033324

08000794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_USART3_UART_Init+0x90>)
 800079a:	4a23      	ldr	r2, [pc, #140]	; (8000828 <MX_USART3_UART_Init+0x94>)
 800079c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007de:	f003 fb83 	bl	8003ee8 <HAL_UART_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007e8:	f000 f8ee 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_USART3_UART_Init+0x90>)
 80007f0:	f004 f8b4 	bl	800495c <HAL_UARTEx_SetTxFifoThreshold>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007fa:	f000 f8e5 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <MX_USART3_UART_Init+0x90>)
 8000802:	f004 f8e9 	bl	80049d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800080c:	f000 f8dc 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_USART3_UART_Init+0x90>)
 8000812:	f004 f86a 	bl	80048ea <HAL_UARTEx_DisableFifoMode>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800081c:	f000 f8d4 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000120 	.word	0x20000120
 8000828:	40004800 	.word	0x40004800

0800082c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800083a:	2206      	movs	r2, #6
 800083c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000840:	2202      	movs	r2, #2
 8000842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000858:	2201      	movs	r2, #1
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000864:	2201      	movs	r2, #1
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800086a:	f001 fd21 	bl	80022b0 <HAL_PCD_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000874:	f000 f8a8 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001b0 	.word	0x200001b0

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b48      	ldr	r3, [pc, #288]	; (80009b8 <MX_GPIO_Init+0x138>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a47      	ldr	r2, [pc, #284]	; (80009b8 <MX_GPIO_Init+0x138>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a41      	ldr	r2, [pc, #260]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b3f      	ldr	r3, [pc, #252]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a3b      	ldr	r2, [pc, #236]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a35      	ldr	r2, [pc, #212]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <MX_GPIO_Init+0x138>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <MX_GPIO_Init+0x138>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_GPIO_Init+0x138>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <MX_GPIO_Init+0x138>)
 8000914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_GPIO_Init+0x138>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000926:	f001 fedf 	bl	80026e8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000930:	4822      	ldr	r0, [pc, #136]	; (80009bc <MX_GPIO_Init+0x13c>)
 8000932:	f001 fca5 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2120      	movs	r1, #32
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <MX_GPIO_Init+0x140>)
 800093c:	f001 fca0 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	481b      	ldr	r0, [pc, #108]	; (80009c4 <MX_GPIO_Init+0x144>)
 8000958:	f001 fb00 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800095c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4811      	ldr	r0, [pc, #68]	; (80009bc <MX_GPIO_Init+0x13c>)
 8000976:	f001 faf1 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <MX_GPIO_Init+0x140>)
 8000992:	f001 fae3 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_GPIO_Init+0x140>)
 80009aa:	f001 fad7 	bl	8001f5c <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400
 80009c0:	48001800 	.word	0x48001800
 80009c4:	48000800 	.word	0x48000800

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_MspInit+0x44>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6613      	str	r3, [r2, #96]	; 0x60
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_MspInit+0x44>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_MspInit+0x44>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6593      	str	r3, [r2, #88]	; 0x58
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_MspInit+0x44>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0b0      	sub	sp, #192	; 0xc0
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	2294      	movs	r2, #148	; 0x94
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fb31 	bl	80050a4 <memset>
  if(hadc->Instance==ADC1)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a42      	ldr	r2, [pc, #264]	; (8000b50 <HAL_ADC_MspInit+0x134>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d17d      	bne.n	8000b48 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000a62:	230c      	movs	r3, #12
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fd1b 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a88:	f7ff ff9e 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a8c:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	4a30      	ldr	r2, [pc, #192]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	4a2a      	ldr	r2, [pc, #168]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a24      	ldr	r2, [pc, #144]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_ADC_MspInit+0x138>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aec:	230c      	movs	r3, #12
 8000aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000af2:	230b      	movs	r3, #11
 8000af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b02:	4619      	mov	r1, r3
 8000b04:	4814      	ldr	r0, [pc, #80]	; (8000b58 <HAL_ADC_MspInit+0x13c>)
 8000b06:	f001 fa29 	bl	8001f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b10:	230b      	movs	r3, #11
 8000b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f001 fa19 	bl	8001f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b30:	230b      	movs	r3, #11
 8000b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <HAL_ADC_MspInit+0x140>)
 8000b44:	f001 fa0a 	bl	8001f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	37c0      	adds	r7, #192	; 0xc0
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	50040000 	.word	0x50040000
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000800 	.word	0x48000800
 8000b5c:	48000400 	.word	0x48000400

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0b0      	sub	sp, #192	; 0xc0
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	2294      	movs	r2, #148	; 0x94
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 fa8f 	bl	80050a4 <memset>
  if(huart->Instance==LPUART1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a43      	ldr	r2, [pc, #268]	; (8000c98 <HAL_UART_MspInit+0x138>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d13e      	bne.n	8000c0e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b90:	2320      	movs	r3, #32
 8000b92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fc8b 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba8:	f7ff ff0e 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bb8:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000bdc:	f001 fd84 	bl	80026e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000be0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c04:	4619      	mov	r1, r3
 8000c06:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <HAL_UART_MspInit+0x140>)
 8000c08:	f001 f9a8 	bl	8001f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0c:	e040      	b.n	8000c90 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a24      	ldr	r2, [pc, #144]	; (8000ca4 <HAL_UART_MspInit+0x144>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d13b      	bne.n	8000c90 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fc47 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000c30:	f7ff feca 	bl	80009c8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c38:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_UART_MspInit+0x13c>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <HAL_UART_MspInit+0x148>)
 8000c8c:	f001 f966 	bl	8001f5c <HAL_GPIO_Init>
}
 8000c90:	bf00      	nop
 8000c92:	37c0      	adds	r7, #192	; 0xc0
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40008000 	.word	0x40008000
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48001800 	.word	0x48001800
 8000ca4:	40004800 	.word	0x40004800
 8000ca8:	48000c00 	.word	0x48000c00

08000cac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0b0      	sub	sp, #192	; 0xc0
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	2294      	movs	r2, #148	; 0x94
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 f9e9 	bl	80050a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cda:	d16c      	bne.n	8000db6 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce8:	f107 0318 	add.w	r3, r7, #24
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fbe3 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cf8:	f7ff fe66 	bl	80009c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d14:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d2e:	230a      	movs	r3, #10
 8000d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f001 f90d 	bl	8001f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f001 f8fc 	bl	8001f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d114      	bne.n	8000db2 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6593      	str	r3, [r2, #88]	; 0x58
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000da0:	f001 fc92 	bl	80026c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_PCD_MspInit+0x114>)
 8000daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000db0:	e001      	b.n	8000db6 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000db2:	f001 fc89 	bl	80026c8 <HAL_PWREx_EnableVddUSB>
}
 8000db6:	bf00      	nop
 8000db8:	37c0      	adds	r7, #192	; 0xc0
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f892 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e40:	f7ff ffea 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <LoopForever+0xe>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	; (8000e88 <LoopForever+0x16>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f004 f8f7 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6e:	f7ff fb47 	bl	8000500 <main>

08000e72 <LoopForever>:

LoopForever:
    b LoopForever
 8000e72:	e7fe      	b.n	8000e72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e74:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e80:	0800514c 	.word	0x0800514c
  ldr r2, =_sbss
 8000e84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e88:	200006c0 	.word	0x200006c0

08000e8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_IRQHandler>

08000e8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f001 f82b 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f80e 	bl	8000ec0 <HAL_InitTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	e001      	b.n	8000eb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb0:	f7ff fd90 	bl	80009d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_InitTick+0x6c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d023      	beq.n	8000f1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_InitTick+0x70>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_InitTick+0x6c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f829 	bl	8001f42 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10f      	bne.n	8000f16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d809      	bhi.n	8000f10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f001 f801 	bl	8001f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_InitTick+0x74>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e007      	b.n	8000f20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e004      	b.n	8000f20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e001      	b.n	8000f20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200006bc 	.word	0x200006bc

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200006bc 	.word	0x200006bc

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3360      	adds	r3, #96	; 0x60
 800103a:	461a      	mov	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <LL_ADC_SetOffset+0x44>)
 800104a:	4013      	ands	r3, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	4313      	orrs	r3, r2
 8001058:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	03fff000 	.word	0x03fff000

08001070 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3360      	adds	r3, #96	; 0x60
 800107e:	461a      	mov	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3360      	adds	r3, #96	; 0x60
 80010ac:	461a      	mov	r2, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	615a      	str	r2, [r3, #20]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3330      	adds	r3, #48	; 0x30
 8001108:	461a      	mov	r2, r3
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	211f      	movs	r1, #31
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	401a      	ands	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	0e9b      	lsrs	r3, r3, #26
 8001130:	f003 011f 	and.w	r1, r3, #31
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	431a      	orrs	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001144:	bf00      	nop
 8001146:	371c      	adds	r7, #28
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3314      	adds	r3, #20
 8001160:	461a      	mov	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	0e5b      	lsrs	r3, r3, #25
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0d1b      	lsrs	r3, r3, #20
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	2107      	movs	r1, #7
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	401a      	ands	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0d1b      	lsrs	r3, r3, #20
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0318 	and.w	r3, r3, #24
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80011cc:	40d9      	lsrs	r1, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	400b      	ands	r3, r1
 80011d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d6:	431a      	orrs	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	0007ffff 	.word	0x0007ffff

080011f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6093      	str	r3, [r2, #8]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001228:	d101      	bne.n	800122e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800124c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001250:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001278:	d101      	bne.n	800127e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <LL_ADC_IsEnabled+0x18>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_ADC_IsEnabled+0x1a>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d101      	bne.n	80012ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d101      	bne.n	80012f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e12f      	b.n	800157a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	2b00      	cmp	r3, #0
 8001326:	d109      	bne.n	800133c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fb77 	bl	8000a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff67 	bl	8001214 <LL_ADC_IsDeepPowerDownEnabled>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff4d 	bl	80011f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff82 	bl	8001264 <LL_ADC_IsInternalRegulatorEnabled>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d115      	bne.n	8001392 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff66 	bl	800123c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001370:	4b84      	ldr	r3, [pc, #528]	; (8001584 <HAL_ADC_Init+0x284>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	099b      	lsrs	r3, r3, #6
 8001376:	4a84      	ldr	r2, [pc, #528]	; (8001588 <HAL_ADC_Init+0x288>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	3301      	adds	r3, #1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001384:	e002      	b.n	800138c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	3b01      	subs	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f9      	bne.n	8001386 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff64 	bl	8001264 <LL_ADC_IsInternalRegulatorEnabled>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10d      	bne.n	80013be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	f043 0210 	orr.w	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff75 	bl	80012b2 <LL_ADC_REG_IsConversionOngoing>
 80013c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80c8 	bne.w	8001568 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 80c4 	bne.w	8001568 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013e8:	f043 0202 	orr.w	r2, r3, #2
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff49 	bl	800128c <LL_ADC_IsEnabled>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10b      	bne.n	8001418 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001400:	4862      	ldr	r0, [pc, #392]	; (800158c <HAL_ADC_Init+0x28c>)
 8001402:	f7ff ff43 	bl	800128c <LL_ADC_IsEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4619      	mov	r1, r3
 8001412:	485f      	ldr	r0, [pc, #380]	; (8001590 <HAL_ADC_Init+0x290>)
 8001414:	f7ff fdd4 	bl	8000fc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e5b      	ldrb	r3, [r3, #25]
 800141c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001422:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001428:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800142e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001436:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d106      	bne.n	8001454 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	3b01      	subs	r3, #1
 800144c:	045b      	lsls	r3, r3, #17
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	2b00      	cmp	r3, #0
 800145a:	d009      	beq.n	8001470 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_ADC_Init+0x294>)
 8001478:	4013      	ands	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	69b9      	ldr	r1, [r7, #24]
 8001480:	430b      	orrs	r3, r1
 8001482:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff12 	bl	80012b2 <LL_ADC_REG_IsConversionOngoing>
 800148e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff1f 	bl	80012d8 <LL_ADC_INJ_IsConversionOngoing>
 800149a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d140      	bne.n	8001524 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d13d      	bne.n	8001524 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
 80014b0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014b2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ca:	f023 0306 	bic.w	r3, r3, #6
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	430b      	orrs	r3, r1
 80014d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d118      	bne.n	8001514 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014ec:	f023 0304 	bic.w	r3, r3, #4
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014f8:	4311      	orrs	r1, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001504:	430a      	orrs	r2, r1
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	e007      	b.n	8001524 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d10c      	bne.n	8001546 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f023 010f 	bic.w	r1, r3, #15
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
 8001544:	e007      	b.n	8001556 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 020f 	bic.w	r2, r2, #15
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	f023 0303 	bic.w	r3, r3, #3
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	659a      	str	r2, [r3, #88]	; 0x58
 8001566:	e007      	b.n	8001578 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f043 0210 	orr.w	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001578:	7ffb      	ldrb	r3, [r7, #31]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000000 	.word	0x20000000
 8001588:	053e2d63 	.word	0x053e2d63
 800158c:	50040000 	.word	0x50040000
 8001590:	50040300 	.word	0x50040300
 8001594:	fff0c007 	.word	0xfff0c007

08001598 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0b6      	sub	sp, #216	; 0xd8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x22>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e3d5      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x7ce>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fe73 	bl	80012b2 <LL_ADC_REG_IsConversionOngoing>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 83ba 	bne.w	8001d48 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d824      	bhi.n	8001626 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	3b02      	subs	r3, #2
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d81b      	bhi.n	800161e <HAL_ADC_ConfigChannel+0x86>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <HAL_ADC_ConfigChannel+0x54>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001615 	.word	0x08001615
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	220c      	movs	r2, #12
 8001600:	605a      	str	r2, [r3, #4]
          break;
 8001602:	e011      	b.n	8001628 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2212      	movs	r2, #18
 8001608:	605a      	str	r2, [r3, #4]
          break;
 800160a:	e00d      	b.n	8001628 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2218      	movs	r2, #24
 8001610:	605a      	str	r2, [r3, #4]
          break;
 8001612:	e009      	b.n	8001628 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161a:	605a      	str	r2, [r3, #4]
          break;
 800161c:	e004      	b.n	8001628 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2206      	movs	r2, #6
 8001622:	605a      	str	r2, [r3, #4]
          break;
 8001624:	e000      	b.n	8001628 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001626:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	f7ff fd5f 	bl	80010f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fe37 	bl	80012b2 <LL_ADC_REG_IsConversionOngoing>
 8001644:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe43 	bl	80012d8 <LL_ADC_INJ_IsConversionOngoing>
 8001652:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001656:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 81c1 	bne.w	80019e2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001664:	2b00      	cmp	r3, #0
 8001666:	f040 81bc 	bne.w	80019e2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001672:	d10f      	bne.n	8001694 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2200      	movs	r2, #0
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fd66 	bl	8001150 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fd20 	bl	80010d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001692:	e00e      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	461a      	mov	r2, r3
 80016a2:	f7ff fd55 	bl	8001150 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fd10 	bl	80010d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d00a      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6919      	ldr	r1, [r3, #16]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016e4:	f7ff fca0 	bl	8001028 <LL_ADC_SetOffset>
 80016e8:	e17b      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fcbd 	bl	8001070 <LL_ADC_GetOffsetChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10a      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x17e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fcb2 	bl	8001070 <LL_ADC_GetOffsetChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	e01e      	b.n	8001754 <HAL_ADC_ConfigChannel+0x1bc>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fca7 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001734:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800173c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001744:	2320      	movs	r3, #32
 8001746:	e004      	b.n	8001752 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1d4>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0e9b      	lsrs	r3, r3, #26
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	e018      	b.n	800179e <HAL_ADC_ConfigChannel+0x206>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001790:	2320      	movs	r3, #32
 8001792:	e004      	b.n	800179e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800179e:	429a      	cmp	r2, r3
 80017a0:	d106      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fc76 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fc5a 	bl	8001070 <LL_ADC_GetOffsetChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10a      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x244>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2101      	movs	r1, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fc4f 	bl	8001070 <LL_ADC_GetOffsetChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	0e9b      	lsrs	r3, r3, #26
 80017d6:	f003 021f 	and.w	r2, r3, #31
 80017da:	e01e      	b.n	800181a <HAL_ADC_ConfigChannel+0x282>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fc44 	bl	8001070 <LL_ADC_GetOffsetChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001802:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800180a:	2320      	movs	r3, #32
 800180c:	e004      	b.n	8001818 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800180e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x29a>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0e9b      	lsrs	r3, r3, #26
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	e018      	b.n	8001864 <HAL_ADC_ConfigChannel+0x2cc>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800184a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800184e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001856:	2320      	movs	r3, #32
 8001858:	e004      	b.n	8001864 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800185a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001864:	429a      	cmp	r2, r3
 8001866:	d106      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2200      	movs	r2, #0
 800186e:	2101      	movs	r1, #1
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fc13 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2102      	movs	r1, #2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fbf7 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10a      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x30a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2102      	movs	r1, #2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fbec 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	0e9b      	lsrs	r3, r3, #26
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	e01e      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x348>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2102      	movs	r1, #2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fbe1 	bl	8001070 <LL_ADC_GetOffsetChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80018c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80018c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80018d0:	2320      	movs	r3, #32
 80018d2:	e004      	b.n	80018de <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80018d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x360>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0e9b      	lsrs	r3, r3, #26
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	e016      	b.n	8001926 <HAL_ADC_ConfigChannel+0x38e>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800190a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800190c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001918:	2320      	movs	r3, #32
 800191a:	e004      	b.n	8001926 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800191c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001926:	429a      	cmp	r2, r3
 8001928:	d106      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	2102      	movs	r1, #2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fbb2 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2103      	movs	r1, #3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fb96 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10a      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x3cc>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2103      	movs	r1, #3
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fb8b 	bl	8001070 <LL_ADC_GetOffsetChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	0e9b      	lsrs	r3, r3, #26
 800195e:	f003 021f 	and.w	r2, r3, #31
 8001962:	e017      	b.n	8001994 <HAL_ADC_ConfigChannel+0x3fc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2103      	movs	r1, #3
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fb80 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800197c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800197e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001986:	2320      	movs	r3, #32
 8001988:	e003      	b.n	8001992 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800198a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x414>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	e011      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x438>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80019ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80019be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80019c4:	2320      	movs	r3, #32
 80019c6:	e003      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80019c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d106      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2200      	movs	r2, #0
 80019da:	2103      	movs	r1, #3
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fb5d 	bl	800109c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fc50 	bl	800128c <LL_ADC_IsEnabled>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 8140 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	461a      	mov	r2, r3
 8001a02:	f7ff fbd1 	bl	80011a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4a8f      	ldr	r2, [pc, #572]	; (8001c48 <HAL_ADC_ConfigChannel+0x6b0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	f040 8131 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x4a2>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0e9b      	lsrs	r3, r3, #26
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	2b09      	cmp	r3, #9
 8001a30:	bf94      	ite	ls
 8001a32:	2301      	movls	r3, #1
 8001a34:	2300      	movhi	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	e019      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x4d6>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001a52:	2320      	movs	r3, #32
 8001a54:	e003      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2b09      	cmp	r3, #9
 8001a66:	bf94      	ite	ls
 8001a68:	2301      	movls	r3, #1
 8001a6a:	2300      	movhi	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d079      	beq.n	8001b66 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x4f6>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	3301      	adds	r3, #1
 8001a86:	069b      	lsls	r3, r3, #26
 8001a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a8c:	e015      	b.n	8001aba <HAL_ADC_ConfigChannel+0x522>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	e003      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	069b      	lsls	r3, r3, #26
 8001ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x542>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0e9b      	lsrs	r3, r3, #26
 8001acc:	3301      	adds	r3, #1
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	e017      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x572>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001af2:	2320      	movs	r3, #32
 8001af4:	e003      	b.n	8001afe <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	ea42 0103 	orr.w	r1, r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x598>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	3301      	adds	r3, #1
 8001b22:	f003 021f 	and.w	r2, r3, #31
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	051b      	lsls	r3, r3, #20
 8001b2e:	e018      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x5ca>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	e003      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	f003 021f 	and.w	r2, r3, #31
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b62:	430b      	orrs	r3, r1
 8001b64:	e081      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x5ea>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	3301      	adds	r3, #1
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b80:	e015      	b.n	8001bae <HAL_ADC_ConfigChannel+0x616>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e003      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	069b      	lsls	r3, r3, #26
 8001baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x636>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	e017      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x666>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	61fb      	str	r3, [r7, #28]
  return result;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e003      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	ea42 0103 	orr.w	r1, r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10d      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x692>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	3301      	adds	r3, #1
 8001c16:	f003 021f 	and.w	r2, r3, #31
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	3b1e      	subs	r3, #30
 8001c22:	051b      	lsls	r3, r3, #20
 8001c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c28:	e01e      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x6d0>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	613b      	str	r3, [r7, #16]
  return result;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d104      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001c42:	2320      	movs	r3, #32
 8001c44:	e006      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x6bc>
 8001c46:	bf00      	nop
 8001c48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	051b      	lsls	r3, r3, #20
 8001c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	6892      	ldr	r2, [r2, #8]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7ff fa6e 	bl	8001150 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d06c      	beq.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c80:	483c      	ldr	r0, [pc, #240]	; (8001d74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c82:	f7ff f9c3 	bl	800100c <LL_ADC_GetCommonPathInternalCh>
 8001c86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <HAL_ADC_ConfigChannel+0x7e0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d127      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d121      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a35      	ldr	r2, [pc, #212]	; (8001d7c <HAL_ADC_ConfigChannel+0x7e4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d157      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	482f      	ldr	r0, [pc, #188]	; (8001d74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cb6:	f7ff f996 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_ADC_ConfigChannel+0x7e8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	099b      	lsrs	r3, r3, #6
 8001cc0:	4a30      	ldr	r2, [pc, #192]	; (8001d84 <HAL_ADC_ConfigChannel+0x7ec>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ce2:	e03a      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_ADC_ConfigChannel+0x7f0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d113      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x77e>
 8001cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_ADC_ConfigChannel+0x7e4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d12a      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4819      	ldr	r0, [pc, #100]	; (8001d74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d10:	f7ff f969 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d14:	e021      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_ADC_ConfigChannel+0x7f4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d11c      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d116      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_ADC_ConfigChannel+0x7e4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d111      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d42:	f7ff f950 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
 8001d46:	e008      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001d62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	37d8      	adds	r7, #216	; 0xd8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	80080000 	.word	0x80080000
 8001d74:	50040300 	.word	0x50040300
 8001d78:	c7520000 	.word	0xc7520000
 8001d7c:	50040000 	.word	0x50040000
 8001d80:	20000000 	.word	0x20000000
 8001d84:	053e2d63 	.word	0x053e2d63
 8001d88:	cb840000 	.word	0xcb840000
 8001d8c:	80000001 	.word	0x80000001

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	; (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	; (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec0:	d301      	bcc.n	8001ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00f      	b.n	8001ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <SysTick_Config+0x40>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f7ff ff8e 	bl	8001df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <SysTick_Config+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <SysTick_Config+0x40>)
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	e000e010 	.word	0xe000e010

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff47 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1c:	f7ff ff5c 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f7ff ff8e 	bl	8001e48 <NVIC_EncodePriority>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff5d 	bl	8001df4 <__NVIC_SetPriority>
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ffb0 	bl	8001eb0 <SysTick_Config>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	e166      	b.n	800223a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8158 	beq.w	8002234 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d005      	beq.n	8001f9c <HAL_GPIO_Init+0x40>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d130      	bne.n	8001ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 0201 	and.w	r2, r3, #1
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b03      	cmp	r3, #3
 8002008:	d017      	beq.n	800203a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d123      	bne.n	800208e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	6939      	ldr	r1, [r7, #16]
 800208a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0203 	and.w	r2, r3, #3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80b2 	beq.w	8002234 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d0:	4b61      	ldr	r3, [pc, #388]	; (8002258 <HAL_GPIO_Init+0x2fc>)
 80020d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d4:	4a60      	ldr	r2, [pc, #384]	; (8002258 <HAL_GPIO_Init+0x2fc>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6613      	str	r3, [r2, #96]	; 0x60
 80020dc:	4b5e      	ldr	r3, [pc, #376]	; (8002258 <HAL_GPIO_Init+0x2fc>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020e8:	4a5c      	ldr	r2, [pc, #368]	; (800225c <HAL_GPIO_Init+0x300>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002112:	d02b      	beq.n	800216c <HAL_GPIO_Init+0x210>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a52      	ldr	r2, [pc, #328]	; (8002260 <HAL_GPIO_Init+0x304>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d025      	beq.n	8002168 <HAL_GPIO_Init+0x20c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a51      	ldr	r2, [pc, #324]	; (8002264 <HAL_GPIO_Init+0x308>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d01f      	beq.n	8002164 <HAL_GPIO_Init+0x208>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a50      	ldr	r2, [pc, #320]	; (8002268 <HAL_GPIO_Init+0x30c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d019      	beq.n	8002160 <HAL_GPIO_Init+0x204>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a4f      	ldr	r2, [pc, #316]	; (800226c <HAL_GPIO_Init+0x310>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_GPIO_Init+0x200>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a4e      	ldr	r2, [pc, #312]	; (8002270 <HAL_GPIO_Init+0x314>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1fc>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a4d      	ldr	r2, [pc, #308]	; (8002274 <HAL_GPIO_Init+0x318>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1f8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a4c      	ldr	r2, [pc, #304]	; (8002278 <HAL_GPIO_Init+0x31c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1f4>
 800214c:	2307      	movs	r3, #7
 800214e:	e00e      	b.n	800216e <HAL_GPIO_Init+0x212>
 8002150:	2308      	movs	r3, #8
 8002152:	e00c      	b.n	800216e <HAL_GPIO_Init+0x212>
 8002154:	2306      	movs	r3, #6
 8002156:	e00a      	b.n	800216e <HAL_GPIO_Init+0x212>
 8002158:	2305      	movs	r3, #5
 800215a:	e008      	b.n	800216e <HAL_GPIO_Init+0x212>
 800215c:	2304      	movs	r3, #4
 800215e:	e006      	b.n	800216e <HAL_GPIO_Init+0x212>
 8002160:	2303      	movs	r3, #3
 8002162:	e004      	b.n	800216e <HAL_GPIO_Init+0x212>
 8002164:	2302      	movs	r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x212>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_GPIO_Init+0x212>
 800216c:	2300      	movs	r3, #0
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	f002 0203 	and.w	r2, r2, #3
 8002174:	0092      	lsls	r2, r2, #2
 8002176:	4093      	lsls	r3, r2
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800217e:	4937      	ldr	r1, [pc, #220]	; (800225c <HAL_GPIO_Init+0x300>)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_GPIO_Init+0x320>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021b0:	4a32      	ldr	r2, [pc, #200]	; (800227c <HAL_GPIO_Init+0x320>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_GPIO_Init+0x320>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021da:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_GPIO_Init+0x320>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_GPIO_Init+0x320>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_GPIO_Init+0x320>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_GPIO_Init+0x320>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_GPIO_Init+0x320>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f ae91 	bne.w	8001f6c <HAL_GPIO_Init+0x10>
  }
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40021000 	.word	0x40021000
 800225c:	40010000 	.word	0x40010000
 8002260:	48000400 	.word	0x48000400
 8002264:	48000800 	.word	0x48000800
 8002268:	48000c00 	.word	0x48000c00
 800226c:	48001000 	.word	0x48001000
 8002270:	48001400 	.word	0x48001400
 8002274:	48001800 	.word	0x48001800
 8002278:	48001c00 	.word	0x48001c00
 800227c:	40010400 	.word	0x40010400

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	b08f      	sub	sp, #60	; 0x3c
 80022b4:	af0a      	add	r7, sp, #40	; 0x28
 80022b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e116      	b.n	80024f0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d106      	bne.n	80022e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7fe fce5 	bl	8000cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f002 fc21 	bl	8004b48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	687e      	ldr	r6, [r7, #4]
 800230e:	466d      	mov	r5, sp
 8002310:	f106 0410 	add.w	r4, r6, #16
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002320:	e885 0003 	stmia.w	r5, {r0, r1}
 8002324:	1d33      	adds	r3, r6, #4
 8002326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f002 fbe1 	bl	8004af0 <USB_CoreInit>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0d7      	b.n	80024f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fc0f 	bl	8004b6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e04a      	b.n	80023e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	333d      	adds	r3, #61	; 0x3d
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	333c      	adds	r3, #60	; 0x3c
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	b298      	uxth	r0, r3
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	3344      	adds	r3, #68	; 0x44
 800238e:	4602      	mov	r2, r0
 8002390:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	3340      	adds	r3, #64	; 0x40
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	3348      	adds	r3, #72	; 0x48
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	334c      	adds	r3, #76	; 0x4c
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3354      	adds	r3, #84	; 0x54
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	3301      	adds	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d3af      	bcc.n	8002352 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e044      	b.n	8002482 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	3301      	adds	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	d3b5      	bcc.n	80023f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	687e      	ldr	r6, [r7, #4]
 8002494:	466d      	mov	r5, sp
 8002496:	f106 0410 	add.w	r4, r6, #16
 800249a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024aa:	1d33      	adds	r3, r6, #4
 80024ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ae:	6838      	ldr	r0, [r7, #0]
 80024b0:	f002 fba8 	bl	8004c04 <USB_DevInit>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e014      	b.n	80024f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f80a 	bl	80024f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fd54 	bl	8004f96 <USB_DevDisconnect>

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	f043 0303 	orr.w	r3, r3, #3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800254c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002550:	d102      	bne.n	8002558 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002556:	e00b      	b.n	8002570 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_PWREx_GetVoltageRange+0x3c>)
 800255a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002566:	d102      	bne.n	800256e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256c:	e000      	b.n	8002570 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800256e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000

08002580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d141      	bne.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800258e:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	d131      	bne.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a2:	4a46      	ldr	r2, [pc, #280]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025b4:	4a41      	ldr	r2, [pc, #260]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025bc:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2232      	movs	r2, #50	; 0x32
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	0c9b      	lsrs	r3, r3, #18
 80025ce:	3301      	adds	r3, #1
 80025d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d2:	e002      	b.n	80025da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d102      	bne.n	80025ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f2      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d158      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e057      	b.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002606:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800260c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002610:	e04d      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d141      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002626:	d131      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002640:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002646:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2232      	movs	r2, #50	; 0x32
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0c9b      	lsrs	r3, r3, #18
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265e:	e002      	b.n	8002666 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3b01      	subs	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d102      	bne.n	800267a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f2      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d112      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e011      	b.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800269c:	e007      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40007000 	.word	0x40007000
 80026c0:	20000000 	.word	0x20000000
 80026c4:	431bde83 	.word	0x431bde83

080026c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d6:	6053      	str	r3, [r2, #4]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000

080026e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_PWREx_EnableVddIO2+0x1c>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_PWREx_EnableVddIO2+0x1c>)
 80026f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f6:	6053      	str	r3, [r2, #4]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40007000 	.word	0x40007000

08002708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f000 bc08 	b.w	8002f2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271c:	4b96      	ldr	r3, [pc, #600]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002726:	4b94      	ldr	r3, [pc, #592]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80e4 	beq.w	8002906 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_RCC_OscConfig+0x4c>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	f040 808b 	bne.w	8002862 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	f040 8087 	bne.w	8002862 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002754:	4b88      	ldr	r3, [pc, #544]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_OscConfig+0x64>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e3df      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1a      	ldr	r2, [r3, #32]
 8002770:	4b81      	ldr	r3, [pc, #516]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_RCC_OscConfig+0x7e>
 800277c:	4b7e      	ldr	r3, [pc, #504]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002784:	e005      	b.n	8002792 <HAL_RCC_OscConfig+0x8a>
 8002786:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002792:	4293      	cmp	r3, r2
 8002794:	d223      	bcs.n	80027de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fdcc 	bl	8003338 <RCC_SetFlashLatencyFromMSIRange>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e3c0      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027aa:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a72      	ldr	r2, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027b0:	f043 0308 	orr.w	r3, r3, #8
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b70      	ldr	r3, [pc, #448]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	496d      	ldr	r1, [pc, #436]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c8:	4b6b      	ldr	r3, [pc, #428]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	4968      	ldr	r1, [pc, #416]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e025      	b.n	800282a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027de:	4b66      	ldr	r3, [pc, #408]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a65      	ldr	r2, [pc, #404]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4960      	ldr	r1, [pc, #384]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027fc:	4b5e      	ldr	r3, [pc, #376]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	495b      	ldr	r1, [pc, #364]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fd8c 	bl	8003338 <RCC_SetFlashLatencyFromMSIRange>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e380      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800282a:	f000 fcc1 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800282e:	4602      	mov	r2, r0
 8002830:	4b51      	ldr	r3, [pc, #324]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	4950      	ldr	r1, [pc, #320]	; (800297c <HAL_RCC_OscConfig+0x274>)
 800283c:	5ccb      	ldrb	r3, [r1, r3]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <HAL_RCC_OscConfig+0x278>)
 8002848:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800284a:	4b4e      	ldr	r3, [pc, #312]	; (8002984 <HAL_RCC_OscConfig+0x27c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fb36 	bl	8000ec0 <HAL_InitTick>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d052      	beq.n	8002904 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	e364      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d032      	beq.n	80028d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800286a:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002876:	f7fe fb73 	bl	8000f60 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800287e:	f7fe fb6f 	bl	8000f60 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e34d      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a35      	ldr	r2, [pc, #212]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b33      	ldr	r3, [pc, #204]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4930      	ldr	r1, [pc, #192]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ba:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	492b      	ldr	r1, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
 80028ce:	e01a      	b.n	8002906 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028dc:	f7fe fb40 	bl	8000f60 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e4:	f7fe fb3c 	bl	8000f60 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e31a      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x1dc>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d073      	beq.n	80029fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x21c>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d10e      	bne.n	800293c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d10b      	bne.n	800293c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d063      	beq.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d15f      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e2f7      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x24c>
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e025      	b.n	80029a0 <HAL_RCC_OscConfig+0x298>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295c:	d114      	bne.n	8002988 <HAL_RCC_OscConfig+0x280>
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a02      	ldr	r2, [pc, #8]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e013      	b.n	80029a0 <HAL_RCC_OscConfig+0x298>
 8002978:	40021000 	.word	0x40021000
 800297c:	080050cc 	.word	0x080050cc
 8002980:	20000000 	.word	0x20000000
 8002984:	20000004 	.word	0x20000004
 8002988:	4ba0      	ldr	r3, [pc, #640]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a9f      	ldr	r2, [pc, #636]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b9d      	ldr	r3, [pc, #628]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a9c      	ldr	r2, [pc, #624]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fada 	bl	8000f60 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fad6 	bl	8000f60 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e2b4      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c2:	4b92      	ldr	r3, [pc, #584]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2a8>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fac6 	bl	8000f60 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fac2 	bl	8000f60 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e2a0      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ea:	4b88      	ldr	r3, [pc, #544]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x2d0>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d060      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_OscConfig+0x310>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d119      	bne.n	8002a46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d116      	bne.n	8002a46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a18:	4b7c      	ldr	r3, [pc, #496]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_OscConfig+0x328>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e27d      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b76      	ldr	r3, [pc, #472]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	4973      	ldr	r1, [pc, #460]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a44:	e040      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d023      	beq.n	8002a96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4e:	4b6f      	ldr	r3, [pc, #444]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6e      	ldr	r2, [pc, #440]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fa81 	bl	8000f60 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fe fa7d 	bl	8000f60 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e25b      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a74:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	495f      	ldr	r1, [pc, #380]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e018      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a5c      	ldr	r2, [pc, #368]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fa5d 	bl	8000f60 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fa59 	bl	8000f60 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e237      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d03c      	beq.n	8002b4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002adc:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fa38 	bl	8000f60 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe fa34 	bl	8000f60 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e212      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b06:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ef      	beq.n	8002af4 <HAL_RCC_OscConfig+0x3ec>
 8002b14:	e01b      	b.n	8002b4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1c:	4a3b      	ldr	r2, [pc, #236]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe fa1b 	bl	8000f60 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fa17 	bl	8000f60 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e1f5      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ef      	bne.n	8002b2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a6 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b60:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	4a26      	ldr	r2, [pc, #152]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6593      	str	r3, [r2, #88]	; 0x58
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b84:	2301      	movs	r3, #1
 8002b86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_OscConfig+0x508>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d118      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_OscConfig+0x508>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_RCC_OscConfig+0x508>)
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f9de 	bl	8000f60 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe f9da 	bl	8000f60 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1b8      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x508>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d108      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4d8>
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bde:	e029      	b.n	8002c34 <HAL_RCC_OscConfig+0x52c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d115      	bne.n	8002c14 <HAL_RCC_OscConfig+0x50c>
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	4a03      	ldr	r2, [pc, #12]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c08:	e014      	b.n	8002c34 <HAL_RCC_OscConfig+0x52c>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40007000 	.word	0x40007000
 8002c14:	4b9d      	ldr	r3, [pc, #628]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	4a9c      	ldr	r2, [pc, #624]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c24:	4b99      	ldr	r3, [pc, #612]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	4a98      	ldr	r2, [pc, #608]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d016      	beq.n	8002c6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe f990 	bl	8000f60 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe f98c 	bl	8000f60 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e168      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5a:	4b8c      	ldr	r3, [pc, #560]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ed      	beq.n	8002c44 <HAL_RCC_OscConfig+0x53c>
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe f979 	bl	8000f60 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe f975 	bl	8000f60 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e151      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c88:	4b80      	ldr	r3, [pc, #512]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ed      	bne.n	8002c72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c96:	7ffb      	ldrb	r3, [r7, #31]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b7b      	ldr	r3, [pc, #492]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d03c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cbc:	4b73      	ldr	r3, [pc, #460]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc2:	4a72      	ldr	r2, [pc, #456]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe f948 	bl	8000f60 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd4:	f7fe f944 	bl	8000f60 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e122      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ce6:	4b69      	ldr	r3, [pc, #420]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ef      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x5cc>
 8002cf4:	e01b      	b.n	8002d2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cf6:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cfc:	4a63      	ldr	r2, [pc, #396]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe f92b 	bl	8000f60 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d0e:	f7fe f927 	bl	8000f60 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e105      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d20:	4b5a      	ldr	r3, [pc, #360]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ef      	bne.n	8002d0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80f9 	beq.w	8002f2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	f040 80cf 	bne.w	8002ee0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d42:	4b52      	ldr	r3, [pc, #328]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d12c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	3b01      	subs	r3, #1
 8002d62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d123      	bne.n	8002db0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d11b      	bne.n	8002db0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d113      	bne.n	8002db0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	3b01      	subs	r3, #1
 8002d96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d109      	bne.n	8002db0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	3b01      	subs	r3, #1
 8002daa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d071      	beq.n	8002e94 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d068      	beq.n	8002e88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002db6:	4b35      	ldr	r3, [pc, #212]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dc2:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0ac      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dde:	f7fe f8bf 	bl	8000f60 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe f8bb 	bl	8000f60 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e099      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <HAL_RCC_OscConfig+0x788>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e1e:	0212      	lsls	r2, r2, #8
 8002e20:	4311      	orrs	r1, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e26:	0852      	lsrs	r2, r2, #1
 8002e28:	3a01      	subs	r2, #1
 8002e2a:	0552      	lsls	r2, r2, #21
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e32:	0852      	lsrs	r2, r2, #1
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0652      	lsls	r2, r2, #25
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e3e:	06d2      	lsls	r2, r2, #27
 8002e40:	430a      	orrs	r2, r1
 8002e42:	4912      	ldr	r1, [pc, #72]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e48:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e60:	f7fe f87e 	bl	8000f60 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe f87a 	bl	8000f60 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e058      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e86:	e050      	b.n	8002f2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e04f      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d144      	bne.n	8002f2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eac:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eb8:	f7fe f852 	bl	8000f60 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe f84e 	bl	8000f60 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e02c      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x7b8>
 8002ede:	e024      	b.n	8002f2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d01f      	beq.n	8002f26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f835 	bl	8000f60 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe f831 	bl	8000f60 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4905      	ldr	r1, [pc, #20]	; (8002f34 <HAL_RCC_OscConfig+0x82c>)
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_OscConfig+0x830>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	60cb      	str	r3, [r1, #12]
 8002f24:	e001      	b.n	8002f2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	feeefffc 	.word	0xfeeefffc

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e11d      	b.n	8003190 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b90      	ldr	r3, [pc, #576]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b8d      	ldr	r3, [pc, #564]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	498b      	ldr	r1, [pc, #556]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e105      	b.n	8003190 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b81      	ldr	r3, [pc, #516]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d908      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b7e      	ldr	r3, [pc, #504]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	497b      	ldr	r1, [pc, #492]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d079      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d11e      	bne.n	8003004 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc6:	4b75      	ldr	r3, [pc, #468]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0dc      	b.n	8003190 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002fd6:	f000 fa09 	bl	80033ec <RCC_GetSysClockFreqFromPLLSource>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4a70      	ldr	r2, [pc, #448]	; (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d946      	bls.n	8003070 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fe2:	4b6e      	ldr	r3, [pc, #440]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d140      	bne.n	8003070 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fee:	4b6b      	ldr	r3, [pc, #428]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ff6:	4a69      	ldr	r2, [pc, #420]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e035      	b.n	8003070 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300c:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d115      	bne.n	8003044 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0b9      	b.n	8003190 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003024:	4b5d      	ldr	r3, [pc, #372]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0ad      	b.n	8003190 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0a5      	b.n	8003190 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003044:	f000 f8b4 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8003048:	4603      	mov	r3, r0
 800304a:	4a55      	ldr	r2, [pc, #340]	; (80031a0 <HAL_RCC_ClockConfig+0x264>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d90f      	bls.n	8003070 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003050:	4b52      	ldr	r3, [pc, #328]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800305c:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003064:	4a4d      	ldr	r2, [pc, #308]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f023 0203 	bic.w	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4947      	ldr	r1, [pc, #284]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003082:	f7fd ff6d 	bl	8000f60 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308a:	f7fd ff69 	bl	8000f60 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e077      	b.n	8003190 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a0:	4b3e      	ldr	r3, [pc, #248]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 020c 	and.w	r2, r3, #12
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d1eb      	bne.n	800308a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030b8:	4b38      	ldr	r3, [pc, #224]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a37      	ldr	r2, [pc, #220]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030dc:	429a      	cmp	r2, r3
 80030de:	d208      	bcs.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	492b      	ldr	r1, [pc, #172]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f2:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d210      	bcs.n	8003122 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 020f 	bic.w	r2, r3, #15
 8003108:	4923      	ldr	r1, [pc, #140]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d001      	beq.n	8003122 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e036      	b.n	8003190 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4918      	ldr	r1, [pc, #96]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 800313c:	4313      	orrs	r3, r2
 800313e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d009      	beq.n	8003160 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314c:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4910      	ldr	r1, [pc, #64]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003160:	f000 f826 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b0d      	ldr	r3, [pc, #52]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	490c      	ldr	r1, [pc, #48]	; (80031a4 <HAL_RCC_ClockConfig+0x268>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x26c>)
 800317e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x270>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd fe9b 	bl	8000ec0 <HAL_InitTick>
 800318a:	4603      	mov	r3, r0
 800318c:	73fb      	strb	r3, [r7, #15]

  return status;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40022000 	.word	0x40022000
 800319c:	40021000 	.word	0x40021000
 80031a0:	04c4b400 	.word	0x04c4b400
 80031a4:	080050cc 	.word	0x080050cc
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000004 	.word	0x20000004

080031b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c8:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x34>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d121      	bne.n	8003222 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d11e      	bne.n	8003222 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031e4:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f0:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e005      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800320c:	4a2b      	ldr	r2, [pc, #172]	; (80032bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003214:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d102      	bne.n	800322e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e004      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d101      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003234:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003236:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d134      	bne.n	80032a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800323e:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0xa6>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d003      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0xac>
 8003254:	e005      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003258:	617b      	str	r3, [r7, #20]
      break;
 800325a:	e005      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800325e:	617b      	str	r3, [r7, #20]
      break;
 8003260:	e002      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	617b      	str	r3, [r7, #20]
      break;
 8003266:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	3301      	adds	r3, #1
 8003274:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	fb03 f202 	mul.w	r2, r3, r2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	0e5b      	lsrs	r3, r3, #25
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	3301      	adds	r3, #1
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032a8:	69bb      	ldr	r3, [r7, #24]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3724      	adds	r7, #36	; 0x24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	080050e4 	.word	0x080050e4
 80032c0:	00f42400 	.word	0x00f42400
 80032c4:	007a1200 	.word	0x007a1200

080032c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000000 	.word	0x20000000

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032e4:	f7ff fff0 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4904      	ldr	r1, [pc, #16]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000
 8003308:	080050dc 	.word	0x080050dc

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003310:	f7ff ffda 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	0adb      	lsrs	r3, r3, #11
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4904      	ldr	r1, [pc, #16]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	080050dc 	.word	0x080050dc

08003338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003350:	f7ff f8f6 	bl	8002540 <HAL_PWREx_GetVoltageRange>
 8003354:	6178      	str	r0, [r7, #20]
 8003356:	e014      	b.n	8003382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003362:	6593      	str	r3, [r2, #88]	; 0x58
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003370:	f7ff f8e6 	bl	8002540 <HAL_PWREx_GetVoltageRange>
 8003374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d10b      	bne.n	80033a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d913      	bls.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2ba0      	cmp	r3, #160	; 0xa0
 8003394:	d902      	bls.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003396:	2302      	movs	r3, #2
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e00d      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800339c:	2301      	movs	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	e00a      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b7f      	cmp	r3, #127	; 0x7f
 80033a6:	d902      	bls.n	80033ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033a8:	2302      	movs	r3, #2
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	e004      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b70      	cmp	r3, #112	; 0x70
 80033b2:	d101      	bne.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b4:	2301      	movs	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 020f 	bic.w	r2, r3, #15
 80033c0:	4909      	ldr	r1, [pc, #36]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40022000 	.word	0x40022000

080033ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f2:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d00b      	beq.n	800341a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d825      	bhi.n	8003454 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d008      	beq.n	8003420 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d11f      	bne.n	8003454 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003416:	613b      	str	r3, [r7, #16]
    break;
 8003418:	e01f      	b.n	800345a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800341a:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800341c:	613b      	str	r3, [r7, #16]
    break;
 800341e:	e01c      	b.n	800345a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003420:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800342e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e005      	b.n	8003448 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003448:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	613b      	str	r3, [r7, #16]
    break;
 8003452:	e002      	b.n	800345a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]
    break;
 8003458:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	3301      	adds	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	fb03 f202 	mul.w	r2, r3, r2
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0e5b      	lsrs	r3, r3, #25
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	3301      	adds	r3, #1
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800349a:	683b      	ldr	r3, [r7, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40021000 	.word	0x40021000
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200
 80034b4:	080050e4 	.word	0x080050e4

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c0:	2300      	movs	r3, #0
 80034c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d040      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d02a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d825      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034e0:	2b60      	cmp	r3, #96	; 0x60
 80034e2:	d026      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034e4:	2b60      	cmp	r3, #96	; 0x60
 80034e6:	d821      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d006      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d81d      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d010      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80034f8:	e018      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034fa:	4b89      	ldr	r3, [pc, #548]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	4a88      	ldr	r2, [pc, #544]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003506:	e015      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fb02 	bl	8003b18 <RCCEx_PLLSAI1_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003518:	e00c      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3320      	adds	r3, #32
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fbed 	bl	8003d00 <RCCEx_PLLSAI2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800352a:	e003      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	74fb      	strb	r3, [r7, #19]
      break;
 8003530:	e000      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353a:	4b79      	ldr	r3, [pc, #484]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800353c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003540:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003548:	4975      	ldr	r1, [pc, #468]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003550:	e001      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d047      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356a:	d030      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003570:	d82a      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003576:	d02a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800357c:	d824      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800357e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003582:	d008      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003588:	d81e      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800358e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003592:	d010      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003594:	e018      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003596:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4a61      	ldr	r2, [pc, #388]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035a2:	e015      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fab4 	bl	8003b18 <RCCEx_PLLSAI1_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b4:	e00c      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3320      	adds	r3, #32
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fb9f 	bl	8003d00 <RCCEx_PLLSAI2_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	74fb      	strb	r3, [r7, #19]
      break;
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80035ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035d6:	4b52      	ldr	r3, [pc, #328]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	494e      	ldr	r1, [pc, #312]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035ec:	e001      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 809f 	beq.w	800373e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003604:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	4a40      	ldr	r2, [pc, #256]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	; 0x58
 8003626:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003636:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3a      	ldr	r2, [pc, #232]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003642:	f7fd fc8d 	bl	8000f60 <HAL_GetTick>
 8003646:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003648:	e009      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fd fc89 	bl	8000f60 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d902      	bls.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	74fb      	strb	r3, [r7, #19]
        break;
 800365c:	e005      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ef      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d15b      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01f      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	429a      	cmp	r2, r3
 800368c:	d019      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003698:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036ba:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d016      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd fc48 	bl	8000f60 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d2:	e00b      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fd fc44 	bl	8000f60 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d902      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	74fb      	strb	r3, [r7, #19]
            break;
 80036ea:	e006      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0ec      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10c      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003718:	e008      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	74bb      	strb	r3, [r7, #18]
 800371e:	e005      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372c:	7c7b      	ldrb	r3, [r7, #17]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d105      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003732:	4ba0      	ldr	r3, [pc, #640]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a9f      	ldr	r2, [pc, #636]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800374a:	4b9a      	ldr	r3, [pc, #616]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f023 0203 	bic.w	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	4996      	ldr	r1, [pc, #600]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800376c:	4b91      	ldr	r3, [pc, #580]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 020c 	bic.w	r2, r3, #12
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	498e      	ldr	r1, [pc, #568]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800378e:	4b89      	ldr	r3, [pc, #548]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	4985      	ldr	r1, [pc, #532]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b0:	4b80      	ldr	r3, [pc, #512]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037be:	497d      	ldr	r1, [pc, #500]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037d2:	4b78      	ldr	r3, [pc, #480]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	4974      	ldr	r1, [pc, #464]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	496c      	ldr	r1, [pc, #432]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003816:	4b67      	ldr	r3, [pc, #412]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003824:	4963      	ldr	r1, [pc, #396]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003838:	4b5e      	ldr	r3, [pc, #376]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003846:	495b      	ldr	r1, [pc, #364]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385a:	4b56      	ldr	r3, [pc, #344]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	4952      	ldr	r1, [pc, #328]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800387c:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	494a      	ldr	r1, [pc, #296]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800389e:	4b45      	ldr	r3, [pc, #276]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	4941      	ldr	r1, [pc, #260]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038c0:	4b3c      	ldr	r3, [pc, #240]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ce:	4939      	ldr	r1, [pc, #228]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d028      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038e2:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f0:	4930      	ldr	r1, [pc, #192]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003900:	d106      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003902:	4b2c      	ldr	r3, [pc, #176]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390c:	60d3      	str	r3, [r2, #12]
 800390e:	e011      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003918:	d10c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f8f9 	bl	8003b18 <RCCEx_PLLSAI1_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d04d      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003948:	d108      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800394c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003956:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800395a:	e012      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800395c:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800395e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003962:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003968:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397a:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398a:	d106      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003996:	60d3      	str	r3, [r2, #12]
 8003998:	e020      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800399e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a2:	d109      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a02      	ldr	r2, [pc, #8]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
 80039b0:	e014      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f8a5 	bl	8003b18 <RCCEx_PLLSAI1_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d028      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039e8:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f6:	4947      	ldr	r1, [pc, #284]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a06:	d106      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a08:	4b42      	ldr	r3, [pc, #264]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a41      	ldr	r2, [pc, #260]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a12:	60d3      	str	r3, [r2, #12]
 8003a14:	e011      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f876 	bl	8003b18 <RCCEx_PLLSAI1_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01e      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a56:	492f      	ldr	r1, [pc, #188]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2102      	movs	r1, #2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f851 	bl	8003b18 <RCCEx_PLLSAI1_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a90:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a96:	f023 0204 	bic.w	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa0:	491c      	ldr	r1, [pc, #112]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aba:	f023 0218 	bic.w	r2, r3, #24
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	4913      	ldr	r1, [pc, #76]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d017      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ade:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae8:	490a      	ldr	r1, [pc, #40]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afa:	d105      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b08:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000

08003b18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b26:	4b72      	ldr	r3, [pc, #456]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00e      	beq.n	8003b50 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b32:	4b6f      	ldr	r3, [pc, #444]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0203 	and.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d103      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
       ||
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d142      	bne.n	8003bd0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	e03f      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d018      	beq.n	8003b8a <RCCEx_PLLSAI1_Config+0x72>
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d825      	bhi.n	8003ba8 <RCCEx_PLLSAI1_Config+0x90>
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d002      	beq.n	8003b66 <RCCEx_PLLSAI1_Config+0x4e>
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d009      	beq.n	8003b78 <RCCEx_PLLSAI1_Config+0x60>
 8003b64:	e020      	b.n	8003ba8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b66:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11d      	bne.n	8003bae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e01a      	b.n	8003bae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b78:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b88:	e013      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b8a:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b96:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ba6:	e006      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e004      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bbe:	4b4c      	ldr	r3, [pc, #304]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4949      	ldr	r1, [pc, #292]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 8086 	bne.w	8003ce4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bd8:	4b45      	ldr	r3, [pc, #276]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a44      	ldr	r2, [pc, #272]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fd f9bc 	bl	8000f60 <HAL_GetTick>
 8003be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bea:	e009      	b.n	8003c00 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bec:	f7fd f9b8 	bl	8000f60 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bfe:	e005      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c00:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ef      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d168      	bne.n	8003ce4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d113      	bne.n	8003c40 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c18:	4b35      	ldr	r3, [pc, #212]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6892      	ldr	r2, [r2, #8]
 8003c24:	0211      	lsls	r1, r2, #8
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68d2      	ldr	r2, [r2, #12]
 8003c2a:	06d2      	lsls	r2, r2, #27
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6852      	ldr	r2, [r2, #4]
 8003c32:	3a01      	subs	r2, #1
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	430a      	orrs	r2, r1
 8003c38:	492d      	ldr	r1, [pc, #180]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	610b      	str	r3, [r1, #16]
 8003c3e:	e02d      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d115      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c46:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	0211      	lsls	r1, r2, #8
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6912      	ldr	r2, [r2, #16]
 8003c58:	0852      	lsrs	r2, r2, #1
 8003c5a:	3a01      	subs	r2, #1
 8003c5c:	0552      	lsls	r2, r2, #21
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6852      	ldr	r2, [r2, #4]
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	4921      	ldr	r1, [pc, #132]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	610b      	str	r3, [r1, #16]
 8003c70:	e014      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c72:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	0211      	lsls	r1, r2, #8
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6952      	ldr	r2, [r2, #20]
 8003c84:	0852      	lsrs	r2, r2, #1
 8003c86:	3a01      	subs	r2, #1
 8003c88:	0652      	lsls	r2, r2, #25
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6852      	ldr	r2, [r2, #4]
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	430a      	orrs	r2, r1
 8003c96:	4916      	ldr	r1, [pc, #88]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fd f95a 	bl	8000f60 <HAL_GetTick>
 8003cac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cae:	e009      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb0:	f7fd f956 	bl	8000f60 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d902      	bls.n	8003cc4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	73fb      	strb	r3, [r7, #15]
          break;
 8003cc2:	e005      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ef      	beq.n	8003cb0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	4904      	ldr	r1, [pc, #16]	; (8003cf0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	07ff800f 	.word	0x07ff800f
 8003cf8:	ff9f800f 	.word	0xff9f800f
 8003cfc:	f9ff800f 	.word	0xf9ff800f

08003d00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d0e:	4b72      	ldr	r3, [pc, #456]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00e      	beq.n	8003d38 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d1a:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0203 	and.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d103      	bne.n	8003d32 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d142      	bne.n	8003db8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
 8003d36:	e03f      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d018      	beq.n	8003d72 <RCCEx_PLLSAI2_Config+0x72>
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d825      	bhi.n	8003d90 <RCCEx_PLLSAI2_Config+0x90>
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <RCCEx_PLLSAI2_Config+0x4e>
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d009      	beq.n	8003d60 <RCCEx_PLLSAI2_Config+0x60>
 8003d4c:	e020      	b.n	8003d90 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d4e:	4b62      	ldr	r3, [pc, #392]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11d      	bne.n	8003d96 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5e:	e01a      	b.n	8003d96 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d60:	4b5d      	ldr	r3, [pc, #372]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d116      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d70:	e013      	b.n	8003d9a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d72:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d7e:	4b56      	ldr	r3, [pc, #344]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d8e:	e006      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      break;
 8003d94:	e004      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003da6:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4949      	ldr	r1, [pc, #292]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 8086 	bne.w	8003ecc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dc0:	4b45      	ldr	r3, [pc, #276]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a44      	ldr	r2, [pc, #272]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fd f8c8 	bl	8000f60 <HAL_GetTick>
 8003dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dd2:	e009      	b.n	8003de8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dd4:	f7fd f8c4 	bl	8000f60 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	73fb      	strb	r3, [r7, #15]
        break;
 8003de6:	e005      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003de8:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ef      	bne.n	8003dd4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d168      	bne.n	8003ecc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d113      	bne.n	8003e28 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e00:	4b35      	ldr	r3, [pc, #212]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	4b35      	ldr	r3, [pc, #212]	; (8003edc <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6892      	ldr	r2, [r2, #8]
 8003e0c:	0211      	lsls	r1, r2, #8
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	06d2      	lsls	r2, r2, #27
 8003e14:	4311      	orrs	r1, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6852      	ldr	r2, [r2, #4]
 8003e1a:	3a01      	subs	r2, #1
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	492d      	ldr	r1, [pc, #180]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	614b      	str	r3, [r1, #20]
 8003e26:	e02d      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d115      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6892      	ldr	r2, [r2, #8]
 8003e3a:	0211      	lsls	r1, r2, #8
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6912      	ldr	r2, [r2, #16]
 8003e40:	0852      	lsrs	r2, r2, #1
 8003e42:	3a01      	subs	r2, #1
 8003e44:	0552      	lsls	r2, r2, #21
 8003e46:	4311      	orrs	r1, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6852      	ldr	r2, [r2, #4]
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	430a      	orrs	r2, r1
 8003e52:	4921      	ldr	r1, [pc, #132]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	614b      	str	r3, [r1, #20]
 8003e58:	e014      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6892      	ldr	r2, [r2, #8]
 8003e66:	0211      	lsls	r1, r2, #8
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6952      	ldr	r2, [r2, #20]
 8003e6c:	0852      	lsrs	r2, r2, #1
 8003e6e:	3a01      	subs	r2, #1
 8003e70:	0652      	lsls	r2, r2, #25
 8003e72:	4311      	orrs	r1, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6852      	ldr	r2, [r2, #4]
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0112      	lsls	r2, r2, #4
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	4916      	ldr	r1, [pc, #88]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e84:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd f866 	bl	8000f60 <HAL_GetTick>
 8003e94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e96:	e009      	b.n	8003eac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e98:	f7fd f862 	bl	8000f60 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d902      	bls.n	8003eac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eaa:	e005      	b.n	8003eb8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ef      	beq.n	8003e98 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	4904      	ldr	r1, [pc, #16]	; (8003ed8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	07ff800f 	.word	0x07ff800f
 8003ee0:	ff9f800f 	.word	0xff9f800f
 8003ee4:	f9ff800f 	.word	0xf9ff800f

08003ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e042      	b.n	8003f80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fc fe27 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2224      	movs	r2, #36	; 0x24
 8003f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f82c 	bl	8003f88 <UART_SetConfig>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e022      	b.n	8003f80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fb1c 	bl	8004580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fba3 	bl	80046c4 <UART_CheckIdleState>
 8003f7e:	4603      	mov	r3, r0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b08c      	sub	sp, #48	; 0x30
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4baa      	ldr	r3, [pc, #680]	; (8004260 <UART_SetConfig+0x2d8>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a9f      	ldr	r2, [pc, #636]	; (8004264 <UART_SetConfig+0x2dc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ffe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004008:	430b      	orrs	r3, r1
 800400a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f023 010f 	bic.w	r1, r3, #15
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a90      	ldr	r2, [pc, #576]	; (8004268 <UART_SetConfig+0x2e0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d125      	bne.n	8004078 <UART_SetConfig+0xf0>
 800402c:	4b8f      	ldr	r3, [pc, #572]	; (800426c <UART_SetConfig+0x2e4>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b03      	cmp	r3, #3
 8004038:	d81a      	bhi.n	8004070 <UART_SetConfig+0xe8>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0xb8>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004051 	.word	0x08004051
 8004044:	08004061 	.word	0x08004061
 8004048:	08004059 	.word	0x08004059
 800404c:	08004069 	.word	0x08004069
 8004050:	2301      	movs	r3, #1
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e116      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004058:	2302      	movs	r3, #2
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405e:	e112      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004060:	2304      	movs	r3, #4
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004066:	e10e      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004068:	2308      	movs	r3, #8
 800406a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406e:	e10a      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004070:	2310      	movs	r3, #16
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004076:	e106      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a7c      	ldr	r2, [pc, #496]	; (8004270 <UART_SetConfig+0x2e8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d138      	bne.n	80040f4 <UART_SetConfig+0x16c>
 8004082:	4b7a      	ldr	r3, [pc, #488]	; (800426c <UART_SetConfig+0x2e4>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d82d      	bhi.n	80040ec <UART_SetConfig+0x164>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <UART_SetConfig+0x110>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040cd 	.word	0x080040cd
 800409c:	080040ed 	.word	0x080040ed
 80040a0:	080040ed 	.word	0x080040ed
 80040a4:	080040ed 	.word	0x080040ed
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040ed 	.word	0x080040ed
 80040b4:	080040ed 	.word	0x080040ed
 80040b8:	080040d5 	.word	0x080040d5
 80040bc:	080040ed 	.word	0x080040ed
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d2:	e0d8      	b.n	8004286 <UART_SetConfig+0x2fe>
 80040d4:	2302      	movs	r3, #2
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040da:	e0d4      	b.n	8004286 <UART_SetConfig+0x2fe>
 80040dc:	2304      	movs	r3, #4
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e2:	e0d0      	b.n	8004286 <UART_SetConfig+0x2fe>
 80040e4:	2308      	movs	r3, #8
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ea:	e0cc      	b.n	8004286 <UART_SetConfig+0x2fe>
 80040ec:	2310      	movs	r3, #16
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040f2:	e0c8      	b.n	8004286 <UART_SetConfig+0x2fe>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a5e      	ldr	r2, [pc, #376]	; (8004274 <UART_SetConfig+0x2ec>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d125      	bne.n	800414a <UART_SetConfig+0x1c2>
 80040fe:	4b5b      	ldr	r3, [pc, #364]	; (800426c <UART_SetConfig+0x2e4>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004108:	2b30      	cmp	r3, #48	; 0x30
 800410a:	d016      	beq.n	800413a <UART_SetConfig+0x1b2>
 800410c:	2b30      	cmp	r3, #48	; 0x30
 800410e:	d818      	bhi.n	8004142 <UART_SetConfig+0x1ba>
 8004110:	2b20      	cmp	r3, #32
 8004112:	d00a      	beq.n	800412a <UART_SetConfig+0x1a2>
 8004114:	2b20      	cmp	r3, #32
 8004116:	d814      	bhi.n	8004142 <UART_SetConfig+0x1ba>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <UART_SetConfig+0x19a>
 800411c:	2b10      	cmp	r3, #16
 800411e:	d008      	beq.n	8004132 <UART_SetConfig+0x1aa>
 8004120:	e00f      	b.n	8004142 <UART_SetConfig+0x1ba>
 8004122:	2300      	movs	r3, #0
 8004124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004128:	e0ad      	b.n	8004286 <UART_SetConfig+0x2fe>
 800412a:	2302      	movs	r3, #2
 800412c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004130:	e0a9      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004132:	2304      	movs	r3, #4
 8004134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004138:	e0a5      	b.n	8004286 <UART_SetConfig+0x2fe>
 800413a:	2308      	movs	r3, #8
 800413c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004140:	e0a1      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004142:	2310      	movs	r3, #16
 8004144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004148:	e09d      	b.n	8004286 <UART_SetConfig+0x2fe>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a4a      	ldr	r2, [pc, #296]	; (8004278 <UART_SetConfig+0x2f0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d125      	bne.n	80041a0 <UART_SetConfig+0x218>
 8004154:	4b45      	ldr	r3, [pc, #276]	; (800426c <UART_SetConfig+0x2e4>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800415e:	2bc0      	cmp	r3, #192	; 0xc0
 8004160:	d016      	beq.n	8004190 <UART_SetConfig+0x208>
 8004162:	2bc0      	cmp	r3, #192	; 0xc0
 8004164:	d818      	bhi.n	8004198 <UART_SetConfig+0x210>
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d00a      	beq.n	8004180 <UART_SetConfig+0x1f8>
 800416a:	2b80      	cmp	r3, #128	; 0x80
 800416c:	d814      	bhi.n	8004198 <UART_SetConfig+0x210>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <UART_SetConfig+0x1f0>
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d008      	beq.n	8004188 <UART_SetConfig+0x200>
 8004176:	e00f      	b.n	8004198 <UART_SetConfig+0x210>
 8004178:	2300      	movs	r3, #0
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417e:	e082      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004180:	2302      	movs	r3, #2
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004186:	e07e      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004188:	2304      	movs	r3, #4
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418e:	e07a      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004190:	2308      	movs	r3, #8
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004196:	e076      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004198:	2310      	movs	r3, #16
 800419a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419e:	e072      	b.n	8004286 <UART_SetConfig+0x2fe>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a35      	ldr	r2, [pc, #212]	; (800427c <UART_SetConfig+0x2f4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d12a      	bne.n	8004200 <UART_SetConfig+0x278>
 80041aa:	4b30      	ldr	r3, [pc, #192]	; (800426c <UART_SetConfig+0x2e4>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b8:	d01a      	beq.n	80041f0 <UART_SetConfig+0x268>
 80041ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041be:	d81b      	bhi.n	80041f8 <UART_SetConfig+0x270>
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d00c      	beq.n	80041e0 <UART_SetConfig+0x258>
 80041c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ca:	d815      	bhi.n	80041f8 <UART_SetConfig+0x270>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <UART_SetConfig+0x250>
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d008      	beq.n	80041e8 <UART_SetConfig+0x260>
 80041d6:	e00f      	b.n	80041f8 <UART_SetConfig+0x270>
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041de:	e052      	b.n	8004286 <UART_SetConfig+0x2fe>
 80041e0:	2302      	movs	r3, #2
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e6:	e04e      	b.n	8004286 <UART_SetConfig+0x2fe>
 80041e8:	2304      	movs	r3, #4
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ee:	e04a      	b.n	8004286 <UART_SetConfig+0x2fe>
 80041f0:	2308      	movs	r3, #8
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f6:	e046      	b.n	8004286 <UART_SetConfig+0x2fe>
 80041f8:	2310      	movs	r3, #16
 80041fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fe:	e042      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a17      	ldr	r2, [pc, #92]	; (8004264 <UART_SetConfig+0x2dc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d13a      	bne.n	8004280 <UART_SetConfig+0x2f8>
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <UART_SetConfig+0x2e4>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004218:	d01a      	beq.n	8004250 <UART_SetConfig+0x2c8>
 800421a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800421e:	d81b      	bhi.n	8004258 <UART_SetConfig+0x2d0>
 8004220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004224:	d00c      	beq.n	8004240 <UART_SetConfig+0x2b8>
 8004226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422a:	d815      	bhi.n	8004258 <UART_SetConfig+0x2d0>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <UART_SetConfig+0x2b0>
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d008      	beq.n	8004248 <UART_SetConfig+0x2c0>
 8004236:	e00f      	b.n	8004258 <UART_SetConfig+0x2d0>
 8004238:	2300      	movs	r3, #0
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423e:	e022      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004240:	2302      	movs	r3, #2
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004246:	e01e      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424e:	e01a      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004256:	e016      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425e:	e012      	b.n	8004286 <UART_SetConfig+0x2fe>
 8004260:	cfff69f3 	.word	0xcfff69f3
 8004264:	40008000 	.word	0x40008000
 8004268:	40013800 	.word	0x40013800
 800426c:	40021000 	.word	0x40021000
 8004270:	40004400 	.word	0x40004400
 8004274:	40004800 	.word	0x40004800
 8004278:	40004c00 	.word	0x40004c00
 800427c:	40005000 	.word	0x40005000
 8004280:	2310      	movs	r3, #16
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4aae      	ldr	r2, [pc, #696]	; (8004544 <UART_SetConfig+0x5bc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	f040 8097 	bne.w	80043c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004292:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004296:	2b08      	cmp	r3, #8
 8004298:	d823      	bhi.n	80042e2 <UART_SetConfig+0x35a>
 800429a:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0x318>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042e3 	.word	0x080042e3
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042e3 	.word	0x080042e3
 80042b0:	080042d3 	.word	0x080042d3
 80042b4:	080042e3 	.word	0x080042e3
 80042b8:	080042e3 	.word	0x080042e3
 80042bc:	080042e3 	.word	0x080042e3
 80042c0:	080042db 	.word	0x080042db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c4:	f7ff f80c 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 80042c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042ca:	e010      	b.n	80042ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b9e      	ldr	r3, [pc, #632]	; (8004548 <UART_SetConfig+0x5c0>)
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042d0:	e00d      	b.n	80042ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7fe ff6d 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042d8:	e009      	b.n	80042ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042e0:	e005      	b.n	80042ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8130 	beq.w	8004556 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	4a94      	ldr	r2, [pc, #592]	; (800454c <UART_SetConfig+0x5c4>)
 80042fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004300:	461a      	mov	r2, r3
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	fbb3 f3f2 	udiv	r3, r3, r2
 8004308:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	429a      	cmp	r2, r3
 8004318:	d305      	bcc.n	8004326 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	429a      	cmp	r2, r3
 8004324:	d903      	bls.n	800432e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800432c:	e113      	b.n	8004556 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	2200      	movs	r2, #0
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	60fa      	str	r2, [r7, #12]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	4a84      	ldr	r2, [pc, #528]	; (800454c <UART_SetConfig+0x5c4>)
 800433c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004340:	b29b      	uxth	r3, r3
 8004342:	2200      	movs	r2, #0
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800434c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004350:	f7fb ff54 	bl	80001fc <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4610      	mov	r0, r2
 800435a:	4619      	mov	r1, r3
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	020b      	lsls	r3, r1, #8
 8004366:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800436a:	0202      	lsls	r2, r0, #8
 800436c:	6979      	ldr	r1, [r7, #20]
 800436e:	6849      	ldr	r1, [r1, #4]
 8004370:	0849      	lsrs	r1, r1, #1
 8004372:	2000      	movs	r0, #0
 8004374:	460c      	mov	r4, r1
 8004376:	4605      	mov	r5, r0
 8004378:	eb12 0804 	adds.w	r8, r2, r4
 800437c:	eb43 0905 	adc.w	r9, r3, r5
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	469a      	mov	sl, r3
 8004388:	4693      	mov	fp, r2
 800438a:	4652      	mov	r2, sl
 800438c:	465b      	mov	r3, fp
 800438e:	4640      	mov	r0, r8
 8004390:	4649      	mov	r1, r9
 8004392:	f7fb ff33 	bl	80001fc <__aeabi_uldivmod>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4613      	mov	r3, r2
 800439c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a4:	d308      	bcc.n	80043b8 <UART_SetConfig+0x430>
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ac:	d204      	bcs.n	80043b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a3a      	ldr	r2, [r7, #32]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e0ce      	b.n	8004556 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043be:	e0ca      	b.n	8004556 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c8:	d166      	bne.n	8004498 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80043ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d827      	bhi.n	8004422 <UART_SetConfig+0x49a>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x450>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004423 	.word	0x08004423
 80043f8:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7fe ff70 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8004400:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004402:	e014      	b.n	800442e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7fe ff82 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8004408:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b4e      	ldr	r3, [pc, #312]	; (8004548 <UART_SetConfig+0x5c0>)
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004410:	e00d      	b.n	800442e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7fe fecd 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8004416:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004418:	e009      	b.n	800442e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004420:	e005      	b.n	800442e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800442c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8090 	beq.w	8004556 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	4a44      	ldr	r2, [pc, #272]	; (800454c <UART_SetConfig+0x5c4>)
 800443c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004440:	461a      	mov	r2, r3
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	fbb3 f3f2 	udiv	r3, r3, r2
 8004448:	005a      	lsls	r2, r3, #1
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	441a      	add	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	2b0f      	cmp	r3, #15
 8004460:	d916      	bls.n	8004490 <UART_SetConfig+0x508>
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d212      	bcs.n	8004490 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f023 030f 	bic.w	r3, r3, #15
 8004472:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	b29b      	uxth	r3, r3
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	b29a      	uxth	r2, r3
 8004480:	8bfb      	ldrh	r3, [r7, #30]
 8004482:	4313      	orrs	r3, r2
 8004484:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	8bfa      	ldrh	r2, [r7, #30]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	e062      	b.n	8004556 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004496:	e05e      	b.n	8004556 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800449c:	2b08      	cmp	r3, #8
 800449e:	d828      	bhi.n	80044f2 <UART_SetConfig+0x56a>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x520>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044d5 	.word	0x080044d5
 80044b0:	080044dd 	.word	0x080044dd
 80044b4:	080044f3 	.word	0x080044f3
 80044b8:	080044e3 	.word	0x080044e3
 80044bc:	080044f3 	.word	0x080044f3
 80044c0:	080044f3 	.word	0x080044f3
 80044c4:	080044f3 	.word	0x080044f3
 80044c8:	080044eb 	.word	0x080044eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe ff08 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 80044d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044d2:	e014      	b.n	80044fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7fe ff1a 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 80044d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044da:	e010      	b.n	80044fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <UART_SetConfig+0x5c0>)
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044e0:	e00d      	b.n	80044fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e2:	f7fe fe65 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044e8:	e009      	b.n	80044fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044f0:	e005      	b.n	80044fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044fc:	bf00      	nop
    }

    if (pclk != 0U)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d028      	beq.n	8004556 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	4a10      	ldr	r2, [pc, #64]	; (800454c <UART_SetConfig+0x5c4>)
 800450a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800450e:	461a      	mov	r2, r3
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	fbb3 f2f2 	udiv	r2, r3, r2
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	441a      	add	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	2b0f      	cmp	r3, #15
 800452c:	d910      	bls.n	8004550 <UART_SetConfig+0x5c8>
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004534:	d20c      	bcs.n	8004550 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	b29a      	uxth	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60da      	str	r2, [r3, #12]
 8004540:	e009      	b.n	8004556 <UART_SetConfig+0x5ce>
 8004542:	bf00      	nop
 8004544:	40008000 	.word	0x40008000
 8004548:	00f42400 	.word	0x00f42400
 800454c:	08005114 	.word	0x08005114
      }
      else
      {
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2201      	movs	r2, #1
 800455a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2201      	movs	r2, #1
 8004562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2200      	movs	r2, #0
 8004570:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004572:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004576:	4618      	mov	r0, r3
 8004578:	3730      	adds	r7, #48	; 0x30
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01a      	beq.n	8004696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467e:	d10a      	bne.n	8004696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046d4:	f7fc fc44 	bl	8000f60 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d10e      	bne.n	8004706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f82f 	bl	800475a <UART_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e025      	b.n	8004752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d10e      	bne.n	8004732 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f819 	bl	800475a <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e00f      	b.n	8004752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b09c      	sub	sp, #112	; 0x70
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	e0a9      	b.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	f000 80a5 	beq.w	80048c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fc fbf3 	bl	8000f60 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <UART_WaitOnFlagUntilTimeout+0x32>
 8004786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004788:	2b00      	cmp	r3, #0
 800478a:	d140      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800479a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047a0:	667b      	str	r3, [r7, #100]	; 0x64
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3308      	adds	r3, #8
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047de:	64ba      	str	r2, [r7, #72]	; 0x48
 80047e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e5      	bne.n	80047be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e069      	b.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d051      	beq.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	d149      	bne.n	80048c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004834:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800484a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
 8004856:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800485a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e6      	bne.n	8004836 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	613b      	str	r3, [r7, #16]
   return(result);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004888:	623a      	str	r2, [r7, #32]
 800488a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	69f9      	ldr	r1, [r7, #28]
 800488e:	6a3a      	ldr	r2, [r7, #32]
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	61bb      	str	r3, [r7, #24]
   return(result);
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e5      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e010      	b.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4013      	ands	r3, r2
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	429a      	cmp	r2, r3
 80048dc:	f43f af46 	beq.w	800476c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3770      	adds	r7, #112	; 0x70
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UARTEx_DisableFifoMode+0x16>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e027      	b.n	8004950 <HAL_UARTEx_DisableFifoMode+0x66>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2224      	movs	r2, #36	; 0x24
 800490c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800492e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004970:	2302      	movs	r3, #2
 8004972:	e02d      	b.n	80049d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	; 0x24
 8004980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f84f 	bl	8004a54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e02d      	b.n	8004a4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2224      	movs	r2, #36	; 0x24
 80049fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f811 	bl	8004a54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d108      	bne.n	8004a76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a74:	e031      	b.n	8004ada <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a76:	2308      	movs	r3, #8
 8004a78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	0e5b      	lsrs	r3, r3, #25
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	0f5b      	lsrs	r3, r3, #29
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a9e:	7bbb      	ldrb	r3, [r7, #14]
 8004aa0:	7b3a      	ldrb	r2, [r7, #12]
 8004aa2:	4911      	ldr	r1, [pc, #68]	; (8004ae8 <UARTEx_SetNbDataToProcess+0x94>)
 8004aa4:	5c8a      	ldrb	r2, [r1, r2]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004aaa:	7b3a      	ldrb	r2, [r7, #12]
 8004aac:	490f      	ldr	r1, [pc, #60]	; (8004aec <UARTEx_SetNbDataToProcess+0x98>)
 8004aae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	7b7a      	ldrb	r2, [r7, #13]
 8004ac0:	4909      	ldr	r1, [pc, #36]	; (8004ae8 <UARTEx_SetNbDataToProcess+0x94>)
 8004ac2:	5c8a      	ldrb	r2, [r1, r2]
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ac8:	7b7a      	ldrb	r2, [r7, #13]
 8004aca:	4908      	ldr	r1, [pc, #32]	; (8004aec <UARTEx_SetNbDataToProcess+0x98>)
 8004acc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ace:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	0800512c 	.word	0x0800512c
 8004aec:	08005134 	.word	0x08005134

08004af0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af0:	b084      	sub	sp, #16
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	f107 001c 	add.w	r0, r7, #28
 8004afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa70 	bl	8004ff4 <USB_CoreReset>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
 8004b2a:	e005      	b.n	8004b38 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b44:	b004      	add	sp, #16
 8004b46:	4770      	bx	lr

08004b48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 0201 	bic.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d115      	bne.n	8004bb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f7fc f9ed 	bl	8000f78 <HAL_Delay>
      ms++;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fa17 	bl	8004fd8 <USB_GetMode>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d01e      	beq.n	8004bee <USB_SetCurrentMode+0x84>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b31      	cmp	r3, #49	; 0x31
 8004bb4:	d9f0      	bls.n	8004b98 <USB_SetCurrentMode+0x2e>
 8004bb6:	e01a      	b.n	8004bee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d115      	bne.n	8004bea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bca:	2001      	movs	r0, #1
 8004bcc:	f7fc f9d4 	bl	8000f78 <HAL_Delay>
      ms++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9fe 	bl	8004fd8 <USB_GetMode>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <USB_SetCurrentMode+0x84>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b31      	cmp	r3, #49	; 0x31
 8004be6:	d9f0      	bls.n	8004bca <USB_SetCurrentMode+0x60>
 8004be8:	e001      	b.n	8004bee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e005      	b.n	8004bfa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b32      	cmp	r3, #50	; 0x32
 8004bf2:	d101      	bne.n	8004bf8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c04:	b084      	sub	sp, #16
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	e009      	b.n	8004c38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3340      	adds	r3, #64	; 0x40
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	2200      	movs	r2, #0
 8004c30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3301      	adds	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b0e      	cmp	r3, #14
 8004c3c:	d9f2      	bls.n	8004c24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d11c      	bne.n	8004c7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c52:	f043 0302 	orr.w	r3, r3, #2
 8004c56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e005      	b.n	8004c8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	680b      	ldr	r3, [r1, #0]
 8004ca8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004caa:	2103      	movs	r1, #3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f959 	bl	8004f64 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cb2:	2110      	movs	r1, #16
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f8f1 	bl	8004e9c <USB_FlushTxFifo>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f91d 	bl	8004f04 <USB_FlushRxFifo>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	e043      	b.n	8004d86 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d14:	d118      	bne.n	8004d48 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	e013      	b.n	8004d5a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e008      	b.n	8004d5a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	461a      	mov	r2, r3
 8004d56:	2300      	movs	r3, #0
 8004d58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	461a      	mov	r2, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	3301      	adds	r3, #1
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d3b7      	bcc.n	8004cfe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	e043      	b.n	8004e1c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004daa:	d118      	bne.n	8004dde <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e013      	b.n	8004df0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e008      	b.n	8004df0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	461a      	mov	r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2300      	movs	r3, #0
 8004e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d3b7      	bcc.n	8004d94 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f043 0210 	orr.w	r2, r3, #16
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <USB_DevInit+0x294>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f043 0208 	orr.w	r2, r3, #8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d107      	bne.n	8004e86 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e92:	b004      	add	sp, #16
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	803c3800 	.word	0x803c3800

08004e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <USB_FlushTxFifo+0x64>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e01b      	b.n	8004ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	daf2      	bge.n	8004eaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	019b      	lsls	r3, r3, #6
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <USB_FlushTxFifo+0x64>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e006      	b.n	8004ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d0f0      	beq.n	8004ed4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	00030d40 	.word	0x00030d40

08004f04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a11      	ldr	r2, [pc, #68]	; (8004f60 <USB_FlushRxFifo+0x5c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e018      	b.n	8004f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	daf2      	bge.n	8004f10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2210      	movs	r2, #16
 8004f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <USB_FlushRxFifo+0x5c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e006      	b.n	8004f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d0f0      	beq.n	8004f34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	00030d40 	.word	0x00030d40

08004f64 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fb0:	f023 0303 	bic.w	r3, r3, #3
 8004fb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc4:	f043 0302 	orr.w	r3, r3, #2
 8004fc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a13      	ldr	r2, [pc, #76]	; (8005058 <USB_CoreReset+0x64>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e01b      	b.n	800504a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	daf2      	bge.n	8005000 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a09      	ldr	r2, [pc, #36]	; (8005058 <USB_CoreReset+0x64>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d901      	bls.n	800503c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e006      	b.n	800504a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b01      	cmp	r3, #1
 8005046:	d0f0      	beq.n	800502a <USB_CoreReset+0x36>

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	00030d40 	.word	0x00030d40

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4d0d      	ldr	r5, [pc, #52]	; (8005094 <__libc_init_array+0x38>)
 8005060:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005062:	1b64      	subs	r4, r4, r5
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	2600      	movs	r6, #0
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	4d0b      	ldr	r5, [pc, #44]	; (800509c <__libc_init_array+0x40>)
 800506e:	4c0c      	ldr	r4, [pc, #48]	; (80050a0 <__libc_init_array+0x44>)
 8005070:	f000 f820 	bl	80050b4 <_init>
 8005074:	1b64      	subs	r4, r4, r5
 8005076:	10a4      	asrs	r4, r4, #2
 8005078:	2600      	movs	r6, #0
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f855 3b04 	ldr.w	r3, [r5], #4
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f855 3b04 	ldr.w	r3, [r5], #4
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	08005144 	.word	0x08005144
 8005098:	08005144 	.word	0x08005144
 800509c:	08005144 	.word	0x08005144
 80050a0:	08005148 	.word	0x08005148

080050a4 <memset>:
 80050a4:	4402      	add	r2, r0
 80050a6:	4603      	mov	r3, r0
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d100      	bne.n	80050ae <memset+0xa>
 80050ac:	4770      	bx	lr
 80050ae:	f803 1b01 	strb.w	r1, [r3], #1
 80050b2:	e7f9      	b.n	80050a8 <memset+0x4>

080050b4 <_init>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr

080050c0 <_fini>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr
