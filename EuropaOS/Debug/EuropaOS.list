
EuropaOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c24  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee4  08006ee4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eec  08006eec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08006f64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08006f64  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002954  00000000  00000000  0003714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00039aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d26a  00000000  00000000  0003bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b63  00000000  00000000  00069112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ac6e  00000000  00000000  0007fc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019a8e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a8  00000000  00000000  0019a934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006dcc 	.word	0x08006dcc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08006dcc 	.word	0x08006dcc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <start_va_sensors>:

#include "VASensors.h"

ADC_ChannelConfTypeDef sConfig = {0};

void start_va_sensors(ADC_HandleTypeDef* adc_handle, UART_HandleTypeDef* uart, uint32_t *buff){
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b09a      	sub	sp, #104	; 0x68
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	uint32_t vernier_values[3];

	char str[50] = "Vernier Sensor Collection Started\r\n";
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <start_va_sensors+0x8c>)
 80005b2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	682b      	ldr	r3, [r5, #0]
 80005c2:	6023      	str	r3, [r4, #0]
 80005c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	819a      	strh	r2, [r3, #12]
	char reading[20];
	print(uart, str, sizeof(str));
 80005d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d6:	2232      	movs	r2, #50	; 0x32
 80005d8:	4619      	mov	r1, r3
 80005da:	68b8      	ldr	r0, [r7, #8]
 80005dc:	f000 fcd6 	bl	8000f8c <print>

	// Select pH Channel
	adc_select_pH(adc_handle);
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f829 	bl	8000638 <adc_select_pH>

	//HAL_ADC_Start_DMA(adc_handle, buff, 1);

	while(1) {
		// Poll for a conversion
		HAL_ADC_Start(adc_handle);
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f001 f918 	bl	800181c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(adc_handle, 1000);
 80005ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f001 f9a9 	bl	8001948 <HAL_ADC_PollForConversion>
		buff[0] = HAL_ADC_GetValue(adc_handle);
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f001 fa35 	bl	8001a66 <HAL_ADC_GetValue>
 80005fc:	4602      	mov	r2, r0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(adc_handle);
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f001 f96d 	bl	80018e2 <HAL_ADC_Stop>

		sprintf(reading, "ADC VALUE: %ld\r\n", buff[0]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4908      	ldr	r1, [pc, #32]	; (8000634 <start_va_sensors+0x90>)
 8000612:	4618      	mov	r0, r3
 8000614:	f005 ff6c 	bl	80064f0 <siprintf>
		print(uart, reading, sizeof(reading));
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2214      	movs	r2, #20
 800061e:	4619      	mov	r1, r3
 8000620:	68b8      	ldr	r0, [r7, #8]
 8000622:	f000 fcb3 	bl	8000f8c <print>
		HAL_Delay(500);
 8000626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062a:	f000 fd5f 	bl	80010ec <HAL_Delay>
		HAL_ADC_Start(adc_handle);
 800062e:	e7da      	b.n	80005e6 <start_va_sensors+0x42>
 8000630:	08006df8 	.word	0x08006df8
 8000634:	08006de4 	.word	0x08006de4

08000638 <adc_select_pH>:
	}

}

void adc_select_pH(ADC_HandleTypeDef* adc_handle){
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	// Create the ADC channel configuration
	ADC_ChannelConfTypeDef sConfig = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]

	// Populate the configuration to select channel 3 (pH Sensor)
	sConfig.Channel = ADC_CHANNEL_4;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <adc_select_pH+0x44>)
 8000654:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000656:	2306      	movs	r3, #6
 8000658:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]

    // Configure the adc to select channel 3
    if (HAL_ADC_ConfigChannel(adc_handle, &sConfig) != HAL_OK){
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f001 fa0b 	bl	8001a80 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <adc_select_pH+0x3c>
    	Error_Handler();
 8000670:	f000 fab0 	bl	8000bd4 <Error_Handler>
    }
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	10c00010 	.word	0x10c00010

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fcbc 	bl	8001002 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f827 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f9d7 	bl	8000a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000692:	f000 f9ab 	bl	80009ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000696:	f000 f873 	bl	8000780 <MX_ADC1_Init>
  MX_TIM3_Init();
 800069a:	f000 f92f 	bl	80008fc <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 800069e:	f000 f8d5 	bl	800084c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  start_va_sensors(&hadc1, &hlpuart1, adc_buff);
 80006a2:	463b      	mov	r3, r7
 80006a4:	461a      	mov	r2, r3
 80006a6:	490a      	ldr	r1, [pc, #40]	; (80006d0 <main+0x50>)
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <main+0x54>)
 80006aa:	f7ff ff7b 	bl	80005a4 <start_va_sensors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sprintf(tx, "ADC VALUE: %ld\r\n", adc_buff[0]);
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4909      	ldr	r1, [pc, #36]	; (80006d8 <main+0x58>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 ff1b 	bl	80064f0 <siprintf>
	print(&hlpuart1, tx, sizeof(tx));
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2214      	movs	r2, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <main+0x50>)
 80006c2:	f000 fc63 	bl	8000f8c <print>
	HAL_Delay(500);
 80006c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ca:	f000 fd0f 	bl	80010ec <HAL_Delay>
	sprintf(tx, "ADC VALUE: %ld\r\n", adc_buff[0]);
 80006ce:	e7ee      	b.n	80006ae <main+0x2e>
 80006d0:	20000154 	.word	0x20000154
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	08006e2c 	.word	0x08006e2c

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b096      	sub	sp, #88	; 0x58
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2244      	movs	r2, #68	; 0x44
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fef8 	bl	80064e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006fe:	2000      	movs	r0, #0
 8000700:	f002 fbf2 	bl	8002ee8 <HAL_PWREx_ControlVoltageScaling>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800070a:	f000 fa63 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2340      	movs	r3, #64	; 0x40
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000728:	231e      	movs	r3, #30
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fc87 	bl	8003050 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000748:	f000 fa44 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2303      	movs	r3, #3
 8000752:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f003 f88c 	bl	8003884 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000772:	f000 fa2f 	bl	8000bd4 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3758      	adds	r7, #88	; 0x58
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_ADC1_Init+0xbc>)
 8000798:	4a29      	ldr	r2, [pc, #164]	; (8000840 <MX_ADC1_Init+0xc0>)
 800079a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC1_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_ADC1_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC1_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_ADC1_Init+0xbc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_ADC1_Init+0xbc>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC1_Init+0xbc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_ADC1_Init+0xbc>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC1_Init+0xbc>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC1_Init+0xbc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_ADC1_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_ADC1_Init+0xbc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_ADC1_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_ADC1_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_ADC1_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f6:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_ADC1_Init+0xbc>)
 80007f8:	f000 fec4 	bl	8001584 <HAL_ADC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000802:	f000 f9e7 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_ADC1_Init+0xc4>)
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080a:	2306      	movs	r3, #6
 800080c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_ADC1_Init+0xc8>)
 8000814:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000816:	2304      	movs	r3, #4
 8000818:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_ADC1_Init+0xbc>)
 8000824:	f001 f92c 	bl	8001a80 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800082e:	f000 f9d1 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000008c 	.word	0x2000008c
 8000840:	50040000 	.word	0x50040000
 8000844:	10c00010 	.word	0x10c00010
 8000848:	407f0000 	.word	0x407f0000

0800084c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <MX_LPUART1_UART_Init+0xa8>)
 8000854:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 8000858:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <MX_LPUART1_UART_Init+0xac>)
 800085a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 8000870:	220c      	movs	r2, #12
 8000872:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000892:	4817      	ldr	r0, [pc, #92]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 8000894:	f004 ff5e 	bl	8005754 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800089e:	f000 f999 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 80008a6:	f005 fd27 	bl	80062f8 <HAL_UARTEx_SetTxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008b0:	f000 f990 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 80008b8:	f005 fd5c 	bl	8006374 <HAL_UARTEx_SetRxFifoThreshold>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008c2:	f000 f987 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 80008c8:	f005 fcdd 	bl	8006286 <HAL_UARTEx_DisableFifoMode>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008d2:	f000 f97f 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 80008d8:	f004 ff3c 	bl	8005754 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_LPUART1_UART_Init+0x9a>
	  Error_Handler();
 80008e2:	f000 f977 	bl	8000bd4 <Error_Handler>
  }
  HAL_UART_MspInit(&hlpuart1);
 80008e6:	4802      	ldr	r0, [pc, #8]	; (80008f0 <MX_LPUART1_UART_Init+0xa4>)
 80008e8:	f000 fa54 	bl	8000d94 <HAL_UART_MspInit>
  /* USER CODE END LPUART1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000154 	.word	0x20000154
 80008f4:	40008000 	.word	0x40008000
 80008f8:	00033324 	.word	0x00033324

080008fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08e      	sub	sp, #56	; 0x38
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_TIM3_Init+0xe8>)
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <MX_TIM3_Init+0xec>)
 8000932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11999;
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <MX_TIM3_Init+0xe8>)
 8000936:	f642 62df 	movw	r2, #11999	; 0x2edf
 800093a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <MX_TIM3_Init+0xe8>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <MX_TIM3_Init+0xe8>)
 8000944:	f241 3288 	movw	r2, #5000	; 0x1388
 8000948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_TIM3_Init+0xe8>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_TIM3_Init+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000956:	4823      	ldr	r0, [pc, #140]	; (80009e4 <MX_TIM3_Init+0xe8>)
 8000958:	f003 ff6a 	bl	8004830 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000962:	f000 f937 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000970:	4619      	mov	r1, r3
 8000972:	481c      	ldr	r0, [pc, #112]	; (80009e4 <MX_TIM3_Init+0xe8>)
 8000974:	f004 f992 	bl	8004c9c <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800097e:	f000 f929 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000982:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_TIM3_Init+0xe8>)
 8000984:	f004 f814 	bl	80049b0 <HAL_TIM_PWM_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800098e:	f000 f921 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4810      	ldr	r0, [pc, #64]	; (80009e4 <MX_TIM3_Init+0xe8>)
 80009a2:	f004 fe4f 	bl	8005644 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80009ac:	f000 f912 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b0:	2360      	movs	r3, #96	; 0x60
 80009b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM3_Init+0xe8>)
 80009c8:	f004 f854 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80009d2:	f000 f8ff 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM3_Init+0xe8>)
 80009d8:	f003 ff82 	bl	80048e0 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3738      	adds	r7, #56	; 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200001e4 	.word	0x200001e4
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_DMA_Init+0x50>)
 80009f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009f6:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <MX_DMA_Init+0x50>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6493      	str	r3, [r2, #72]	; 0x48
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_DMA_Init+0x50>)
 8000a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_DMA_Init+0x50>)
 8000a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <MX_DMA_Init+0x50>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6493      	str	r3, [r2, #72]	; 0x48
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_DMA_Init+0x50>)
 8000a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	200b      	movs	r0, #11
 8000a28:	f001 fea3 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a2c:	200b      	movs	r0, #11
 8000a2e:	f001 febc 	bl	80027aa <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b5a      	ldr	r3, [pc, #360]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a59      	ldr	r2, [pc, #356]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	4b54      	ldr	r3, [pc, #336]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a53      	ldr	r2, [pc, #332]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a4d      	ldr	r2, [pc, #308]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a41      	ldr	r2, [pc, #260]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ace:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a3b      	ldr	r2, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <MX_GPIO_Init+0x180>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ae6:	f002 faa3 	bl	8003030 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000af0:	4834      	ldr	r0, [pc, #208]	; (8000bc4 <MX_GPIO_Init+0x184>)
 8000af2:	f002 f9c1 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_SEL0_Pin|USB_PowerSwitchOn_Pin|MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2170      	movs	r1, #112	; 0x70
 8000afa:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0x188>)
 8000afc:	f002 f9bc 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	482d      	ldr	r0, [pc, #180]	; (8000bcc <MX_GPIO_Init+0x18c>)
 8000b18:	f002 f81c 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b1c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4823      	ldr	r0, [pc, #140]	; (8000bc4 <MX_GPIO_Init+0x184>)
 8000b36:	f002 f80d 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	481e      	ldr	r0, [pc, #120]	; (8000bd0 <MX_GPIO_Init+0x190>)
 8000b58:	f001 fffc 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin USB_PowerSwitchOn_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|USB_PowerSwitchOn_Pin|MUX_SEL1_Pin;
 8000b5c:	2370      	movs	r3, #112	; 0x70
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <MX_GPIO_Init+0x188>)
 8000b74:	f001 ffee 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f001 ffdc 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f001 ffce 	bl	8002b54 <HAL_GPIO_Init>

}
 8000bb8:	bf00      	nop
 8000bba:	3730      	adds	r7, #48	; 0x30
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48001800 	.word	0x48001800
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000c00 	.word	0x48000c00

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0b0      	sub	sp, #192	; 0xc0
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	2294      	movs	r2, #148	; 0x94
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f005 fc49 	bl	80064e0 <memset>
  if(hadc->Instance==ADC1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a4b      	ldr	r2, [pc, #300]	; (8000d80 <HAL_ADC_MspInit+0x158>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	f040 808e 	bne.w	8000d76 <HAL_ADC_MspInit+0x14e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000c70:	230c      	movs	r3, #12
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 f8b8 	bl	8003e00 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000c96:	f7ff ff9d 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000ca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a33      	ldr	r2, [pc, #204]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_ADC_MspInit+0x15c>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4823      	ldr	r0, [pc, #140]	; (8000d88 <HAL_ADC_MspInit+0x160>)
 8000cfc:	f001 ff2a 	bl	8002b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d06:	230b      	movs	r3, #11
 8000d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1c:	f001 ff1a 	bl	8002b54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d22:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_ADC_MspInit+0x168>)
 8000d24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d28:	2205      	movs	r2, #5
 8000d2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d50:	2220      	movs	r2, #32
 8000d52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d5c:	f001 fd40 	bl	80027e0 <HAL_DMA_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_ADC_MspInit+0x142>
    {
      Error_Handler();
 8000d66:	f7ff ff35 	bl	8000bd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_ADC_MspInit+0x164>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	37c0      	adds	r7, #192	; 0xc0
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	50040000 	.word	0x50040000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000800 	.word	0x48000800
 8000d8c:	200000f4 	.word	0x200000f4
 8000d90:	40020008 	.word	0x40020008

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ae      	sub	sp, #184	; 0xb8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2294      	movs	r2, #148	; 0x94
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 fb93 	bl	80064e0 <memset>
  if(huart->Instance==LPUART1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <HAL_UART_MspInit+0xb4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d13d      	bne.n	8000e40 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 f815 	bl	8003e00 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ddc:	f7ff fefa 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_UART_MspInit+0xb8>)
 8000de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_UART_MspInit+0xb8>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0xb8>)
 8000dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0xb8>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <HAL_UART_MspInit+0xb8>)
 8000dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0xb8>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e10:	f002 f90e 	bl	8003030 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|GPIO_PIN_8;
 8000e14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_UART_MspInit+0xbc>)
 8000e3c:	f001 fe8a 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	37b8      	adds	r7, #184	; 0xb8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40008000 	.word	0x40008000
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48001800 	.word	0x48001800

08000e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_TIM_Base_MspInit+0x38>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10b      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40021000 	.word	0x40021000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f8e4 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DMA1_Channel1_IRQHandler+0x10>)
 8000eee:	f001 fd1f 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000f4 	.word	0x200000f4

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f005 faae 	bl	800648c <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200a0000 	.word	0x200a0000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	20000230 	.word	0x20000230
 8000f64:	20000248 	.word	0x20000248

08000f68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <print>:
 *      Author: Liam Sullivan
 */

#include "uart.h"

void print(UART_HandleTypeDef *uart, char *msg, int size) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, (uint8_t *)msg, size, transmit_timeout);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f004 fc27 	bl	80057f4 <HAL_UART_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb4:	f7ff ffd8 	bl	8000f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	; (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f005 fa5b 	bl	8006498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe2:	f7ff fb4d 	bl	8000680 <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff4:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8000ff8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ffc:	20000248 	.word	0x20000248

08001000 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_IRQHandler>

08001002 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f001 fba5 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f80e 	bl	8001034 <HAL_InitTick>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	e001      	b.n	8001028 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001024:	f7ff fddc 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_InitTick+0x6c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d023      	beq.n	8001090 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_InitTick+0x70>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_InitTick+0x6c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fbb1 	bl	80027c6 <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10f      	bne.n	800108a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d809      	bhi.n	8001084 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f001 fb7b 	bl	8002772 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_InitTick+0x74>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e007      	b.n	8001094 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e004      	b.n	8001094 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e001      	b.n	8001094 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000234 	.word	0x20000234

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000234 	.word	0x20000234

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	609a      	str	r2, [r3, #8]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3360      	adds	r3, #96	; 0x60
 80011ae:	461a      	mov	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <LL_ADC_SetOffset+0x44>)
 80011be:	4013      	ands	r3, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	4313      	orrs	r3, r2
 80011cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	03fff000 	.word	0x03fff000

080011e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3360      	adds	r3, #96	; 0x60
 80011f2:	461a      	mov	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3360      	adds	r3, #96	; 0x60
 8001220:	461a      	mov	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	431a      	orrs	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800123a:	bf00      	nop
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	615a      	str	r2, [r3, #20]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001292:	b480      	push	{r7}
 8001294:	b087      	sub	sp, #28
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3330      	adds	r3, #48	; 0x30
 80012a2:	461a      	mov	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	4413      	add	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	211f      	movs	r1, #31
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0e9b      	lsrs	r3, r3, #26
 80012ca:	f003 011f 	and.w	r1, r3, #31
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	431a      	orrs	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012de:	bf00      	nop
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b087      	sub	sp, #28
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3314      	adds	r3, #20
 80012fa:	461a      	mov	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	0e5b      	lsrs	r3, r3, #25
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	4413      	add	r3, r2
 8001308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	0d1b      	lsrs	r3, r3, #20
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	2107      	movs	r1, #7
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	401a      	ands	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	0d1b      	lsrs	r3, r3, #20
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	431a      	orrs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0318 	and.w	r3, r3, #24
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001364:	40d9      	lsrs	r1, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	400b      	ands	r3, r1
 800136a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136e:	431a      	orrs	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	0007ffff 	.word	0x0007ffff

08001388 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6093      	str	r3, [r2, #8]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013c0:	d101      	bne.n	80013c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001410:	d101      	bne.n	8001416 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001438:	f043 0201 	orr.w	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800145c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001460:	f043 0202 	orr.w	r2, r3, #2
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <LL_ADC_IsEnabled+0x18>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <LL_ADC_IsEnabled+0x1a>
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d101      	bne.n	80014b2 <LL_ADC_IsDisableOngoing+0x18>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <LL_ADC_IsDisableOngoing+0x1a>
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d4:	f043 0204 	orr.w	r2, r3, #4
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014fc:	f043 0210 	orr.w	r2, r3, #16
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d101      	bne.n	8001528 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001546:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800154a:	f043 0220 	orr.w	r2, r3, #32
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b08      	cmp	r3, #8
 8001570:	d101      	bne.n	8001576 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e12f      	b.n	80017fe <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fb3b 	bl	8000c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fef1 	bl	80013ac <LL_ADC_IsDeepPowerDownEnabled>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fed7 	bl	8001388 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff0c 	bl	80013fc <LL_ADC_IsInternalRegulatorEnabled>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d115      	bne.n	8001616 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fef0 	bl	80013d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015f4:	4b84      	ldr	r3, [pc, #528]	; (8001808 <HAL_ADC_Init+0x284>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	4a84      	ldr	r2, [pc, #528]	; (800180c <HAL_ADC_Init+0x288>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	3301      	adds	r3, #1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001608:	e002      	b.n	8001610 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f9      	bne.n	800160a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff feee 	bl	80013fc <LL_ADC_IsInternalRegulatorEnabled>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10d      	bne.n	8001642 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff62 	bl	8001510 <LL_ADC_REG_IsConversionOngoing>
 800164c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 80c8 	bne.w	80017ec <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80c4 	bne.w	80017ec <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800166c:	f043 0202 	orr.w	r2, r3, #2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fefb 	bl	8001474 <LL_ADC_IsEnabled>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10b      	bne.n	800169c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001684:	4862      	ldr	r0, [pc, #392]	; (8001810 <HAL_ADC_Init+0x28c>)
 8001686:	f7ff fef5 	bl	8001474 <LL_ADC_IsEnabled>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4619      	mov	r1, r3
 8001696:	485f      	ldr	r0, [pc, #380]	; (8001814 <HAL_ADC_Init+0x290>)
 8001698:	f7ff fd4c 	bl	8001134 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7e5b      	ldrb	r3, [r3, #25]
 80016a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	3b01      	subs	r3, #1
 80016d0:	045b      	lsls	r3, r3, #17
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_ADC_Init+0x294>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	430b      	orrs	r3, r1
 8001706:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff feff 	bl	8001510 <LL_ADC_REG_IsConversionOngoing>
 8001712:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff20 	bl	800155e <LL_ADC_INJ_IsConversionOngoing>
 800171e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d140      	bne.n	80017a8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d13d      	bne.n	80017a8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e1b      	ldrb	r3, [r3, #24]
 8001734:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001736:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800174e:	f023 0306 	bic.w	r3, r3, #6
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	430b      	orrs	r3, r1
 800175a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001762:	2b01      	cmp	r3, #1
 8001764:	d118      	bne.n	8001798 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800177c:	4311      	orrs	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001782:	4311      	orrs	r1, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001788:	430a      	orrs	r2, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	e007      	b.n	80017a8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d10c      	bne.n	80017ca <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f023 010f 	bic.w	r1, r3, #15
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
 80017c8:	e007      	b.n	80017da <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 020f 	bic.w	r2, r2, #15
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58
 80017ea:	e007      	b.n	80017fc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f043 0210 	orr.w	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000
 800180c:	053e2d63 	.word	0x053e2d63
 8001810:	50040000 	.word	0x50040000
 8001814:	50040300 	.word	0x50040300
 8001818:	fff0c007 	.word	0xfff0c007

0800181c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fe71 	bl	8001510 <LL_ADC_REG_IsConversionOngoing>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d14f      	bne.n	80018d4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_ADC_Start+0x26>
 800183e:	2302      	movs	r3, #2
 8001840:	e04b      	b.n	80018da <HAL_ADC_Start+0xbe>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fdd0 	bl	80023f0 <ADC_Enable>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d137      	bne.n	80018ca <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187a:	d106      	bne.n	800188a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	f023 0206 	bic.w	r2, r3, #6
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	65da      	str	r2, [r3, #92]	; 0x5c
 8001888:	e002      	b.n	8001890 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	221c      	movs	r2, #28
 8001896:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fdfc 	bl	80014c0 <LL_ADC_REG_StartConversion>
 80018c8:	e006      	b.n	80018d8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80018d2:	e001      	b.n	80018d8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018d4:	2302      	movs	r3, #2
 80018d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_Stop+0x16>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e023      	b.n	8001940 <HAL_ADC_Stop+0x5e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001900:	2103      	movs	r1, #3
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fcb8 	bl	8002278 <ADC_ConversionStop>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d111      	bne.n	8001936 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fdf2 	bl	80024fc <ADC_Disable>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	2b08      	cmp	r3, #8
 8001958:	d102      	bne.n	8001960 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800195a:	2308      	movs	r3, #8
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e010      	b.n	8001982 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	f043 0220 	orr.w	r2, r3, #32
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06f      	b.n	8001a5e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800197e:	2304      	movs	r3, #4
 8001980:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001982:	f7ff fba7 	bl	80010d4 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001988:	e021      	b.n	80019ce <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d01d      	beq.n	80019ce <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001992:	f7ff fb9f 	bl	80010d4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d302      	bcc.n	80019a8 <HAL_ADC_PollForConversion+0x60>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d112      	bne.n	80019ce <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10b      	bne.n	80019ce <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	f043 0204 	orr.w	r2, r3, #4
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e047      	b.n	8001a5e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0d6      	beq.n	800198a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fc3d 	bl	800126c <LL_ADC_REG_IsTriggerSourceSWStart>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01c      	beq.n	8001a32 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7e5b      	ldrb	r3, [r3, #25]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d118      	bne.n	8001a32 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d111      	bne.n	8001a32 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d104      	bne.n	8001a4a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2208      	movs	r2, #8
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e008      	b.n	8001a5c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	220c      	movs	r2, #12
 8001a5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0b6      	sub	sp, #216	; 0xd8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x22>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e3d5      	b.n	800224e <HAL_ADC_ConfigChannel+0x7ce>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fd2e 	bl	8001510 <LL_ADC_REG_IsConversionOngoing>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 83ba 	bne.w	8002230 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d824      	bhi.n	8001b0e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	3b02      	subs	r3, #2
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d81b      	bhi.n	8001b06 <HAL_ADC_ConfigChannel+0x86>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <HAL_ADC_ConfigChannel+0x54>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001aed 	.word	0x08001aed
 8001adc:	08001af5 	.word	0x08001af5
 8001ae0:	08001afd 	.word	0x08001afd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	605a      	str	r2, [r3, #4]
          break;
 8001aea:	e011      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2212      	movs	r2, #18
 8001af0:	605a      	str	r2, [r3, #4]
          break;
 8001af2:	e00d      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2218      	movs	r2, #24
 8001af8:	605a      	str	r2, [r3, #4]
          break;
 8001afa:	e009      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b02:	605a      	str	r2, [r3, #4]
          break;
 8001b04:	e004      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2206      	movs	r2, #6
 8001b0a:	605a      	str	r2, [r3, #4]
          break;
 8001b0c:	e000      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b0e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f7ff fbb8 	bl	8001292 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fcf2 	bl	8001510 <LL_ADC_REG_IsConversionOngoing>
 8001b2c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fd12 	bl	800155e <LL_ADC_INJ_IsConversionOngoing>
 8001b3a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 81c1 	bne.w	8001eca <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 81bc 	bne.w	8001eca <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b5a:	d10f      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff fbbf 	bl	80012ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fb66 	bl	8001246 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b7a:	e00e      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f7ff fbae 	bl	80012ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fb56 	bl	8001246 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d00a      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6919      	ldr	r1, [r3, #16]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bcc:	f7ff fae6 	bl	800119c <LL_ADC_SetOffset>
 8001bd0:	e17b      	b.n	8001eca <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fb03 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10a      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x17e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff faf8 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	0e9b      	lsrs	r3, r3, #26
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	e01e      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1bc>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff faed 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	e004      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1d4>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	e018      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x206>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	e004      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001c7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d106      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fabc 	bl	8001210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff faa0 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10a      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x244>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fa95 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	f003 021f 	and.w	r2, r3, #31
 8001cc2:	e01e      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x282>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fa8a 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	e004      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x29a>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0e9b      	lsrs	r3, r3, #26
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	e018      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x2cc>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	e004      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d106      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2200      	movs	r2, #0
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fa59 	bl	8001210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2102      	movs	r1, #2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fa3d 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10a      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x30a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fa32 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	0e9b      	lsrs	r3, r3, #26
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	e01e      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x348>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2102      	movs	r1, #2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fa27 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001db0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e004      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x360>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	e016      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x38e>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001df2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e004      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d106      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2200      	movs	r2, #0
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f9f8 	bl	8001210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2103      	movs	r1, #3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f9dc 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x3cc>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f9d1 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	f003 021f 	and.w	r2, r3, #31
 8001e4a:	e017      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x3fc>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2103      	movs	r1, #3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f9c6 	bl	80011e4 <LL_ADC_GetOffsetChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e66:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e003      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x414>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	e011      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x438>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d106      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f9a3 	bl	8001210 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fad0 	bl	8001474 <LL_ADC_IsEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 8140 	bne.w	800215c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f7ff fa29 	bl	8001340 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4a8f      	ldr	r2, [pc, #572]	; (8002130 <HAL_ADC_ConfigChannel+0x6b0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	f040 8131 	bne.w	800215c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10b      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x4a2>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	3301      	adds	r3, #1
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	bf94      	ite	ls
 8001f1a:	2301      	movls	r3, #1
 8001f1c:	2300      	movhi	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	e019      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x4d6>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f32:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	e003      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	bf94      	ite	ls
 8001f50:	2301      	movls	r3, #1
 8001f52:	2300      	movhi	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d079      	beq.n	800204e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x4f6>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	069b      	lsls	r3, r3, #26
 8001f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f74:	e015      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x522>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f86:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e003      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	069b      	lsls	r3, r3, #26
 8001f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x542>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0e9b      	lsrs	r3, r3, #26
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	e017      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x572>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e003      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	ea42 0103 	orr.w	r1, r2, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10a      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x598>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	3301      	adds	r3, #1
 800200a:	f003 021f 	and.w	r2, r3, #31
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	051b      	lsls	r3, r3, #20
 8002016:	e018      	b.n	800204a <HAL_ADC_ConfigChannel+0x5ca>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002030:	2320      	movs	r3, #32
 8002032:	e003      	b.n	800203c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f003 021f 	and.w	r2, r3, #31
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800204a:	430b      	orrs	r3, r1
 800204c:	e081      	b.n	8002152 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_ADC_ConfigChannel+0x5ea>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	3301      	adds	r3, #1
 8002062:	069b      	lsls	r3, r3, #26
 8002064:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002068:	e015      	b.n	8002096 <HAL_ADC_ConfigChannel+0x616>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e003      	b.n	800208e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	069b      	lsls	r3, r3, #26
 8002092:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x636>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0e9b      	lsrs	r3, r3, #26
 80020a8:	3301      	adds	r3, #1
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	e017      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x666>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	61fb      	str	r3, [r7, #28]
  return result;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80020ce:	2320      	movs	r3, #32
 80020d0:	e003      	b.n	80020da <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	ea42 0103 	orr.w	r1, r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10d      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x692>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	3301      	adds	r3, #1
 80020fe:	f003 021f 	and.w	r2, r3, #31
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	3b1e      	subs	r3, #30
 800210a:	051b      	lsls	r3, r3, #20
 800210c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002110:	e01e      	b.n	8002150 <HAL_ADC_ConfigChannel+0x6d0>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	613b      	str	r3, [r7, #16]
  return result;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d104      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e006      	b.n	800213c <HAL_ADC_ConfigChannel+0x6bc>
 800212e:	bf00      	nop
 8002130:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 021f 	and.w	r2, r3, #31
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	3b1e      	subs	r3, #30
 800214a:	051b      	lsls	r3, r3, #20
 800214c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002150:	430b      	orrs	r3, r1
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	4619      	mov	r1, r3
 8002158:	f7ff f8c7 	bl	80012ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_ADC_ConfigChannel+0x7d8>)
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d06c      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002168:	483c      	ldr	r0, [pc, #240]	; (800225c <HAL_ADC_ConfigChannel+0x7dc>)
 800216a:	f7ff f809 	bl	8001180 <LL_ADC_GetCommonPathInternalCh>
 800216e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a3a      	ldr	r2, [pc, #232]	; (8002260 <HAL_ADC_ConfigChannel+0x7e0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d127      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800217c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d121      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a35      	ldr	r2, [pc, #212]	; (8002264 <HAL_ADC_ConfigChannel+0x7e4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d157      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002196:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800219a:	4619      	mov	r1, r3
 800219c:	482f      	ldr	r0, [pc, #188]	; (800225c <HAL_ADC_ConfigChannel+0x7dc>)
 800219e:	f7fe ffdc 	bl	800115a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a2:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_ADC_ConfigChannel+0x7e8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	4a30      	ldr	r2, [pc, #192]	; (800226c <HAL_ADC_ConfigChannel+0x7ec>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021bc:	e002      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f9      	bne.n	80021be <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ca:	e03a      	b.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_ADC_ConfigChannel+0x7f0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d113      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x77e>
 80021d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <HAL_ADC_ConfigChannel+0x7e4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d12a      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f4:	4619      	mov	r1, r3
 80021f6:	4819      	ldr	r0, [pc, #100]	; (800225c <HAL_ADC_ConfigChannel+0x7dc>)
 80021f8:	f7fe ffaf 	bl	800115a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021fc:	e021      	b.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_ADC_ConfigChannel+0x7f4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d11c      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800220c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d116      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_ADC_ConfigChannel+0x7e4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d111      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002226:	4619      	mov	r1, r3
 8002228:	480c      	ldr	r0, [pc, #48]	; (800225c <HAL_ADC_ConfigChannel+0x7dc>)
 800222a:	f7fe ff96 	bl	800115a <LL_ADC_SetCommonPathInternalCh>
 800222e:	e008      	b.n	8002242 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800224a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800224e:	4618      	mov	r0, r3
 8002250:	37d8      	adds	r7, #216	; 0xd8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	80080000 	.word	0x80080000
 800225c:	50040300 	.word	0x50040300
 8002260:	c7520000 	.word	0xc7520000
 8002264:	50040000 	.word	0x50040000
 8002268:	20000000 	.word	0x20000000
 800226c:	053e2d63 	.word	0x053e2d63
 8002270:	cb840000 	.word	0xcb840000
 8002274:	80000001 	.word	0x80000001

08002278 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff f93e 	bl	8001510 <LL_ADC_REG_IsConversionOngoing>
 8002294:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f95f 	bl	800155e <LL_ADC_INJ_IsConversionOngoing>
 80022a0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8098 	beq.w	80023e0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d02a      	beq.n	8002314 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7e5b      	ldrb	r3, [r3, #25]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d126      	bne.n	8002314 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7e1b      	ldrb	r3, [r3, #24]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d122      	bne.n	8002314 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022d2:	e014      	b.n	80022fe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4a45      	ldr	r2, [pc, #276]	; (80023ec <ADC_ConversionStop+0x174>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d90d      	bls.n	80022f8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	f043 0210 	orr.w	r2, r3, #16
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e074      	b.n	80023e2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3301      	adds	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	2b40      	cmp	r3, #64	; 0x40
 800230a:	d1e3      	bne.n	80022d4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2240      	movs	r2, #64	; 0x40
 8002312:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d014      	beq.n	8002344 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f8f6 	bl	8001510 <LL_ADC_REG_IsConversionOngoing>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00c      	beq.n	8002344 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f8b3 	bl	800149a <LL_ADC_IsDisableOngoing>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f8d2 	bl	80014e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d014      	beq.n	8002374 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f905 	bl	800155e <LL_ADC_INJ_IsConversionOngoing>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f89b 	bl	800149a <LL_ADC_IsDisableOngoing>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f8e1 	bl	8001536 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d005      	beq.n	8002386 <ADC_ConversionStop+0x10e>
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d105      	bne.n	800238c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002380:	230c      	movs	r3, #12
 8002382:	617b      	str	r3, [r7, #20]
        break;
 8002384:	e005      	b.n	8002392 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002386:	2308      	movs	r3, #8
 8002388:	617b      	str	r3, [r7, #20]
        break;
 800238a:	e002      	b.n	8002392 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800238c:	2304      	movs	r3, #4
 800238e:	617b      	str	r3, [r7, #20]
        break;
 8002390:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002392:	f7fe fe9f 	bl	80010d4 <HAL_GetTick>
 8002396:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002398:	e01b      	b.n	80023d2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800239a:	f7fe fe9b 	bl	80010d4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d914      	bls.n	80023d2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e007      	b.n	80023e2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1dc      	bne.n	800239a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	a33fffff 	.word	0xa33fffff

080023f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f837 	bl	8001474 <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d169      	bne.n	80024e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b36      	ldr	r3, [pc, #216]	; (80024ec <ADC_Enable+0xfc>)
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e055      	b.n	80024e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fff2 	bl	8001424 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002440:	482b      	ldr	r0, [pc, #172]	; (80024f0 <ADC_Enable+0x100>)
 8002442:	f7fe fe9d 	bl	8001180 <LL_ADC_GetCommonPathInternalCh>
 8002446:	4603      	mov	r3, r0
 8002448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <ADC_Enable+0x104>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <ADC_Enable+0x108>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800246a:	e002      	b.n	8002472 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	3b01      	subs	r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f9      	bne.n	800246c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002478:	f7fe fe2c 	bl	80010d4 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800247e:	e028      	b.n	80024d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fff5 	bl	8001474 <LL_ADC_IsEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe ffc5 	bl	8001424 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800249a:	f7fe fe1b 	bl	80010d4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d914      	bls.n	80024d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d00d      	beq.n	80024d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d1cf      	bne.n	8002480 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	8000003f 	.word	0x8000003f
 80024f0:	50040300 	.word	0x50040300
 80024f4:	20000000 	.word	0x20000000
 80024f8:	053e2d63 	.word	0x053e2d63

080024fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe ffc6 	bl	800149a <LL_ADC_IsDisableOngoing>
 800250e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe ffad 	bl	8001474 <LL_ADC_IsEnabled>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d047      	beq.n	80025b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d144      	bne.n	80025b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030d 	and.w	r3, r3, #13
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10c      	bne.n	800254e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe ff87 	bl	800144c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2203      	movs	r2, #3
 8002544:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002546:	f7fe fdc5 	bl	80010d4 <HAL_GetTick>
 800254a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800254c:	e029      	b.n	80025a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f043 0210 	orr.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e023      	b.n	80025b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800256a:	f7fe fdb3 	bl	80010d4 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d914      	bls.n	80025a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e007      	b.n	80025b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1dc      	bne.n	800256a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	; (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db0a      	blt.n	8002686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <__NVIC_SetPriority+0x4c>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	440b      	add	r3, r1
 8002680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002684:	e00a      	b.n	800269c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4908      	ldr	r1, [pc, #32]	; (80026ac <__NVIC_SetPriority+0x50>)
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	3b04      	subs	r3, #4
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	440b      	add	r3, r1
 800269a:	761a      	strb	r2, [r3, #24]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f1c3 0307 	rsb	r3, r3, #7
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf28      	it	cs
 80026ce:	2304      	movcs	r3, #4
 80026d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <NVIC_EncodePriority+0x30>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3b03      	subs	r3, #3
 80026de:	e000      	b.n	80026e2 <NVIC_EncodePriority+0x32>
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43d9      	mvns	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	4313      	orrs	r3, r2
         );
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f7ff ff8e 	bl	800265c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff29 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff3e 	bl	8002604 <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff8e 	bl	80026b0 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5d 	bl	800265c <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff31 	bl	8002620 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e08d      	b.n	800290e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_DMA_Init+0x138>)
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d80f      	bhi.n	800281e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4b45      	ldr	r3, [pc, #276]	; (800291c <HAL_DMA_Init+0x13c>)
 8002806:	4413      	add	r3, r2
 8002808:	4a45      	ldr	r2, [pc, #276]	; (8002920 <HAL_DMA_Init+0x140>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	009a      	lsls	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a42      	ldr	r2, [pc, #264]	; (8002924 <HAL_DMA_Init+0x144>)
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
 800281c:	e00e      	b.n	800283c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_DMA_Init+0x148>)
 8002826:	4413      	add	r3, r2
 8002828:	4a3d      	ldr	r2, [pc, #244]	; (8002920 <HAL_DMA_Init+0x140>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a3c      	ldr	r2, [pc, #240]	; (800292c <HAL_DMA_Init+0x14c>)
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8fe 	bl	8002a90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800289c:	d102      	bne.n	80028a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028b8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_DMA_Init+0x104>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d80c      	bhi.n	80028e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f91e 	bl	8002b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	e008      	b.n	80028f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40020407 	.word	0x40020407
 800291c:	bffdfff8 	.word	0xbffdfff8
 8002920:	cccccccd 	.word	0xcccccccd
 8002924:	40020000 	.word	0x40020000
 8002928:	bffdfbf8 	.word	0xbffdfbf8
 800292c:	40020400 	.word	0x40020400

08002930 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f003 031c 	and.w	r3, r3, #28
 8002950:	2204      	movs	r2, #4
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d026      	beq.n	80029aa <HAL_DMA_IRQHandler+0x7a>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d021      	beq.n	80029aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d107      	bne.n	8002984 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0204 	bic.w	r2, r2, #4
 8002982:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f003 021c 	and.w	r2, r3, #28
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2104      	movs	r1, #4
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	2b00      	cmp	r3, #0
 800299e:	d071      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80029a8:	e06c      	b.n	8002a84 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f003 031c 	and.w	r3, r3, #28
 80029b2:	2202      	movs	r2, #2
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d02e      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xec>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d029      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 020a 	bic.w	r2, r2, #10
 80029e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f003 021c 	and.w	r2, r3, #28
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2102      	movs	r1, #2
 80029fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002a00:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d038      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a1a:	e033      	b.n	8002a84 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f003 031c 	and.w	r3, r3, #28
 8002a24:	2208      	movs	r2, #8
 8002a26:	409a      	lsls	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02a      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d025      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 020e 	bic.w	r2, r2, #14
 8002a48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 021c 	and.w	r2, r3, #28
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
}
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d80a      	bhi.n	8002aba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ab0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6493      	str	r3, [r2, #72]	; 0x48
 8002ab8:	e007      	b.n	8002aca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	009a      	lsls	r2, r3, #2
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ac4:	4413      	add	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3b08      	subs	r3, #8
 8002ad2:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002ae0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40020407 	.word	0x40020407
 8002b00:	4002081c 	.word	0x4002081c
 8002b04:	cccccccd 	.word	0xcccccccd
 8002b08:	40020880 	.word	0x40020880

08002b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2201      	movs	r2, #1
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	1000823f 	.word	0x1000823f
 8002b50:	40020940 	.word	0x40020940

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b62:	e166      	b.n	8002e32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8158 	beq.w	8002e2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d005      	beq.n	8002b94 <HAL_GPIO_Init+0x40>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d130      	bne.n	8002bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bca:	2201      	movs	r2, #1
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 0201 	and.w	r2, r3, #1
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d017      	beq.n	8002c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d123      	bne.n	8002c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	6939      	ldr	r1, [r7, #16]
 8002c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0203 	and.w	r2, r3, #3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80b2 	beq.w	8002e2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_GPIO_Init+0x2fc>)
 8002cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ccc:	4a60      	ldr	r2, [pc, #384]	; (8002e50 <HAL_GPIO_Init+0x2fc>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <HAL_GPIO_Init+0x2fc>)
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ce0:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <HAL_GPIO_Init+0x300>)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d0a:	d02b      	beq.n	8002d64 <HAL_GPIO_Init+0x210>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d025      	beq.n	8002d60 <HAL_GPIO_Init+0x20c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a51      	ldr	r2, [pc, #324]	; (8002e5c <HAL_GPIO_Init+0x308>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01f      	beq.n	8002d5c <HAL_GPIO_Init+0x208>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <HAL_GPIO_Init+0x30c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d019      	beq.n	8002d58 <HAL_GPIO_Init+0x204>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a4f      	ldr	r2, [pc, #316]	; (8002e64 <HAL_GPIO_Init+0x310>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_GPIO_Init+0x200>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a4e      	ldr	r2, [pc, #312]	; (8002e68 <HAL_GPIO_Init+0x314>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00d      	beq.n	8002d50 <HAL_GPIO_Init+0x1fc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a4d      	ldr	r2, [pc, #308]	; (8002e6c <HAL_GPIO_Init+0x318>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d007      	beq.n	8002d4c <HAL_GPIO_Init+0x1f8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <HAL_GPIO_Init+0x31c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_GPIO_Init+0x1f4>
 8002d44:	2307      	movs	r3, #7
 8002d46:	e00e      	b.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d48:	2308      	movs	r3, #8
 8002d4a:	e00c      	b.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d4c:	2306      	movs	r3, #6
 8002d4e:	e00a      	b.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d50:	2305      	movs	r3, #5
 8002d52:	e008      	b.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d54:	2304      	movs	r3, #4
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d64:	2300      	movs	r3, #0
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d76:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_GPIO_Init+0x300>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_GPIO_Init+0x320>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002da8:	4a32      	ldr	r2, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x320>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_GPIO_Init+0x320>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dd2:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_GPIO_Init+0x320>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dd8:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <HAL_GPIO_Init+0x320>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x320>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_GPIO_Init+0x320>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <HAL_GPIO_Init+0x320>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f47f ae91 	bne.w	8002b64 <HAL_GPIO_Init+0x10>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000
 8002e58:	48000400 	.word	0x48000400
 8002e5c:	48000800 	.word	0x48000800
 8002e60:	48000c00 	.word	0x48000c00
 8002e64:	48001000 	.word	0x48001000
 8002e68:	48001400 	.word	0x48001400
 8002e6c:	48001800 	.word	0x48001800
 8002e70:	48001c00 	.word	0x48001c00
 8002e74:	40010400 	.word	0x40010400

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e94:	e002      	b.n	8002e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eac:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb8:	d102      	bne.n	8002ec0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ebe:	e00b      	b.n	8002ed8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ece:	d102      	bne.n	8002ed6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed4:	e000      	b.n	8002ed8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002ed6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d141      	bne.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ef6:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f02:	d131      	bne.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f04:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0a:	4a46      	ldr	r2, [pc, #280]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f1c:	4a41      	ldr	r2, [pc, #260]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f24:	4b40      	ldr	r3, [pc, #256]	; (8003028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2232      	movs	r2, #50	; 0x32
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	4a3f      	ldr	r2, [pc, #252]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	0c9b      	lsrs	r3, r3, #18
 8002f36:	3301      	adds	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3a:	e002      	b.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4e:	d102      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f2      	bne.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f56:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f62:	d158      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e057      	b.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f68:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f78:	e04d      	b.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f80:	d141      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f82:	4b28      	ldr	r3, [pc, #160]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d131      	bne.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f96:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa0:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2232      	movs	r2, #50	; 0x32
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc6:	e002      	b.n	8002fce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fda:	d102      	bne.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f2      	bne.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d112      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e011      	b.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003004:	e007      	b.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800300e:	4a05      	ldr	r2, [pc, #20]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003014:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40007000 	.word	0x40007000
 8003028:	20000000 	.word	0x20000000
 800302c:	431bde83 	.word	0x431bde83

08003030 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4a04      	ldr	r2, [pc, #16]	; (800304c <HAL_PWREx_EnableVddIO2+0x1c>)
 800303a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303e:	6053      	str	r3, [r2, #4]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40007000 	.word	0x40007000

08003050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f000 bc08 	b.w	8003874 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003064:	4b96      	ldr	r3, [pc, #600]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800306e:	4b94      	ldr	r3, [pc, #592]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80e4 	beq.w	800324e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_RCC_OscConfig+0x4c>
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	f040 808b 	bne.w	80031aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 8087 	bne.w	80031aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309c:	4b88      	ldr	r3, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x64>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e3df      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1a      	ldr	r2, [r3, #32]
 80030b8:	4b81      	ldr	r3, [pc, #516]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_RCC_OscConfig+0x7e>
 80030c4:	4b7e      	ldr	r3, [pc, #504]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030cc:	e005      	b.n	80030da <HAL_RCC_OscConfig+0x8a>
 80030ce:	4b7c      	ldr	r3, [pc, #496]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030da:	4293      	cmp	r3, r2
 80030dc:	d223      	bcs.n	8003126 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fdcc 	bl	8003c80 <RCC_SetFlashLatencyFromMSIRange>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e3c0      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f2:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a72      	ldr	r2, [pc, #456]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b70      	ldr	r3, [pc, #448]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	496d      	ldr	r1, [pc, #436]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003110:	4b6b      	ldr	r3, [pc, #428]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	4968      	ldr	r1, [pc, #416]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
 8003124:	e025      	b.n	8003172 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003126:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4960      	ldr	r1, [pc, #384]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003144:	4b5e      	ldr	r3, [pc, #376]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	495b      	ldr	r1, [pc, #364]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd8c 	bl	8003c80 <RCC_SetFlashLatencyFromMSIRange>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e380      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003172:	f000 fcc1 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003176:	4602      	mov	r2, r0
 8003178:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	4950      	ldr	r1, [pc, #320]	; (80032c4 <HAL_RCC_OscConfig+0x274>)
 8003184:	5ccb      	ldrb	r3, [r1, r3]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	4a4e      	ldr	r2, [pc, #312]	; (80032c8 <HAL_RCC_OscConfig+0x278>)
 8003190:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003192:	4b4e      	ldr	r3, [pc, #312]	; (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd ff4c 	bl	8001034 <HAL_InitTick>
 800319c:	4603      	mov	r3, r0
 800319e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d052      	beq.n	800324c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	e364      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d032      	beq.n	8003218 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a42      	ldr	r2, [pc, #264]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031be:	f7fd ff89 	bl	80010d4 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c6:	f7fd ff85 	bl	80010d4 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e34d      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d8:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4930      	ldr	r1, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	492b      	ldr	r1, [pc, #172]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
 8003216:	e01a      	b.n	800324e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003218:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a28      	ldr	r2, [pc, #160]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003224:	f7fd ff56 	bl	80010d4 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800322c:	f7fd ff52 	bl	80010d4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e31a      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x1dc>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d073      	beq.n	8003342 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d005      	beq.n	800326c <HAL_RCC_OscConfig+0x21c>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d10e      	bne.n	8003284 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d10b      	bne.n	8003284 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d063      	beq.n	8003340 <HAL_RCC_OscConfig+0x2f0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d15f      	bne.n	8003340 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e2f7      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d106      	bne.n	800329c <HAL_RCC_OscConfig+0x24c>
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e025      	b.n	80032e8 <HAL_RCC_OscConfig+0x298>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a4:	d114      	bne.n	80032d0 <HAL_RCC_OscConfig+0x280>
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a02      	ldr	r2, [pc, #8]	; (80032c0 <HAL_RCC_OscConfig+0x270>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e013      	b.n	80032e8 <HAL_RCC_OscConfig+0x298>
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08006e40 	.word	0x08006e40
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004
 80032d0:	4ba0      	ldr	r3, [pc, #640]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a9f      	ldr	r2, [pc, #636]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b9d      	ldr	r3, [pc, #628]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a9c      	ldr	r2, [pc, #624]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80032e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd fef0 	bl	80010d4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fd feec 	bl	80010d4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e2b4      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330a:	4b92      	ldr	r3, [pc, #584]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x2a8>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fd fedc 	bl	80010d4 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7fd fed8 	bl	80010d4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e2a0      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003332:	4b88      	ldr	r3, [pc, #544]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x2d0>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d060      	beq.n	8003410 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x310>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d119      	bne.n	800338e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d116      	bne.n	800338e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003360:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_OscConfig+0x328>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e27d      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003378:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	4973      	ldr	r1, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338c:	e040      	b.n	8003410 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d023      	beq.n	80033de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003396:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fd fe97 	bl	80010d4 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fd fe93 	bl	80010d4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e25b      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033bc:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b62      	ldr	r3, [pc, #392]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	495f      	ldr	r1, [pc, #380]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	e018      	b.n	8003410 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b5d      	ldr	r3, [pc, #372]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5c      	ldr	r2, [pc, #368]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fd fe73 	bl	80010d4 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fd fe6f 	bl	80010d4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e237      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03c      	beq.n	8003496 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01c      	beq.n	800345e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003424:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342a:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fd fe4e 	bl	80010d4 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343c:	f7fd fe4a 	bl	80010d4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e212      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ef      	beq.n	800343c <HAL_RCC_OscConfig+0x3ec>
 800345c:	e01b      	b.n	8003496 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345e:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003464:	4a3b      	ldr	r2, [pc, #236]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7fd fe31 	bl	80010d4 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003476:	f7fd fe2d 	bl	80010d4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1f5      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003488:	4b32      	ldr	r3, [pc, #200]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 800348a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ef      	bne.n	8003476 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a6 	beq.w	80035f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034a8:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_RCC_OscConfig+0x508>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d118      	bne.n	800350e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_RCC_OscConfig+0x508>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_RCC_OscConfig+0x508>)
 80034e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e8:	f7fd fdf4 	bl	80010d4 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f0:	f7fd fdf0 	bl	80010d4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1b8      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_RCC_OscConfig+0x508>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d108      	bne.n	8003528 <HAL_RCC_OscConfig+0x4d8>
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003526:	e029      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d115      	bne.n	800355c <HAL_RCC_OscConfig+0x50c>
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	4a03      	ldr	r2, [pc, #12]	; (8003554 <HAL_RCC_OscConfig+0x504>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003550:	e014      	b.n	800357c <HAL_RCC_OscConfig+0x52c>
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
 800355c:	4b9d      	ldr	r3, [pc, #628]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	4a9c      	ldr	r2, [pc, #624]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800356c:	4b99      	ldr	r3, [pc, #612]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	4a98      	ldr	r2, [pc, #608]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d016      	beq.n	80035b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fd fda6 	bl	80010d4 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fd fda2 	bl	80010d4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e168      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a2:	4b8c      	ldr	r3, [pc, #560]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ed      	beq.n	800358c <HAL_RCC_OscConfig+0x53c>
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fd fd8f 	bl	80010d4 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fd fd8b 	bl	80010d4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e151      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d0:	4b80      	ldr	r3, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ed      	bne.n	80035ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4b7b      	ldr	r3, [pc, #492]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	4a7a      	ldr	r2, [pc, #488]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03c      	beq.n	8003676 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01c      	beq.n	800363e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003604:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800360a:	4a72      	ldr	r2, [pc, #456]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fd fd5e 	bl	80010d4 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800361c:	f7fd fd5a 	bl	80010d4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e122      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800362e:	4b69      	ldr	r3, [pc, #420]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ef      	beq.n	800361c <HAL_RCC_OscConfig+0x5cc>
 800363c:	e01b      	b.n	8003676 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003644:	4a63      	ldr	r2, [pc, #396]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fd fd41 	bl	80010d4 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003656:	f7fd fd3d 	bl	80010d4 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e105      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003668:	4b5a      	ldr	r3, [pc, #360]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800366a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ef      	bne.n	8003656 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80f9 	beq.w	8003872 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	2b02      	cmp	r3, #2
 8003686:	f040 80cf 	bne.w	8003828 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800368a:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0203 	and.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	429a      	cmp	r2, r3
 800369c:	d12c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	3b01      	subs	r3, #1
 80036aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d123      	bne.n	80036f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d11b      	bne.n	80036f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d113      	bne.n	80036f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	3b01      	subs	r3, #1
 80036de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d109      	bne.n	80036f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	3b01      	subs	r3, #1
 80036f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d071      	beq.n	80037dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d068      	beq.n	80037d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036fe:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800370a:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0ac      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2d      	ldr	r2, [pc, #180]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003724:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003726:	f7fd fcd5 	bl	80010d4 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372e:	f7fd fcd1 	bl	80010d4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e099      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f0      	bne.n	800372e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <HAL_RCC_OscConfig+0x788>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800375c:	3a01      	subs	r2, #1
 800375e:	0112      	lsls	r2, r2, #4
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003766:	0212      	lsls	r2, r2, #8
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800376e:	0852      	lsrs	r2, r2, #1
 8003770:	3a01      	subs	r2, #1
 8003772:	0552      	lsls	r2, r2, #21
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800377a:	0852      	lsrs	r2, r2, #1
 800377c:	3a01      	subs	r2, #1
 800377e:	0652      	lsls	r2, r2, #25
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003786:	06d2      	lsls	r2, r2, #27
 8003788:	430a      	orrs	r2, r1
 800378a:	4912      	ldr	r1, [pc, #72]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0f      	ldr	r2, [pc, #60]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 80037a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a8:	f7fd fc94 	bl	80010d4 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd fc90 	bl	80010d4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e058      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <HAL_RCC_OscConfig+0x784>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ce:	e050      	b.n	8003872 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e04f      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
 80037d4:	40021000 	.word	0x40021000
 80037d8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d144      	bne.n	8003872 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f4:	4b21      	ldr	r3, [pc, #132]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a20      	ldr	r2, [pc, #128]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 80037fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003800:	f7fd fc68 	bl	80010d4 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fd fc64 	bl	80010d4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e02c      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x7b8>
 8003826:	e024      	b.n	8003872 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d01f      	beq.n	800386e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b13      	ldr	r3, [pc, #76]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a12      	ldr	r2, [pc, #72]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 8003834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fd fc4b 	bl	80010d4 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7fd fc47 	bl	80010d4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e00f      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4905      	ldr	r1, [pc, #20]	; (800387c <HAL_RCC_OscConfig+0x82c>)
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_RCC_OscConfig+0x830>)
 8003868:	4013      	ands	r3, r2
 800386a:	60cb      	str	r3, [r1, #12]
 800386c:	e001      	b.n	8003872 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40021000 	.word	0x40021000
 8003880:	feeefffc 	.word	0xfeeefffc

08003884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e11d      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800389c:	4b90      	ldr	r3, [pc, #576]	; (8003ae0 <HAL_RCC_ClockConfig+0x25c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d910      	bls.n	80038cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b8d      	ldr	r3, [pc, #564]	; (8003ae0 <HAL_RCC_ClockConfig+0x25c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 020f 	bic.w	r2, r3, #15
 80038b2:	498b      	ldr	r1, [pc, #556]	; (8003ae0 <HAL_RCC_ClockConfig+0x25c>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b89      	ldr	r3, [pc, #548]	; (8003ae0 <HAL_RCC_ClockConfig+0x25c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e105      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d010      	beq.n	80038fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	4b81      	ldr	r3, [pc, #516]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d908      	bls.n	80038fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b7e      	ldr	r3, [pc, #504]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	497b      	ldr	r1, [pc, #492]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d079      	beq.n	80039fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d11e      	bne.n	800394c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	4b75      	ldr	r3, [pc, #468]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0dc      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800391e:	f000 fa09 	bl	8003d34 <RCC_GetSysClockFreqFromPLLSource>
 8003922:	4603      	mov	r3, r0
 8003924:	4a70      	ldr	r2, [pc, #448]	; (8003ae8 <HAL_RCC_ClockConfig+0x264>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d946      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800392a:	4b6e      	ldr	r3, [pc, #440]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d140      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003936:	4b6b      	ldr	r3, [pc, #428]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393e:	4a69      	ldr	r2, [pc, #420]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003944:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e035      	b.n	80039b8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d107      	bne.n	8003964 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003954:	4b63      	ldr	r3, [pc, #396]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d115      	bne.n	800398c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b9      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800396c:	4b5d      	ldr	r3, [pc, #372]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0ad      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800397c:	4b59      	ldr	r3, [pc, #356]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0a5      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800398c:	f000 f8b4 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003990:	4603      	mov	r3, r0
 8003992:	4a55      	ldr	r2, [pc, #340]	; (8003ae8 <HAL_RCC_ClockConfig+0x264>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d90f      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003998:	4b52      	ldr	r3, [pc, #328]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039a4:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ac:	4a4d      	ldr	r2, [pc, #308]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 80039ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b8:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 0203 	bic.w	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4947      	ldr	r1, [pc, #284]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ca:	f7fd fb83 	bl	80010d4 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d2:	f7fd fb7f 	bl	80010d4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e077      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e8:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 020c 	and.w	r2, r3, #12
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d1eb      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d105      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a00:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a37      	ldr	r2, [pc, #220]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d208      	bcs.n	8003a3a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b2e      	ldr	r3, [pc, #184]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	492b      	ldr	r1, [pc, #172]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3a:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <HAL_RCC_ClockConfig+0x25c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d210      	bcs.n	8003a6a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <HAL_RCC_ClockConfig+0x25c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 020f 	bic.w	r2, r3, #15
 8003a50:	4923      	ldr	r1, [pc, #140]	; (8003ae0 <HAL_RCC_ClockConfig+0x25c>)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a58:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <HAL_RCC_ClockConfig+0x25c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e036      	b.n	8003ad8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	4918      	ldr	r1, [pc, #96]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4910      	ldr	r1, [pc, #64]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aa8:	f000 f826 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_RCC_ClockConfig+0x260>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	490c      	ldr	r1, [pc, #48]	; (8003aec <HAL_RCC_ClockConfig+0x268>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <HAL_RCC_ClockConfig+0x26c>)
 8003ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fab1 	bl	8001034 <HAL_InitTick>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40022000 	.word	0x40022000
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	04c4b400 	.word	0x04c4b400
 8003aec:	08006e40 	.word	0x08006e40
 8003af0:	20000000 	.word	0x20000000
 8003af4:	20000004 	.word	0x20000004

08003af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	; 0x24
 8003afc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b10:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x34>
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d121      	bne.n	8003b6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d11e      	bne.n	8003b6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e005      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b48:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10d      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d102      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e004      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b7c:	4b23      	ldr	r3, [pc, #140]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003b7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d134      	bne.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b86:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0xa6>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d003      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xac>
 8003b9c:	e005      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ba0:	617b      	str	r3, [r7, #20]
      break;
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ba6:	617b      	str	r3, [r7, #20]
      break;
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	617b      	str	r3, [r7, #20]
      break;
 8003bae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	3301      	adds	r3, #1
 8003bbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	fb03 f202 	mul.w	r2, r3, r2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	0e5b      	lsrs	r3, r3, #25
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	3301      	adds	r3, #1
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bf0:	69bb      	ldr	r3, [r7, #24]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3724      	adds	r7, #36	; 0x24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	08006e58 	.word	0x08006e58
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	007a1200 	.word	0x007a1200

08003c10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000000 	.word	0x20000000

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c2c:	f7ff fff0 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4904      	ldr	r1, [pc, #16]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08006e50 	.word	0x08006e50

08003c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c58:	f7ff ffda 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0adb      	lsrs	r3, r3, #11
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4904      	ldr	r1, [pc, #16]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	08006e50 	.word	0x08006e50

08003c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c98:	f7ff f906 	bl	8002ea8 <HAL_PWREx_GetVoltageRange>
 8003c9c:	6178      	str	r0, [r7, #20]
 8003c9e:	e014      	b.n	8003cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cb8:	f7ff f8f6 	bl	8002ea8 <HAL_PWREx_GetVoltageRange>
 8003cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd0:	d10b      	bne.n	8003cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d913      	bls.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2ba0      	cmp	r3, #160	; 0xa0
 8003cdc:	d902      	bls.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cde:	2302      	movs	r3, #2
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e00d      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	e00a      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b7f      	cmp	r3, #127	; 0x7f
 8003cee:	d902      	bls.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e004      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b70      	cmp	r3, #112	; 0x70
 8003cfa:	d101      	bne.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 020f 	bic.w	r2, r3, #15
 8003d08:	4909      	ldr	r1, [pc, #36]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d001      	beq.n	8003d22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40022000 	.word	0x40022000

08003d34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d00b      	beq.n	8003d62 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d825      	bhi.n	8003d9c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d008      	beq.n	8003d68 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d11f      	bne.n	8003d9c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d5e:	613b      	str	r3, [r7, #16]
    break;
 8003d60:	e01f      	b.n	8003da2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d62:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d64:	613b      	str	r3, [r7, #16]
    break;
 8003d66:	e01c      	b.n	8003da2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d107      	bne.n	8003d84 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e005      	b.n	8003d90 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d90:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d98:	613b      	str	r3, [r7, #16]
    break;
 8003d9a:	e002      	b.n	8003da2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]
    break;
 8003da0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	3301      	adds	r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	fb03 f202 	mul.w	r2, r3, r2
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0e5b      	lsrs	r3, r3, #25
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003de2:	683b      	ldr	r3, [r7, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40021000 	.word	0x40021000
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	007a1200 	.word	0x007a1200
 8003dfc:	08006e58 	.word	0x08006e58

08003e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e08:	2300      	movs	r3, #0
 8003e0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d040      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e20:	2b80      	cmp	r3, #128	; 0x80
 8003e22:	d02a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d825      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e28:	2b60      	cmp	r3, #96	; 0x60
 8003e2a:	d026      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e2c:	2b60      	cmp	r3, #96	; 0x60
 8003e2e:	d821      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d006      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d81d      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d010      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e40:	e018      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e42:	4b89      	ldr	r3, [pc, #548]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4a88      	ldr	r2, [pc, #544]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e4e:	e015      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3304      	adds	r3, #4
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fb02 	bl	8004460 <RCCEx_PLLSAI1_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e60:	e00c      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3320      	adds	r3, #32
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fbed 	bl	8004648 <RCCEx_PLLSAI2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e72:	e003      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	74fb      	strb	r3, [r7, #19]
      break;
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e82:	4b79      	ldr	r3, [pc, #484]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e88:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e90:	4975      	ldr	r1, [pc, #468]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e98:	e001      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d047      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d030      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb8:	d82a      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebe:	d02a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec4:	d824      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eca:	d008      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed0:	d81e      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eda:	d010      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003edc:	e018      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ede:	4b62      	ldr	r3, [pc, #392]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a61      	ldr	r2, [pc, #388]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eea:	e015      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fab4 	bl	8004460 <RCCEx_PLLSAI1_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003efc:	e00c      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3320      	adds	r3, #32
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fb9f 	bl	8004648 <RCCEx_PLLSAI2_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	74fb      	strb	r3, [r7, #19]
      break;
 8003f14:	e000      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f1e:	4b52      	ldr	r3, [pc, #328]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	494e      	ldr	r1, [pc, #312]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f34:	e001      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 809f 	beq.w	8004086 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f4c:	4b46      	ldr	r3, [pc, #280]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	4a40      	ldr	r2, [pc, #256]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6e:	4b3e      	ldr	r3, [pc, #248]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3a      	ldr	r2, [pc, #232]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f8a:	f7fd f8a3 	bl	80010d4 <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f90:	e009      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fd f89f 	bl	80010d4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d902      	bls.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	74fb      	strb	r3, [r7, #19]
        break;
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fa6:	4b31      	ldr	r3, [pc, #196]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0ef      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d15b      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01f      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d019      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004002:	4a19      	ldr	r2, [pc, #100]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d016      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd f85e 	bl	80010d4 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401a:	e00b      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fd f85a 	bl	80010d4 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d902      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	74fb      	strb	r3, [r7, #19]
            break;
 8004032:	e006      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0ec      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10c      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004048:	4b07      	ldr	r3, [pc, #28]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	4903      	ldr	r1, [pc, #12]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004060:	e008      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	74bb      	strb	r3, [r7, #18]
 8004066:	e005      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004074:	7c7b      	ldrb	r3, [r7, #17]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d105      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407a:	4ba0      	ldr	r3, [pc, #640]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	4a9f      	ldr	r2, [pc, #636]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004084:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004092:	4b9a      	ldr	r3, [pc, #616]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f023 0203 	bic.w	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	4996      	ldr	r1, [pc, #600]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040b4:	4b91      	ldr	r3, [pc, #580]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 020c 	bic.w	r2, r3, #12
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	498e      	ldr	r1, [pc, #568]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040d6:	4b89      	ldr	r3, [pc, #548]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	4985      	ldr	r1, [pc, #532]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040f8:	4b80      	ldr	r3, [pc, #512]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004106:	497d      	ldr	r1, [pc, #500]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800411a:	4b78      	ldr	r3, [pc, #480]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	4974      	ldr	r1, [pc, #464]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413c:	4b6f      	ldr	r3, [pc, #444]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414a:	496c      	ldr	r1, [pc, #432]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415e:	4b67      	ldr	r3, [pc, #412]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800416c:	4963      	ldr	r1, [pc, #396]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004180:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800418e:	495b      	ldr	r1, [pc, #364]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041a2:	4b56      	ldr	r3, [pc, #344]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	4952      	ldr	r1, [pc, #328]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c4:	4b4d      	ldr	r3, [pc, #308]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	494a      	ldr	r1, [pc, #296]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e6:	4b45      	ldr	r3, [pc, #276]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	4941      	ldr	r1, [pc, #260]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004208:	4b3c      	ldr	r3, [pc, #240]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800420a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004216:	4939      	ldr	r1, [pc, #228]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d028      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800422a:	4b34      	ldr	r3, [pc, #208]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004238:	4930      	ldr	r1, [pc, #192]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004248:	d106      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800424a:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	4a2b      	ldr	r2, [pc, #172]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004254:	60d3      	str	r3, [r2, #12]
 8004256:	e011      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004260:	d10c      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f000 f8f9 	bl	8004460 <RCCEx_PLLSAI1_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d04d      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800428c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004290:	d108      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004298:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800429e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042a2:	e012      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80042a4:	4b15      	ldr	r3, [pc, #84]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042aa:	4a14      	ldr	r2, [pc, #80]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c2:	490e      	ldr	r1, [pc, #56]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d2:	d106      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042de:	60d3      	str	r3, [r2, #12]
 80042e0:	e020      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ea:	d109      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a02      	ldr	r2, [pc, #8]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f6:	60d3      	str	r3, [r2, #12]
 80042f8:	e014      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004308:	d10c      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	2101      	movs	r1, #1
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f8a5 	bl	8004460 <RCCEx_PLLSAI1_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d028      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004330:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433e:	4947      	ldr	r1, [pc, #284]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800434a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800434e:	d106      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004350:	4b42      	ldr	r3, [pc, #264]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a41      	ldr	r2, [pc, #260]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435a:	60d3      	str	r3, [r2, #12]
 800435c:	e011      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004366:	d10c      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	2101      	movs	r1, #1
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f876 	bl	8004460 <RCCEx_PLLSAI1_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01e      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439e:	492f      	ldr	r1, [pc, #188]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2102      	movs	r1, #2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f851 	bl	8004460 <RCCEx_PLLSAI1_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043de:	f023 0204 	bic.w	r2, r3, #4
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	491c      	ldr	r1, [pc, #112]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004402:	f023 0218 	bic.w	r2, r3, #24
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	4913      	ldr	r1, [pc, #76]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d017      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004430:	490a      	ldr	r1, [pc, #40]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004442:	d105      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004450:	7cbb      	ldrb	r3, [r7, #18]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000

08004460 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800446e:	4b72      	ldr	r3, [pc, #456]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00e      	beq.n	8004498 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800447a:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0203 	and.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d103      	bne.n	8004492 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
       ||
 800448e:	2b00      	cmp	r3, #0
 8004490:	d142      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	e03f      	b.n	8004518 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d018      	beq.n	80044d2 <RCCEx_PLLSAI1_Config+0x72>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d825      	bhi.n	80044f0 <RCCEx_PLLSAI1_Config+0x90>
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <RCCEx_PLLSAI1_Config+0x4e>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d009      	beq.n	80044c0 <RCCEx_PLLSAI1_Config+0x60>
 80044ac:	e020      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ae:	4b62      	ldr	r3, [pc, #392]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11d      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044be:	e01a      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044c0:	4b5d      	ldr	r3, [pc, #372]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d0:	e013      	b.n	80044fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044d2:	4b59      	ldr	r3, [pc, #356]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044de:	4b56      	ldr	r3, [pc, #344]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ee:	e006      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e004      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d108      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004506:	4b4c      	ldr	r3, [pc, #304]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f023 0203 	bic.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4949      	ldr	r1, [pc, #292]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004514:	4313      	orrs	r3, r2
 8004516:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 8086 	bne.w	800462c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004520:	4b45      	ldr	r3, [pc, #276]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a44      	ldr	r2, [pc, #272]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fc fdd2 	bl	80010d4 <HAL_GetTick>
 8004530:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004532:	e009      	b.n	8004548 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004534:	f7fc fdce 	bl	80010d4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	73fb      	strb	r3, [r7, #15]
        break;
 8004546:	e005      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004548:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ef      	bne.n	8004534 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d168      	bne.n	800462c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d113      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004560:	4b35      	ldr	r3, [pc, #212]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	4b35      	ldr	r3, [pc, #212]	; (800463c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004566:	4013      	ands	r3, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6892      	ldr	r2, [r2, #8]
 800456c:	0211      	lsls	r1, r2, #8
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68d2      	ldr	r2, [r2, #12]
 8004572:	06d2      	lsls	r2, r2, #27
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6852      	ldr	r2, [r2, #4]
 800457a:	3a01      	subs	r2, #1
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	430a      	orrs	r2, r1
 8004580:	492d      	ldr	r1, [pc, #180]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004582:	4313      	orrs	r3, r2
 8004584:	610b      	str	r3, [r1, #16]
 8004586:	e02d      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d115      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800458e:	4b2a      	ldr	r3, [pc, #168]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004594:	4013      	ands	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6892      	ldr	r2, [r2, #8]
 800459a:	0211      	lsls	r1, r2, #8
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6912      	ldr	r2, [r2, #16]
 80045a0:	0852      	lsrs	r2, r2, #1
 80045a2:	3a01      	subs	r2, #1
 80045a4:	0552      	lsls	r2, r2, #21
 80045a6:	4311      	orrs	r1, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6852      	ldr	r2, [r2, #4]
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	430a      	orrs	r2, r1
 80045b2:	4921      	ldr	r1, [pc, #132]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
 80045b8:	e014      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ba:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	4b21      	ldr	r3, [pc, #132]	; (8004644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6892      	ldr	r2, [r2, #8]
 80045c6:	0211      	lsls	r1, r2, #8
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6952      	ldr	r2, [r2, #20]
 80045cc:	0852      	lsrs	r2, r2, #1
 80045ce:	3a01      	subs	r2, #1
 80045d0:	0652      	lsls	r2, r2, #25
 80045d2:	4311      	orrs	r1, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6852      	ldr	r2, [r2, #4]
 80045d8:	3a01      	subs	r2, #1
 80045da:	0112      	lsls	r2, r2, #4
 80045dc:	430a      	orrs	r2, r1
 80045de:	4916      	ldr	r1, [pc, #88]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a13      	ldr	r2, [pc, #76]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fc fd70 	bl	80010d4 <HAL_GetTick>
 80045f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f6:	e009      	b.n	800460c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f8:	f7fc fd6c 	bl	80010d4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d902      	bls.n	800460c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	73fb      	strb	r3, [r7, #15]
          break;
 800460a:	e005      	b.n	8004618 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0ef      	beq.n	80045f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	4904      	ldr	r1, [pc, #16]	; (8004638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
 800463c:	07ff800f 	.word	0x07ff800f
 8004640:	ff9f800f 	.word	0xff9f800f
 8004644:	f9ff800f 	.word	0xf9ff800f

08004648 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004656:	4b72      	ldr	r3, [pc, #456]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004662:	4b6f      	ldr	r3, [pc, #444]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0203 	and.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d103      	bne.n	800467a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
       ||
 8004676:	2b00      	cmp	r3, #0
 8004678:	d142      	bne.n	8004700 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e03f      	b.n	8004700 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d018      	beq.n	80046ba <RCCEx_PLLSAI2_Config+0x72>
 8004688:	2b03      	cmp	r3, #3
 800468a:	d825      	bhi.n	80046d8 <RCCEx_PLLSAI2_Config+0x90>
 800468c:	2b01      	cmp	r3, #1
 800468e:	d002      	beq.n	8004696 <RCCEx_PLLSAI2_Config+0x4e>
 8004690:	2b02      	cmp	r3, #2
 8004692:	d009      	beq.n	80046a8 <RCCEx_PLLSAI2_Config+0x60>
 8004694:	e020      	b.n	80046d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004696:	4b62      	ldr	r3, [pc, #392]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11d      	bne.n	80046de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a6:	e01a      	b.n	80046de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a8:	4b5d      	ldr	r3, [pc, #372]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d116      	bne.n	80046e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b8:	e013      	b.n	80046e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ba:	4b59      	ldr	r3, [pc, #356]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046c6:	4b56      	ldr	r3, [pc, #344]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046d6:	e006      	b.n	80046e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
      break;
 80046dc:	e004      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d108      	bne.n	8004700 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046ee:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4949      	ldr	r1, [pc, #292]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f040 8086 	bne.w	8004814 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004708:	4b45      	ldr	r3, [pc, #276]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a44      	ldr	r2, [pc, #272]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800470e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004714:	f7fc fcde 	bl	80010d4 <HAL_GetTick>
 8004718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800471a:	e009      	b.n	8004730 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800471c:	f7fc fcda 	bl	80010d4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d902      	bls.n	8004730 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	73fb      	strb	r3, [r7, #15]
        break;
 800472e:	e005      	b.n	800473c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004730:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ef      	bne.n	800471c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d168      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d113      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	4b35      	ldr	r3, [pc, #212]	; (8004824 <RCCEx_PLLSAI2_Config+0x1dc>)
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6892      	ldr	r2, [r2, #8]
 8004754:	0211      	lsls	r1, r2, #8
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68d2      	ldr	r2, [r2, #12]
 800475a:	06d2      	lsls	r2, r2, #27
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6852      	ldr	r2, [r2, #4]
 8004762:	3a01      	subs	r2, #1
 8004764:	0112      	lsls	r2, r2, #4
 8004766:	430a      	orrs	r2, r1
 8004768:	492d      	ldr	r1, [pc, #180]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800476a:	4313      	orrs	r3, r2
 800476c:	614b      	str	r3, [r1, #20]
 800476e:	e02d      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d115      	bne.n	80047a2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004776:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <RCCEx_PLLSAI2_Config+0x1e0>)
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6892      	ldr	r2, [r2, #8]
 8004782:	0211      	lsls	r1, r2, #8
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6912      	ldr	r2, [r2, #16]
 8004788:	0852      	lsrs	r2, r2, #1
 800478a:	3a01      	subs	r2, #1
 800478c:	0552      	lsls	r2, r2, #21
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6852      	ldr	r2, [r2, #4]
 8004794:	3a01      	subs	r2, #1
 8004796:	0112      	lsls	r2, r2, #4
 8004798:	430a      	orrs	r2, r1
 800479a:	4921      	ldr	r1, [pc, #132]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	614b      	str	r3, [r1, #20]
 80047a0:	e014      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a2:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	4b21      	ldr	r3, [pc, #132]	; (800482c <RCCEx_PLLSAI2_Config+0x1e4>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6892      	ldr	r2, [r2, #8]
 80047ae:	0211      	lsls	r1, r2, #8
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6952      	ldr	r2, [r2, #20]
 80047b4:	0852      	lsrs	r2, r2, #1
 80047b6:	3a01      	subs	r2, #1
 80047b8:	0652      	lsls	r2, r2, #25
 80047ba:	4311      	orrs	r1, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6852      	ldr	r2, [r2, #4]
 80047c0:	3a01      	subs	r2, #1
 80047c2:	0112      	lsls	r2, r2, #4
 80047c4:	430a      	orrs	r2, r1
 80047c6:	4916      	ldr	r1, [pc, #88]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fc fc7c 	bl	80010d4 <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e0:	f7fc fc78 	bl	80010d4 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
          break;
 80047f2:	e005      	b.n	8004800 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ef      	beq.n	80047e0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	4904      	ldr	r1, [pc, #16]	; (8004820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004810:	4313      	orrs	r3, r2
 8004812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004814:	7bfb      	ldrb	r3, [r7, #15]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	07ff800f 	.word	0x07ff800f
 8004828:	ff9f800f 	.word	0xff9f800f
 800482c:	f9ff800f 	.word	0xf9ff800f

08004830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e049      	b.n	80048d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc fafc 	bl	8000e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f000 fade 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d001      	beq.n	80048f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e047      	b.n	8004988 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <HAL_TIM_Base_Start+0xb4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01d      	beq.n	8004946 <HAL_TIM_Base_Start+0x66>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d018      	beq.n	8004946 <HAL_TIM_Base_Start+0x66>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <HAL_TIM_Base_Start+0xb8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_TIM_Base_Start+0x66>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1e      	ldr	r2, [pc, #120]	; (800499c <HAL_TIM_Base_Start+0xbc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00e      	beq.n	8004946 <HAL_TIM_Base_Start+0x66>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <HAL_TIM_Base_Start+0xc0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_TIM_Base_Start+0x66>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <HAL_TIM_Base_Start+0xc4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIM_Base_Start+0x66>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a19      	ldr	r2, [pc, #100]	; (80049a8 <HAL_TIM_Base_Start+0xc8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d115      	bne.n	8004972 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <HAL_TIM_Base_Start+0xcc>)
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b06      	cmp	r3, #6
 8004956:	d015      	beq.n	8004984 <HAL_TIM_Base_Start+0xa4>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495e:	d011      	beq.n	8004984 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	e008      	b.n	8004984 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e000      	b.n	8004986 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40013400 	.word	0x40013400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	00010007 	.word	0x00010007

080049b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e049      	b.n	8004a56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f841 	bl	8004a5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f000 fa1e 	bl	8004e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e0ff      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b14      	cmp	r3, #20
 8004a9e:	f200 80f0 	bhi.w	8004c82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004c83 	.word	0x08004c83
 8004ab0:	08004c83 	.word	0x08004c83
 8004ab4:	08004c83 	.word	0x08004c83
 8004ab8:	08004b3d 	.word	0x08004b3d
 8004abc:	08004c83 	.word	0x08004c83
 8004ac0:	08004c83 	.word	0x08004c83
 8004ac4:	08004c83 	.word	0x08004c83
 8004ac8:	08004b7f 	.word	0x08004b7f
 8004acc:	08004c83 	.word	0x08004c83
 8004ad0:	08004c83 	.word	0x08004c83
 8004ad4:	08004c83 	.word	0x08004c83
 8004ad8:	08004bbf 	.word	0x08004bbf
 8004adc:	08004c83 	.word	0x08004c83
 8004ae0:	08004c83 	.word	0x08004c83
 8004ae4:	08004c83 	.word	0x08004c83
 8004ae8:	08004c01 	.word	0x08004c01
 8004aec:	08004c83 	.word	0x08004c83
 8004af0:	08004c83 	.word	0x08004c83
 8004af4:	08004c83 	.word	0x08004c83
 8004af8:	08004c41 	.word	0x08004c41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fa2e 	bl	8004f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0208 	orr.w	r2, r2, #8
 8004b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0204 	bic.w	r2, r2, #4
 8004b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6999      	ldr	r1, [r3, #24]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	619a      	str	r2, [r3, #24]
      break;
 8004b3a:	e0a5      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fa9e 	bl	8005084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6999      	ldr	r1, [r3, #24]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	619a      	str	r2, [r3, #24]
      break;
 8004b7c:	e084      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fb07 	bl	8005198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0208 	orr.w	r2, r2, #8
 8004b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0204 	bic.w	r2, r2, #4
 8004ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69d9      	ldr	r1, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	61da      	str	r2, [r3, #28]
      break;
 8004bbc:	e064      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fb6f 	bl	80052a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69d9      	ldr	r1, [r3, #28]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	021a      	lsls	r2, r3, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	61da      	str	r2, [r3, #28]
      break;
 8004bfe:	e043      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fbb8 	bl	800537c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0208 	orr.w	r2, r2, #8
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0204 	bic.w	r2, r2, #4
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c3e:	e023      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fbfc 	bl	8005444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	021a      	lsls	r2, r3, #8
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c80:	e002      	b.n	8004c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
      break;
 8004c86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop

08004c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0b6      	b.n	8004e26 <HAL_TIM_ConfigClockSource+0x18a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf4:	d03e      	beq.n	8004d74 <HAL_TIM_ConfigClockSource+0xd8>
 8004cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfa:	f200 8087 	bhi.w	8004e0c <HAL_TIM_ConfigClockSource+0x170>
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	f000 8086 	beq.w	8004e12 <HAL_TIM_ConfigClockSource+0x176>
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0a:	d87f      	bhi.n	8004e0c <HAL_TIM_ConfigClockSource+0x170>
 8004d0c:	2b70      	cmp	r3, #112	; 0x70
 8004d0e:	d01a      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0xaa>
 8004d10:	2b70      	cmp	r3, #112	; 0x70
 8004d12:	d87b      	bhi.n	8004e0c <HAL_TIM_ConfigClockSource+0x170>
 8004d14:	2b60      	cmp	r3, #96	; 0x60
 8004d16:	d050      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x11e>
 8004d18:	2b60      	cmp	r3, #96	; 0x60
 8004d1a:	d877      	bhi.n	8004e0c <HAL_TIM_ConfigClockSource+0x170>
 8004d1c:	2b50      	cmp	r3, #80	; 0x50
 8004d1e:	d03c      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0xfe>
 8004d20:	2b50      	cmp	r3, #80	; 0x50
 8004d22:	d873      	bhi.n	8004e0c <HAL_TIM_ConfigClockSource+0x170>
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d058      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x13e>
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d86f      	bhi.n	8004e0c <HAL_TIM_ConfigClockSource+0x170>
 8004d2c:	2b30      	cmp	r3, #48	; 0x30
 8004d2e:	d064      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x15e>
 8004d30:	2b30      	cmp	r3, #48	; 0x30
 8004d32:	d86b      	bhi.n	8004e0c <HAL_TIM_ConfigClockSource+0x170>
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d060      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x15e>
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d867      	bhi.n	8004e0c <HAL_TIM_ConfigClockSource+0x170>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d05c      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x15e>
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d05a      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x15e>
 8004d44:	e062      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6899      	ldr	r1, [r3, #8]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f000 fc55 	bl	8005604 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	609a      	str	r2, [r3, #8]
      break;
 8004d72:	e04f      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6899      	ldr	r1, [r3, #8]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f000 fc3e 	bl	8005604 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d96:	609a      	str	r2, [r3, #8]
      break;
 8004d98:	e03c      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6859      	ldr	r1, [r3, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f000 fbb2 	bl	8005510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2150      	movs	r1, #80	; 0x50
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fc0b 	bl	80055ce <TIM_ITRx_SetConfig>
      break;
 8004db8:	e02c      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f000 fbd1 	bl	800556e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2160      	movs	r1, #96	; 0x60
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fbfb 	bl	80055ce <TIM_ITRx_SetConfig>
      break;
 8004dd8:	e01c      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6859      	ldr	r1, [r3, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f000 fb92 	bl	8005510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2140      	movs	r1, #64	; 0x40
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fbeb 	bl	80055ce <TIM_ITRx_SetConfig>
      break;
 8004df8:	e00c      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f000 fbe2 	bl	80055ce <TIM_ITRx_SetConfig>
      break;
 8004e0a:	e003      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e10:	e000      	b.n	8004e14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a40      	ldr	r2, [pc, #256]	; (8004f44 <TIM_Base_SetConfig+0x114>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d00f      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3d      	ldr	r2, [pc, #244]	; (8004f48 <TIM_Base_SetConfig+0x118>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3c      	ldr	r2, [pc, #240]	; (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a3b      	ldr	r2, [pc, #236]	; (8004f50 <TIM_Base_SetConfig+0x120>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a3a      	ldr	r2, [pc, #232]	; (8004f54 <TIM_Base_SetConfig+0x124>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d108      	bne.n	8004e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2f      	ldr	r2, [pc, #188]	; (8004f44 <TIM_Base_SetConfig+0x114>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2c      	ldr	r2, [pc, #176]	; (8004f48 <TIM_Base_SetConfig+0x118>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <TIM_Base_SetConfig+0x11c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <TIM_Base_SetConfig+0x120>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <TIM_Base_SetConfig+0x124>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a28      	ldr	r2, [pc, #160]	; (8004f58 <TIM_Base_SetConfig+0x128>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a27      	ldr	r2, [pc, #156]	; (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0x9a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a26      	ldr	r2, [pc, #152]	; (8004f60 <TIM_Base_SetConfig+0x130>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <TIM_Base_SetConfig+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00f      	beq.n	8004f28 <TIM_Base_SetConfig+0xf8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <TIM_Base_SetConfig+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_Base_SetConfig+0xf8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <TIM_Base_SetConfig+0x128>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_Base_SetConfig+0xf8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a10      	ldr	r2, [pc, #64]	; (8004f5c <TIM_Base_SetConfig+0x12c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0xf8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a0f      	ldr	r2, [pc, #60]	; (8004f60 <TIM_Base_SetConfig+0x130>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d103      	bne.n	8004f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	615a      	str	r2, [r3, #20]
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40013400 	.word	0x40013400
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800

08004f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0302 	bic.w	r3, r3, #2
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a2c      	ldr	r2, [pc, #176]	; (8005070 <TIM_OC1_SetConfig+0x10c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00f      	beq.n	8004fe4 <TIM_OC1_SetConfig+0x80>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a2b      	ldr	r2, [pc, #172]	; (8005074 <TIM_OC1_SetConfig+0x110>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <TIM_OC1_SetConfig+0x80>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <TIM_OC1_SetConfig+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_OC1_SetConfig+0x80>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a29      	ldr	r2, [pc, #164]	; (800507c <TIM_OC1_SetConfig+0x118>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_OC1_SetConfig+0x80>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a28      	ldr	r2, [pc, #160]	; (8005080 <TIM_OC1_SetConfig+0x11c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d10c      	bne.n	8004ffe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 0308 	bic.w	r3, r3, #8
 8004fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f023 0304 	bic.w	r3, r3, #4
 8004ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <TIM_OC1_SetConfig+0x10c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_OC1_SetConfig+0xc2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <TIM_OC1_SetConfig+0x110>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_OC1_SetConfig+0xc2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a19      	ldr	r2, [pc, #100]	; (8005078 <TIM_OC1_SetConfig+0x114>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_OC1_SetConfig+0xc2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a18      	ldr	r2, [pc, #96]	; (800507c <TIM_OC1_SetConfig+0x118>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_OC1_SetConfig+0xc2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a17      	ldr	r2, [pc, #92]	; (8005080 <TIM_OC1_SetConfig+0x11c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d111      	bne.n	800504a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40013400 	.word	0x40013400
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400
 8005080:	40014800 	.word	0x40014800

08005084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0320 	bic.w	r3, r3, #32
 80050d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a28      	ldr	r2, [pc, #160]	; (8005184 <TIM_OC2_SetConfig+0x100>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_OC2_SetConfig+0x6c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a27      	ldr	r2, [pc, #156]	; (8005188 <TIM_OC2_SetConfig+0x104>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10d      	bne.n	800510c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <TIM_OC2_SetConfig+0x100>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00f      	beq.n	8005134 <TIM_OC2_SetConfig+0xb0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <TIM_OC2_SetConfig+0x104>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_OC2_SetConfig+0xb0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <TIM_OC2_SetConfig+0x108>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_OC2_SetConfig+0xb0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <TIM_OC2_SetConfig+0x10c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC2_SetConfig+0xb0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a19      	ldr	r2, [pc, #100]	; (8005194 <TIM_OC2_SetConfig+0x110>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d113      	bne.n	800515c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800513a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40013400 	.word	0x40013400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a27      	ldr	r2, [pc, #156]	; (8005294 <TIM_OC3_SetConfig+0xfc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC3_SetConfig+0x6a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a26      	ldr	r2, [pc, #152]	; (8005298 <TIM_OC3_SetConfig+0x100>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10d      	bne.n	800521e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <TIM_OC3_SetConfig+0xfc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_OC3_SetConfig+0xae>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <TIM_OC3_SetConfig+0x100>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_OC3_SetConfig+0xae>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1a      	ldr	r2, [pc, #104]	; (800529c <TIM_OC3_SetConfig+0x104>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_OC3_SetConfig+0xae>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <TIM_OC3_SetConfig+0x108>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_OC3_SetConfig+0xae>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <TIM_OC3_SetConfig+0x10c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d113      	bne.n	800526e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800524c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40013400 	.word	0x40013400
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	031b      	lsls	r3, r3, #12
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <TIM_OC4_SetConfig+0xc0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_OC4_SetConfig+0x84>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <TIM_OC4_SetConfig+0xc4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00b      	beq.n	800532c <TIM_OC4_SetConfig+0x84>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a16      	ldr	r2, [pc, #88]	; (8005370 <TIM_OC4_SetConfig+0xc8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_OC4_SetConfig+0x84>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a15      	ldr	r2, [pc, #84]	; (8005374 <TIM_OC4_SetConfig+0xcc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC4_SetConfig+0x84>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a14      	ldr	r2, [pc, #80]	; (8005378 <TIM_OC4_SetConfig+0xd0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d109      	bne.n	8005340 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40013400 	.word	0x40013400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a17      	ldr	r2, [pc, #92]	; (8005430 <TIM_OC5_SetConfig+0xb4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_OC5_SetConfig+0x7a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a16      	ldr	r2, [pc, #88]	; (8005434 <TIM_OC5_SetConfig+0xb8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_OC5_SetConfig+0x7a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a15      	ldr	r2, [pc, #84]	; (8005438 <TIM_OC5_SetConfig+0xbc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_OC5_SetConfig+0x7a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a14      	ldr	r2, [pc, #80]	; (800543c <TIM_OC5_SetConfig+0xc0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC5_SetConfig+0x7a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a13      	ldr	r2, [pc, #76]	; (8005440 <TIM_OC5_SetConfig+0xc4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d109      	bne.n	800540a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40013400 	.word	0x40013400
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800

08005444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800548a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	051b      	lsls	r3, r3, #20
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a18      	ldr	r2, [pc, #96]	; (80054fc <TIM_OC6_SetConfig+0xb8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00f      	beq.n	80054c0 <TIM_OC6_SetConfig+0x7c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a17      	ldr	r2, [pc, #92]	; (8005500 <TIM_OC6_SetConfig+0xbc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <TIM_OC6_SetConfig+0x7c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a16      	ldr	r2, [pc, #88]	; (8005504 <TIM_OC6_SetConfig+0xc0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d007      	beq.n	80054c0 <TIM_OC6_SetConfig+0x7c>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a15      	ldr	r2, [pc, #84]	; (8005508 <TIM_OC6_SetConfig+0xc4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC6_SetConfig+0x7c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a14      	ldr	r2, [pc, #80]	; (800550c <TIM_OC6_SetConfig+0xc8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d109      	bne.n	80054d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40013400 	.word	0x40013400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 030a 	bic.w	r3, r3, #10
 800554c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556e:	b480      	push	{r7}
 8005570:	b087      	sub	sp, #28
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0210 	bic.w	r2, r3, #16
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	031b      	lsls	r3, r3, #12
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f043 0307 	orr.w	r3, r3, #7
 80055f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	609a      	str	r2, [r3, #8]
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800561e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	021a      	lsls	r2, r3, #8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	431a      	orrs	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4313      	orrs	r3, r2
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	609a      	str	r2, [r3, #8]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005658:	2302      	movs	r3, #2
 800565a:	e068      	b.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a2e      	ldr	r2, [pc, #184]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2d      	ldr	r2, [pc, #180]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005696:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1e      	ldr	r2, [pc, #120]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ce:	d018      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a18      	ldr	r2, [pc, #96]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a13      	ldr	r2, [pc, #76]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a14      	ldr	r2, [pc, #80]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d10c      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4313      	orrs	r3, r2
 8005712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40013400 	.word	0x40013400
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40014000 	.word	0x40014000

08005754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e042      	b.n	80057ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fb fb0b 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2224      	movs	r2, #36	; 0x24
 8005782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8c4 	bl	8005924 <UART_SetConfig>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e022      	b.n	80057ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fbb4 	bl	8005f1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fc3b 	bl	8006060 <UART_CheckIdleState>
 80057ea:	4603      	mov	r3, r0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580a:	2b20      	cmp	r3, #32
 800580c:	f040 8084 	bne.w	8005918 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_UART_Transmit+0x28>
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e07c      	b.n	800591a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_UART_Transmit+0x3a>
 800582a:	2302      	movs	r3, #2
 800582c:	e075      	b.n	800591a <HAL_UART_Transmit+0x126>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2221      	movs	r2, #33	; 0x21
 8005842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005846:	f7fb fc45 	bl	80010d4 <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005864:	d108      	bne.n	8005878 <HAL_UART_Transmit+0x84>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	e003      	b.n	8005880 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005888:	e02d      	b.n	80058e6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2200      	movs	r2, #0
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fc2e 	bl	80060f6 <UART_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e03a      	b.n	800591a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	881a      	ldrh	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b6:	b292      	uxth	r2, r2
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	3302      	adds	r3, #2
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	e008      	b.n	80058d4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	b292      	uxth	r2, r2
 80058cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	3301      	adds	r3, #1
 80058d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1cb      	bne.n	800588a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2140      	movs	r1, #64	; 0x40
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fbfa 	bl	80060f6 <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e006      	b.n	800591a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
  }
}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005928:	b08c      	sub	sp, #48	; 0x30
 800592a:	af00      	add	r7, sp, #0
 800592c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	431a      	orrs	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	431a      	orrs	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	4313      	orrs	r3, r2
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4baa      	ldr	r3, [pc, #680]	; (8005bfc <UART_SetConfig+0x2d8>)
 8005954:	4013      	ands	r3, r2
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800595c:	430b      	orrs	r3, r1
 800595e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a9f      	ldr	r2, [pc, #636]	; (8005c00 <UART_SetConfig+0x2dc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598c:	4313      	orrs	r3, r2
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800599a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	f023 010f 	bic.w	r1, r3, #15
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a90      	ldr	r2, [pc, #576]	; (8005c04 <UART_SetConfig+0x2e0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d125      	bne.n	8005a14 <UART_SetConfig+0xf0>
 80059c8:	4b8f      	ldr	r3, [pc, #572]	; (8005c08 <UART_SetConfig+0x2e4>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d81a      	bhi.n	8005a0c <UART_SetConfig+0xe8>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <UART_SetConfig+0xb8>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	080059ed 	.word	0x080059ed
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f2:	e116      	b.n	8005c22 <UART_SetConfig+0x2fe>
 80059f4:	2302      	movs	r3, #2
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fa:	e112      	b.n	8005c22 <UART_SetConfig+0x2fe>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a02:	e10e      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0a:	e10a      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a12:	e106      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a7c      	ldr	r2, [pc, #496]	; (8005c0c <UART_SetConfig+0x2e8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d138      	bne.n	8005a90 <UART_SetConfig+0x16c>
 8005a1e:	4b7a      	ldr	r3, [pc, #488]	; (8005c08 <UART_SetConfig+0x2e4>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b0c      	cmp	r3, #12
 8005a2a:	d82d      	bhi.n	8005a88 <UART_SetConfig+0x164>
 8005a2c:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0x110>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005a69 	.word	0x08005a69
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	08005a89 	.word	0x08005a89
 8005a40:	08005a89 	.word	0x08005a89
 8005a44:	08005a79 	.word	0x08005a79
 8005a48:	08005a89 	.word	0x08005a89
 8005a4c:	08005a89 	.word	0x08005a89
 8005a50:	08005a89 	.word	0x08005a89
 8005a54:	08005a71 	.word	0x08005a71
 8005a58:	08005a89 	.word	0x08005a89
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	08005a89 	.word	0x08005a89
 8005a64:	08005a81 	.word	0x08005a81
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6e:	e0d8      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005a70:	2302      	movs	r3, #2
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a76:	e0d4      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7e:	e0d0      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005a80:	2308      	movs	r3, #8
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a86:	e0cc      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e0c8      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a5e      	ldr	r2, [pc, #376]	; (8005c10 <UART_SetConfig+0x2ec>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d125      	bne.n	8005ae6 <UART_SetConfig+0x1c2>
 8005a9a:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <UART_SetConfig+0x2e4>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aa4:	2b30      	cmp	r3, #48	; 0x30
 8005aa6:	d016      	beq.n	8005ad6 <UART_SetConfig+0x1b2>
 8005aa8:	2b30      	cmp	r3, #48	; 0x30
 8005aaa:	d818      	bhi.n	8005ade <UART_SetConfig+0x1ba>
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d00a      	beq.n	8005ac6 <UART_SetConfig+0x1a2>
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d814      	bhi.n	8005ade <UART_SetConfig+0x1ba>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <UART_SetConfig+0x19a>
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d008      	beq.n	8005ace <UART_SetConfig+0x1aa>
 8005abc:	e00f      	b.n	8005ade <UART_SetConfig+0x1ba>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac4:	e0ad      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005acc:	e0a9      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005ace:	2304      	movs	r3, #4
 8005ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad4:	e0a5      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005adc:	e0a1      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005ade:	2310      	movs	r3, #16
 8005ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ae4:	e09d      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a4a      	ldr	r2, [pc, #296]	; (8005c14 <UART_SetConfig+0x2f0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d125      	bne.n	8005b3c <UART_SetConfig+0x218>
 8005af0:	4b45      	ldr	r3, [pc, #276]	; (8005c08 <UART_SetConfig+0x2e4>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005afa:	2bc0      	cmp	r3, #192	; 0xc0
 8005afc:	d016      	beq.n	8005b2c <UART_SetConfig+0x208>
 8005afe:	2bc0      	cmp	r3, #192	; 0xc0
 8005b00:	d818      	bhi.n	8005b34 <UART_SetConfig+0x210>
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d00a      	beq.n	8005b1c <UART_SetConfig+0x1f8>
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d814      	bhi.n	8005b34 <UART_SetConfig+0x210>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <UART_SetConfig+0x1f0>
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d008      	beq.n	8005b24 <UART_SetConfig+0x200>
 8005b12:	e00f      	b.n	8005b34 <UART_SetConfig+0x210>
 8005b14:	2300      	movs	r3, #0
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e082      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b22:	e07e      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2a:	e07a      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b32:	e076      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b3a:	e072      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a35      	ldr	r2, [pc, #212]	; (8005c18 <UART_SetConfig+0x2f4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d12a      	bne.n	8005b9c <UART_SetConfig+0x278>
 8005b46:	4b30      	ldr	r3, [pc, #192]	; (8005c08 <UART_SetConfig+0x2e4>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b54:	d01a      	beq.n	8005b8c <UART_SetConfig+0x268>
 8005b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5a:	d81b      	bhi.n	8005b94 <UART_SetConfig+0x270>
 8005b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b60:	d00c      	beq.n	8005b7c <UART_SetConfig+0x258>
 8005b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b66:	d815      	bhi.n	8005b94 <UART_SetConfig+0x270>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <UART_SetConfig+0x250>
 8005b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b70:	d008      	beq.n	8005b84 <UART_SetConfig+0x260>
 8005b72:	e00f      	b.n	8005b94 <UART_SetConfig+0x270>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7a:	e052      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b82:	e04e      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8a:	e04a      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b92:	e046      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b94:	2310      	movs	r3, #16
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9a:	e042      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <UART_SetConfig+0x2dc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d13a      	bne.n	8005c1c <UART_SetConfig+0x2f8>
 8005ba6:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <UART_SetConfig+0x2e4>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bb4:	d01a      	beq.n	8005bec <UART_SetConfig+0x2c8>
 8005bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bba:	d81b      	bhi.n	8005bf4 <UART_SetConfig+0x2d0>
 8005bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc0:	d00c      	beq.n	8005bdc <UART_SetConfig+0x2b8>
 8005bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc6:	d815      	bhi.n	8005bf4 <UART_SetConfig+0x2d0>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <UART_SetConfig+0x2b0>
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd0:	d008      	beq.n	8005be4 <UART_SetConfig+0x2c0>
 8005bd2:	e00f      	b.n	8005bf4 <UART_SetConfig+0x2d0>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e022      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e01e      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bea:	e01a      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf2:	e016      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bfa:	e012      	b.n	8005c22 <UART_SetConfig+0x2fe>
 8005bfc:	cfff69f3 	.word	0xcfff69f3
 8005c00:	40008000 	.word	0x40008000
 8005c04:	40013800 	.word	0x40013800
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40004400 	.word	0x40004400
 8005c10:	40004800 	.word	0x40004800
 8005c14:	40004c00 	.word	0x40004c00
 8005c18:	40005000 	.word	0x40005000
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4aae      	ldr	r2, [pc, #696]	; (8005ee0 <UART_SetConfig+0x5bc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	f040 8097 	bne.w	8005d5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d823      	bhi.n	8005c7e <UART_SetConfig+0x35a>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0x318>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c7f 	.word	0x08005c7f
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c7f 	.word	0x08005c7f
 8005c4c:	08005c6f 	.word	0x08005c6f
 8005c50:	08005c7f 	.word	0x08005c7f
 8005c54:	08005c7f 	.word	0x08005c7f
 8005c58:	08005c7f 	.word	0x08005c7f
 8005c5c:	08005c77 	.word	0x08005c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c60:	f7fd ffe2 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8005c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c66:	e010      	b.n	8005c8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c68:	4b9e      	ldr	r3, [pc, #632]	; (8005ee4 <UART_SetConfig+0x5c0>)
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c6c:	e00d      	b.n	8005c8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c6e:	f7fd ff43 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8005c72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c74:	e009      	b.n	8005c8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c7c:	e005      	b.n	8005c8a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8130 	beq.w	8005ef2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	4a94      	ldr	r2, [pc, #592]	; (8005ee8 <UART_SetConfig+0x5c4>)
 8005c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d305      	bcc.n	8005cc2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d903      	bls.n	8005cca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cc8:	e113      	b.n	8005ef2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	2200      	movs	r2, #0
 8005cce:	60bb      	str	r3, [r7, #8]
 8005cd0:	60fa      	str	r2, [r7, #12]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	4a84      	ldr	r2, [pc, #528]	; (8005ee8 <UART_SetConfig+0x5c4>)
 8005cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2200      	movs	r2, #0
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ce8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cec:	f7fa fad8 	bl	80002a0 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	020b      	lsls	r3, r1, #8
 8005d02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d06:	0202      	lsls	r2, r0, #8
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	6849      	ldr	r1, [r1, #4]
 8005d0c:	0849      	lsrs	r1, r1, #1
 8005d0e:	2000      	movs	r0, #0
 8005d10:	460c      	mov	r4, r1
 8005d12:	4605      	mov	r5, r0
 8005d14:	eb12 0804 	adds.w	r8, r2, r4
 8005d18:	eb43 0905 	adc.w	r9, r3, r5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	469a      	mov	sl, r3
 8005d24:	4693      	mov	fp, r2
 8005d26:	4652      	mov	r2, sl
 8005d28:	465b      	mov	r3, fp
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	f7fa fab7 	bl	80002a0 <__aeabi_uldivmod>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4613      	mov	r3, r2
 8005d38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d40:	d308      	bcc.n	8005d54 <UART_SetConfig+0x430>
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d48:	d204      	bcs.n	8005d54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6a3a      	ldr	r2, [r7, #32]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	e0ce      	b.n	8005ef2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d5a:	e0ca      	b.n	8005ef2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d64:	d166      	bne.n	8005e34 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d827      	bhi.n	8005dbe <UART_SetConfig+0x49a>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x450>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005da1 	.word	0x08005da1
 8005d7c:	08005da9 	.word	0x08005da9
 8005d80:	08005dbf 	.word	0x08005dbf
 8005d84:	08005daf 	.word	0x08005daf
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
 8005d94:	08005db7 	.word	0x08005db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d98:	f7fd ff46 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d9e:	e014      	b.n	8005dca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fd ff58 	bl	8003c54 <HAL_RCC_GetPCLK2Freq>
 8005da4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005da6:	e010      	b.n	8005dca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da8:	4b4e      	ldr	r3, [pc, #312]	; (8005ee4 <UART_SetConfig+0x5c0>)
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dac:	e00d      	b.n	8005dca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fd fea3 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8005db2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005db4:	e009      	b.n	8005dca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dbc:	e005      	b.n	8005dca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8090 	beq.w	8005ef2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	4a44      	ldr	r2, [pc, #272]	; (8005ee8 <UART_SetConfig+0x5c4>)
 8005dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005de4:	005a      	lsls	r2, r3, #1
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	441a      	add	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d916      	bls.n	8005e2c <UART_SetConfig+0x508>
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d212      	bcs.n	8005e2c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f023 030f 	bic.w	r3, r3, #15
 8005e0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	8bfb      	ldrh	r3, [r7, #30]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	8bfa      	ldrh	r2, [r7, #30]
 8005e28:	60da      	str	r2, [r3, #12]
 8005e2a:	e062      	b.n	8005ef2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e32:	e05e      	b.n	8005ef2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d828      	bhi.n	8005e8e <UART_SetConfig+0x56a>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x520>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	08005e8f 	.word	0x08005e8f
 8005e54:	08005e7f 	.word	0x08005e7f
 8005e58:	08005e8f 	.word	0x08005e8f
 8005e5c:	08005e8f 	.word	0x08005e8f
 8005e60:	08005e8f 	.word	0x08005e8f
 8005e64:	08005e87 	.word	0x08005e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fd fede 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e6e:	e014      	b.n	8005e9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e70:	f7fd fef0 	bl	8003c54 <HAL_RCC_GetPCLK2Freq>
 8005e74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e76:	e010      	b.n	8005e9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e78:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <UART_SetConfig+0x5c0>)
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e7c:	e00d      	b.n	8005e9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7e:	f7fd fe3b 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8005e82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e84:	e009      	b.n	8005e9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e8c:	e005      	b.n	8005e9a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e98:	bf00      	nop
    }

    if (pclk != 0U)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d028      	beq.n	8005ef2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <UART_SetConfig+0x5c4>)
 8005ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	085b      	lsrs	r3, r3, #1
 8005eb8:	441a      	add	r2, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	2b0f      	cmp	r3, #15
 8005ec8:	d910      	bls.n	8005eec <UART_SetConfig+0x5c8>
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed0:	d20c      	bcs.n	8005eec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60da      	str	r2, [r3, #12]
 8005edc:	e009      	b.n	8005ef2 <UART_SetConfig+0x5ce>
 8005ede:	bf00      	nop
 8005ee0:	40008000 	.word	0x40008000
 8005ee4:	00f42400 	.word	0x00f42400
 8005ee8:	08006e88 	.word	0x08006e88
      }
      else
      {
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3730      	adds	r7, #48	; 0x30
 8005f16:	46bd      	mov	sp, r7
 8005f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01a      	beq.n	8006032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800601a:	d10a      	bne.n	8006032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af02      	add	r7, sp, #8
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006070:	f7fb f830 	bl	80010d4 <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b08      	cmp	r3, #8
 8006082:	d10e      	bne.n	80060a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f82f 	bl	80060f6 <UART_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e025      	b.n	80060ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d10e      	bne.n	80060ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f819 	bl	80060f6 <UART_WaitOnFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e00f      	b.n	80060ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b09c      	sub	sp, #112	; 0x70
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	4613      	mov	r3, r2
 8006104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006106:	e0a9      	b.n	800625c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	f000 80a5 	beq.w	800625c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006112:	f7fa ffdf 	bl	80010d4 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800611e:	429a      	cmp	r2, r3
 8006120:	d302      	bcc.n	8006128 <UART_WaitOnFlagUntilTimeout+0x32>
 8006122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006124:	2b00      	cmp	r3, #0
 8006126:	d140      	bne.n	80061aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800613c:	667b      	str	r3, [r7, #100]	; 0x64
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006148:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800614c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e6      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3308      	adds	r3, #8
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	663b      	str	r3, [r7, #96]	; 0x60
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800617a:	64ba      	str	r2, [r7, #72]	; 0x48
 800617c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e5      	bne.n	800615a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e069      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d051      	beq.n	800625c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c6:	d149      	bne.n	800625c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
 80061f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	613b      	str	r3, [r7, #16]
   return(result);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	66bb      	str	r3, [r7, #104]	; 0x68
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006224:	623a      	str	r2, [r7, #32]
 8006226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	69f9      	ldr	r1, [r7, #28]
 800622a:	6a3a      	ldr	r2, [r7, #32]
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	61bb      	str	r3, [r7, #24]
   return(result);
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e5      	bne.n	8006204 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e010      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69da      	ldr	r2, [r3, #28]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	429a      	cmp	r2, r3
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	429a      	cmp	r2, r3
 8006278:	f43f af46 	beq.w	8006108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3770      	adds	r7, #112	; 0x70
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_UARTEx_DisableFifoMode+0x16>
 8006298:	2302      	movs	r3, #2
 800629a:	e027      	b.n	80062ec <HAL_UARTEx_DisableFifoMode+0x66>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800630c:	2302      	movs	r3, #2
 800630e:	e02d      	b.n	800636c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	; 0x24
 800631c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f84f 	bl	80063f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006388:	2302      	movs	r3, #2
 800638a:	e02d      	b.n	80063e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2224      	movs	r2, #36	; 0x24
 8006398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f811 	bl	80063f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d108      	bne.n	8006412 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006410:	e031      	b.n	8006476 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006412:	2308      	movs	r3, #8
 8006414:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006416:	2308      	movs	r3, #8
 8006418:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	0e5b      	lsrs	r3, r3, #25
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	0f5b      	lsrs	r3, r3, #29
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	7b3a      	ldrb	r2, [r7, #12]
 800643e:	4911      	ldr	r1, [pc, #68]	; (8006484 <UARTEx_SetNbDataToProcess+0x94>)
 8006440:	5c8a      	ldrb	r2, [r1, r2]
 8006442:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006446:	7b3a      	ldrb	r2, [r7, #12]
 8006448:	490f      	ldr	r1, [pc, #60]	; (8006488 <UARTEx_SetNbDataToProcess+0x98>)
 800644a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800644c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	7b7a      	ldrb	r2, [r7, #13]
 800645c:	4909      	ldr	r1, [pc, #36]	; (8006484 <UARTEx_SetNbDataToProcess+0x94>)
 800645e:	5c8a      	ldrb	r2, [r1, r2]
 8006460:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006464:	7b7a      	ldrb	r2, [r7, #13]
 8006466:	4908      	ldr	r1, [pc, #32]	; (8006488 <UARTEx_SetNbDataToProcess+0x98>)
 8006468:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800646a:	fb93 f3f2 	sdiv	r3, r3, r2
 800646e:	b29a      	uxth	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	08006ea0 	.word	0x08006ea0
 8006488:	08006ea8 	.word	0x08006ea8

0800648c <__errno>:
 800648c:	4b01      	ldr	r3, [pc, #4]	; (8006494 <__errno+0x8>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000000c 	.word	0x2000000c

08006498 <__libc_init_array>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4d0d      	ldr	r5, [pc, #52]	; (80064d0 <__libc_init_array+0x38>)
 800649c:	4c0d      	ldr	r4, [pc, #52]	; (80064d4 <__libc_init_array+0x3c>)
 800649e:	1b64      	subs	r4, r4, r5
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	2600      	movs	r6, #0
 80064a4:	42a6      	cmp	r6, r4
 80064a6:	d109      	bne.n	80064bc <__libc_init_array+0x24>
 80064a8:	4d0b      	ldr	r5, [pc, #44]	; (80064d8 <__libc_init_array+0x40>)
 80064aa:	4c0c      	ldr	r4, [pc, #48]	; (80064dc <__libc_init_array+0x44>)
 80064ac:	f000 fc8e 	bl	8006dcc <_init>
 80064b0:	1b64      	subs	r4, r4, r5
 80064b2:	10a4      	asrs	r4, r4, #2
 80064b4:	2600      	movs	r6, #0
 80064b6:	42a6      	cmp	r6, r4
 80064b8:	d105      	bne.n	80064c6 <__libc_init_array+0x2e>
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c0:	4798      	blx	r3
 80064c2:	3601      	adds	r6, #1
 80064c4:	e7ee      	b.n	80064a4 <__libc_init_array+0xc>
 80064c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ca:	4798      	blx	r3
 80064cc:	3601      	adds	r6, #1
 80064ce:	e7f2      	b.n	80064b6 <__libc_init_array+0x1e>
 80064d0:	08006eec 	.word	0x08006eec
 80064d4:	08006eec 	.word	0x08006eec
 80064d8:	08006eec 	.word	0x08006eec
 80064dc:	08006ef0 	.word	0x08006ef0

080064e0 <memset>:
 80064e0:	4402      	add	r2, r0
 80064e2:	4603      	mov	r3, r0
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d100      	bne.n	80064ea <memset+0xa>
 80064e8:	4770      	bx	lr
 80064ea:	f803 1b01 	strb.w	r1, [r3], #1
 80064ee:	e7f9      	b.n	80064e4 <memset+0x4>

080064f0 <siprintf>:
 80064f0:	b40e      	push	{r1, r2, r3}
 80064f2:	b500      	push	{lr}
 80064f4:	b09c      	sub	sp, #112	; 0x70
 80064f6:	ab1d      	add	r3, sp, #116	; 0x74
 80064f8:	9002      	str	r0, [sp, #8]
 80064fa:	9006      	str	r0, [sp, #24]
 80064fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006500:	4809      	ldr	r0, [pc, #36]	; (8006528 <siprintf+0x38>)
 8006502:	9107      	str	r1, [sp, #28]
 8006504:	9104      	str	r1, [sp, #16]
 8006506:	4909      	ldr	r1, [pc, #36]	; (800652c <siprintf+0x3c>)
 8006508:	f853 2b04 	ldr.w	r2, [r3], #4
 800650c:	9105      	str	r1, [sp, #20]
 800650e:	6800      	ldr	r0, [r0, #0]
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	a902      	add	r1, sp, #8
 8006514:	f000 f868 	bl	80065e8 <_svfiprintf_r>
 8006518:	9b02      	ldr	r3, [sp, #8]
 800651a:	2200      	movs	r2, #0
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	b01c      	add	sp, #112	; 0x70
 8006520:	f85d eb04 	ldr.w	lr, [sp], #4
 8006524:	b003      	add	sp, #12
 8006526:	4770      	bx	lr
 8006528:	2000000c 	.word	0x2000000c
 800652c:	ffff0208 	.word	0xffff0208

08006530 <__ssputs_r>:
 8006530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	688e      	ldr	r6, [r1, #8]
 8006536:	429e      	cmp	r6, r3
 8006538:	4682      	mov	sl, r0
 800653a:	460c      	mov	r4, r1
 800653c:	4690      	mov	r8, r2
 800653e:	461f      	mov	r7, r3
 8006540:	d838      	bhi.n	80065b4 <__ssputs_r+0x84>
 8006542:	898a      	ldrh	r2, [r1, #12]
 8006544:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006548:	d032      	beq.n	80065b0 <__ssputs_r+0x80>
 800654a:	6825      	ldr	r5, [r4, #0]
 800654c:	6909      	ldr	r1, [r1, #16]
 800654e:	eba5 0901 	sub.w	r9, r5, r1
 8006552:	6965      	ldr	r5, [r4, #20]
 8006554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800655c:	3301      	adds	r3, #1
 800655e:	444b      	add	r3, r9
 8006560:	106d      	asrs	r5, r5, #1
 8006562:	429d      	cmp	r5, r3
 8006564:	bf38      	it	cc
 8006566:	461d      	movcc	r5, r3
 8006568:	0553      	lsls	r3, r2, #21
 800656a:	d531      	bpl.n	80065d0 <__ssputs_r+0xa0>
 800656c:	4629      	mov	r1, r5
 800656e:	f000 fb63 	bl	8006c38 <_malloc_r>
 8006572:	4606      	mov	r6, r0
 8006574:	b950      	cbnz	r0, 800658c <__ssputs_r+0x5c>
 8006576:	230c      	movs	r3, #12
 8006578:	f8ca 3000 	str.w	r3, [sl]
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006582:	81a3      	strh	r3, [r4, #12]
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658c:	6921      	ldr	r1, [r4, #16]
 800658e:	464a      	mov	r2, r9
 8006590:	f000 fabe 	bl	8006b10 <memcpy>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800659a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659e:	81a3      	strh	r3, [r4, #12]
 80065a0:	6126      	str	r6, [r4, #16]
 80065a2:	6165      	str	r5, [r4, #20]
 80065a4:	444e      	add	r6, r9
 80065a6:	eba5 0509 	sub.w	r5, r5, r9
 80065aa:	6026      	str	r6, [r4, #0]
 80065ac:	60a5      	str	r5, [r4, #8]
 80065ae:	463e      	mov	r6, r7
 80065b0:	42be      	cmp	r6, r7
 80065b2:	d900      	bls.n	80065b6 <__ssputs_r+0x86>
 80065b4:	463e      	mov	r6, r7
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	4632      	mov	r2, r6
 80065ba:	4641      	mov	r1, r8
 80065bc:	f000 fab6 	bl	8006b2c <memmove>
 80065c0:	68a3      	ldr	r3, [r4, #8]
 80065c2:	1b9b      	subs	r3, r3, r6
 80065c4:	60a3      	str	r3, [r4, #8]
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	4433      	add	r3, r6
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	2000      	movs	r0, #0
 80065ce:	e7db      	b.n	8006588 <__ssputs_r+0x58>
 80065d0:	462a      	mov	r2, r5
 80065d2:	f000 fba5 	bl	8006d20 <_realloc_r>
 80065d6:	4606      	mov	r6, r0
 80065d8:	2800      	cmp	r0, #0
 80065da:	d1e1      	bne.n	80065a0 <__ssputs_r+0x70>
 80065dc:	6921      	ldr	r1, [r4, #16]
 80065de:	4650      	mov	r0, sl
 80065e0:	f000 fabe 	bl	8006b60 <_free_r>
 80065e4:	e7c7      	b.n	8006576 <__ssputs_r+0x46>
	...

080065e8 <_svfiprintf_r>:
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	4698      	mov	r8, r3
 80065ee:	898b      	ldrh	r3, [r1, #12]
 80065f0:	061b      	lsls	r3, r3, #24
 80065f2:	b09d      	sub	sp, #116	; 0x74
 80065f4:	4607      	mov	r7, r0
 80065f6:	460d      	mov	r5, r1
 80065f8:	4614      	mov	r4, r2
 80065fa:	d50e      	bpl.n	800661a <_svfiprintf_r+0x32>
 80065fc:	690b      	ldr	r3, [r1, #16]
 80065fe:	b963      	cbnz	r3, 800661a <_svfiprintf_r+0x32>
 8006600:	2140      	movs	r1, #64	; 0x40
 8006602:	f000 fb19 	bl	8006c38 <_malloc_r>
 8006606:	6028      	str	r0, [r5, #0]
 8006608:	6128      	str	r0, [r5, #16]
 800660a:	b920      	cbnz	r0, 8006616 <_svfiprintf_r+0x2e>
 800660c:	230c      	movs	r3, #12
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	f04f 30ff 	mov.w	r0, #4294967295
 8006614:	e0d1      	b.n	80067ba <_svfiprintf_r+0x1d2>
 8006616:	2340      	movs	r3, #64	; 0x40
 8006618:	616b      	str	r3, [r5, #20]
 800661a:	2300      	movs	r3, #0
 800661c:	9309      	str	r3, [sp, #36]	; 0x24
 800661e:	2320      	movs	r3, #32
 8006620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006624:	f8cd 800c 	str.w	r8, [sp, #12]
 8006628:	2330      	movs	r3, #48	; 0x30
 800662a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067d4 <_svfiprintf_r+0x1ec>
 800662e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006632:	f04f 0901 	mov.w	r9, #1
 8006636:	4623      	mov	r3, r4
 8006638:	469a      	mov	sl, r3
 800663a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800663e:	b10a      	cbz	r2, 8006644 <_svfiprintf_r+0x5c>
 8006640:	2a25      	cmp	r2, #37	; 0x25
 8006642:	d1f9      	bne.n	8006638 <_svfiprintf_r+0x50>
 8006644:	ebba 0b04 	subs.w	fp, sl, r4
 8006648:	d00b      	beq.n	8006662 <_svfiprintf_r+0x7a>
 800664a:	465b      	mov	r3, fp
 800664c:	4622      	mov	r2, r4
 800664e:	4629      	mov	r1, r5
 8006650:	4638      	mov	r0, r7
 8006652:	f7ff ff6d 	bl	8006530 <__ssputs_r>
 8006656:	3001      	adds	r0, #1
 8006658:	f000 80aa 	beq.w	80067b0 <_svfiprintf_r+0x1c8>
 800665c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800665e:	445a      	add	r2, fp
 8006660:	9209      	str	r2, [sp, #36]	; 0x24
 8006662:	f89a 3000 	ldrb.w	r3, [sl]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 80a2 	beq.w	80067b0 <_svfiprintf_r+0x1c8>
 800666c:	2300      	movs	r3, #0
 800666e:	f04f 32ff 	mov.w	r2, #4294967295
 8006672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006676:	f10a 0a01 	add.w	sl, sl, #1
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	9307      	str	r3, [sp, #28]
 800667e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006682:	931a      	str	r3, [sp, #104]	; 0x68
 8006684:	4654      	mov	r4, sl
 8006686:	2205      	movs	r2, #5
 8006688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668c:	4851      	ldr	r0, [pc, #324]	; (80067d4 <_svfiprintf_r+0x1ec>)
 800668e:	f7f9 fdb7 	bl	8000200 <memchr>
 8006692:	9a04      	ldr	r2, [sp, #16]
 8006694:	b9d8      	cbnz	r0, 80066ce <_svfiprintf_r+0xe6>
 8006696:	06d0      	lsls	r0, r2, #27
 8006698:	bf44      	itt	mi
 800669a:	2320      	movmi	r3, #32
 800669c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a0:	0711      	lsls	r1, r2, #28
 80066a2:	bf44      	itt	mi
 80066a4:	232b      	movmi	r3, #43	; 0x2b
 80066a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066aa:	f89a 3000 	ldrb.w	r3, [sl]
 80066ae:	2b2a      	cmp	r3, #42	; 0x2a
 80066b0:	d015      	beq.n	80066de <_svfiprintf_r+0xf6>
 80066b2:	9a07      	ldr	r2, [sp, #28]
 80066b4:	4654      	mov	r4, sl
 80066b6:	2000      	movs	r0, #0
 80066b8:	f04f 0c0a 	mov.w	ip, #10
 80066bc:	4621      	mov	r1, r4
 80066be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c2:	3b30      	subs	r3, #48	; 0x30
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	d94e      	bls.n	8006766 <_svfiprintf_r+0x17e>
 80066c8:	b1b0      	cbz	r0, 80066f8 <_svfiprintf_r+0x110>
 80066ca:	9207      	str	r2, [sp, #28]
 80066cc:	e014      	b.n	80066f8 <_svfiprintf_r+0x110>
 80066ce:	eba0 0308 	sub.w	r3, r0, r8
 80066d2:	fa09 f303 	lsl.w	r3, r9, r3
 80066d6:	4313      	orrs	r3, r2
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	46a2      	mov	sl, r4
 80066dc:	e7d2      	b.n	8006684 <_svfiprintf_r+0x9c>
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	1d19      	adds	r1, r3, #4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	9103      	str	r1, [sp, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bfbb      	ittet	lt
 80066ea:	425b      	neglt	r3, r3
 80066ec:	f042 0202 	orrlt.w	r2, r2, #2
 80066f0:	9307      	strge	r3, [sp, #28]
 80066f2:	9307      	strlt	r3, [sp, #28]
 80066f4:	bfb8      	it	lt
 80066f6:	9204      	strlt	r2, [sp, #16]
 80066f8:	7823      	ldrb	r3, [r4, #0]
 80066fa:	2b2e      	cmp	r3, #46	; 0x2e
 80066fc:	d10c      	bne.n	8006718 <_svfiprintf_r+0x130>
 80066fe:	7863      	ldrb	r3, [r4, #1]
 8006700:	2b2a      	cmp	r3, #42	; 0x2a
 8006702:	d135      	bne.n	8006770 <_svfiprintf_r+0x188>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	1d1a      	adds	r2, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	9203      	str	r2, [sp, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	bfb8      	it	lt
 8006710:	f04f 33ff 	movlt.w	r3, #4294967295
 8006714:	3402      	adds	r4, #2
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067e4 <_svfiprintf_r+0x1fc>
 800671c:	7821      	ldrb	r1, [r4, #0]
 800671e:	2203      	movs	r2, #3
 8006720:	4650      	mov	r0, sl
 8006722:	f7f9 fd6d 	bl	8000200 <memchr>
 8006726:	b140      	cbz	r0, 800673a <_svfiprintf_r+0x152>
 8006728:	2340      	movs	r3, #64	; 0x40
 800672a:	eba0 000a 	sub.w	r0, r0, sl
 800672e:	fa03 f000 	lsl.w	r0, r3, r0
 8006732:	9b04      	ldr	r3, [sp, #16]
 8006734:	4303      	orrs	r3, r0
 8006736:	3401      	adds	r4, #1
 8006738:	9304      	str	r3, [sp, #16]
 800673a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673e:	4826      	ldr	r0, [pc, #152]	; (80067d8 <_svfiprintf_r+0x1f0>)
 8006740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006744:	2206      	movs	r2, #6
 8006746:	f7f9 fd5b 	bl	8000200 <memchr>
 800674a:	2800      	cmp	r0, #0
 800674c:	d038      	beq.n	80067c0 <_svfiprintf_r+0x1d8>
 800674e:	4b23      	ldr	r3, [pc, #140]	; (80067dc <_svfiprintf_r+0x1f4>)
 8006750:	bb1b      	cbnz	r3, 800679a <_svfiprintf_r+0x1b2>
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	3307      	adds	r3, #7
 8006756:	f023 0307 	bic.w	r3, r3, #7
 800675a:	3308      	adds	r3, #8
 800675c:	9303      	str	r3, [sp, #12]
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	4433      	add	r3, r6
 8006762:	9309      	str	r3, [sp, #36]	; 0x24
 8006764:	e767      	b.n	8006636 <_svfiprintf_r+0x4e>
 8006766:	fb0c 3202 	mla	r2, ip, r2, r3
 800676a:	460c      	mov	r4, r1
 800676c:	2001      	movs	r0, #1
 800676e:	e7a5      	b.n	80066bc <_svfiprintf_r+0xd4>
 8006770:	2300      	movs	r3, #0
 8006772:	3401      	adds	r4, #1
 8006774:	9305      	str	r3, [sp, #20]
 8006776:	4619      	mov	r1, r3
 8006778:	f04f 0c0a 	mov.w	ip, #10
 800677c:	4620      	mov	r0, r4
 800677e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006782:	3a30      	subs	r2, #48	; 0x30
 8006784:	2a09      	cmp	r2, #9
 8006786:	d903      	bls.n	8006790 <_svfiprintf_r+0x1a8>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0c5      	beq.n	8006718 <_svfiprintf_r+0x130>
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	e7c3      	b.n	8006718 <_svfiprintf_r+0x130>
 8006790:	fb0c 2101 	mla	r1, ip, r1, r2
 8006794:	4604      	mov	r4, r0
 8006796:	2301      	movs	r3, #1
 8006798:	e7f0      	b.n	800677c <_svfiprintf_r+0x194>
 800679a:	ab03      	add	r3, sp, #12
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	462a      	mov	r2, r5
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <_svfiprintf_r+0x1f8>)
 80067a2:	a904      	add	r1, sp, #16
 80067a4:	4638      	mov	r0, r7
 80067a6:	f3af 8000 	nop.w
 80067aa:	1c42      	adds	r2, r0, #1
 80067ac:	4606      	mov	r6, r0
 80067ae:	d1d6      	bne.n	800675e <_svfiprintf_r+0x176>
 80067b0:	89ab      	ldrh	r3, [r5, #12]
 80067b2:	065b      	lsls	r3, r3, #25
 80067b4:	f53f af2c 	bmi.w	8006610 <_svfiprintf_r+0x28>
 80067b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ba:	b01d      	add	sp, #116	; 0x74
 80067bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c0:	ab03      	add	r3, sp, #12
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	462a      	mov	r2, r5
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <_svfiprintf_r+0x1f8>)
 80067c8:	a904      	add	r1, sp, #16
 80067ca:	4638      	mov	r0, r7
 80067cc:	f000 f87a 	bl	80068c4 <_printf_i>
 80067d0:	e7eb      	b.n	80067aa <_svfiprintf_r+0x1c2>
 80067d2:	bf00      	nop
 80067d4:	08006eb0 	.word	0x08006eb0
 80067d8:	08006eba 	.word	0x08006eba
 80067dc:	00000000 	.word	0x00000000
 80067e0:	08006531 	.word	0x08006531
 80067e4:	08006eb6 	.word	0x08006eb6

080067e8 <_printf_common>:
 80067e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	4616      	mov	r6, r2
 80067ee:	4699      	mov	r9, r3
 80067f0:	688a      	ldr	r2, [r1, #8]
 80067f2:	690b      	ldr	r3, [r1, #16]
 80067f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	bfb8      	it	lt
 80067fc:	4613      	movlt	r3, r2
 80067fe:	6033      	str	r3, [r6, #0]
 8006800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006804:	4607      	mov	r7, r0
 8006806:	460c      	mov	r4, r1
 8006808:	b10a      	cbz	r2, 800680e <_printf_common+0x26>
 800680a:	3301      	adds	r3, #1
 800680c:	6033      	str	r3, [r6, #0]
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	0699      	lsls	r1, r3, #26
 8006812:	bf42      	ittt	mi
 8006814:	6833      	ldrmi	r3, [r6, #0]
 8006816:	3302      	addmi	r3, #2
 8006818:	6033      	strmi	r3, [r6, #0]
 800681a:	6825      	ldr	r5, [r4, #0]
 800681c:	f015 0506 	ands.w	r5, r5, #6
 8006820:	d106      	bne.n	8006830 <_printf_common+0x48>
 8006822:	f104 0a19 	add.w	sl, r4, #25
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	6832      	ldr	r2, [r6, #0]
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	42ab      	cmp	r3, r5
 800682e:	dc26      	bgt.n	800687e <_printf_common+0x96>
 8006830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006834:	1e13      	subs	r3, r2, #0
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	bf18      	it	ne
 800683a:	2301      	movne	r3, #1
 800683c:	0692      	lsls	r2, r2, #26
 800683e:	d42b      	bmi.n	8006898 <_printf_common+0xb0>
 8006840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006844:	4649      	mov	r1, r9
 8006846:	4638      	mov	r0, r7
 8006848:	47c0      	blx	r8
 800684a:	3001      	adds	r0, #1
 800684c:	d01e      	beq.n	800688c <_printf_common+0xa4>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	68e5      	ldr	r5, [r4, #12]
 8006852:	6832      	ldr	r2, [r6, #0]
 8006854:	f003 0306 	and.w	r3, r3, #6
 8006858:	2b04      	cmp	r3, #4
 800685a:	bf08      	it	eq
 800685c:	1aad      	subeq	r5, r5, r2
 800685e:	68a3      	ldr	r3, [r4, #8]
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	bf0c      	ite	eq
 8006864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006868:	2500      	movne	r5, #0
 800686a:	4293      	cmp	r3, r2
 800686c:	bfc4      	itt	gt
 800686e:	1a9b      	subgt	r3, r3, r2
 8006870:	18ed      	addgt	r5, r5, r3
 8006872:	2600      	movs	r6, #0
 8006874:	341a      	adds	r4, #26
 8006876:	42b5      	cmp	r5, r6
 8006878:	d11a      	bne.n	80068b0 <_printf_common+0xc8>
 800687a:	2000      	movs	r0, #0
 800687c:	e008      	b.n	8006890 <_printf_common+0xa8>
 800687e:	2301      	movs	r3, #1
 8006880:	4652      	mov	r2, sl
 8006882:	4649      	mov	r1, r9
 8006884:	4638      	mov	r0, r7
 8006886:	47c0      	blx	r8
 8006888:	3001      	adds	r0, #1
 800688a:	d103      	bne.n	8006894 <_printf_common+0xac>
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
 8006890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006894:	3501      	adds	r5, #1
 8006896:	e7c6      	b.n	8006826 <_printf_common+0x3e>
 8006898:	18e1      	adds	r1, r4, r3
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	2030      	movs	r0, #48	; 0x30
 800689e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068a2:	4422      	add	r2, r4
 80068a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ac:	3302      	adds	r3, #2
 80068ae:	e7c7      	b.n	8006840 <_printf_common+0x58>
 80068b0:	2301      	movs	r3, #1
 80068b2:	4622      	mov	r2, r4
 80068b4:	4649      	mov	r1, r9
 80068b6:	4638      	mov	r0, r7
 80068b8:	47c0      	blx	r8
 80068ba:	3001      	adds	r0, #1
 80068bc:	d0e6      	beq.n	800688c <_printf_common+0xa4>
 80068be:	3601      	adds	r6, #1
 80068c0:	e7d9      	b.n	8006876 <_printf_common+0x8e>
	...

080068c4 <_printf_i>:
 80068c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c8:	7e0f      	ldrb	r7, [r1, #24]
 80068ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068cc:	2f78      	cmp	r7, #120	; 0x78
 80068ce:	4691      	mov	r9, r2
 80068d0:	4680      	mov	r8, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	469a      	mov	sl, r3
 80068d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068da:	d807      	bhi.n	80068ec <_printf_i+0x28>
 80068dc:	2f62      	cmp	r7, #98	; 0x62
 80068de:	d80a      	bhi.n	80068f6 <_printf_i+0x32>
 80068e0:	2f00      	cmp	r7, #0
 80068e2:	f000 80d8 	beq.w	8006a96 <_printf_i+0x1d2>
 80068e6:	2f58      	cmp	r7, #88	; 0x58
 80068e8:	f000 80a3 	beq.w	8006a32 <_printf_i+0x16e>
 80068ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068f4:	e03a      	b.n	800696c <_printf_i+0xa8>
 80068f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068fa:	2b15      	cmp	r3, #21
 80068fc:	d8f6      	bhi.n	80068ec <_printf_i+0x28>
 80068fe:	a101      	add	r1, pc, #4	; (adr r1, 8006904 <_printf_i+0x40>)
 8006900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006904:	0800695d 	.word	0x0800695d
 8006908:	08006971 	.word	0x08006971
 800690c:	080068ed 	.word	0x080068ed
 8006910:	080068ed 	.word	0x080068ed
 8006914:	080068ed 	.word	0x080068ed
 8006918:	080068ed 	.word	0x080068ed
 800691c:	08006971 	.word	0x08006971
 8006920:	080068ed 	.word	0x080068ed
 8006924:	080068ed 	.word	0x080068ed
 8006928:	080068ed 	.word	0x080068ed
 800692c:	080068ed 	.word	0x080068ed
 8006930:	08006a7d 	.word	0x08006a7d
 8006934:	080069a1 	.word	0x080069a1
 8006938:	08006a5f 	.word	0x08006a5f
 800693c:	080068ed 	.word	0x080068ed
 8006940:	080068ed 	.word	0x080068ed
 8006944:	08006a9f 	.word	0x08006a9f
 8006948:	080068ed 	.word	0x080068ed
 800694c:	080069a1 	.word	0x080069a1
 8006950:	080068ed 	.word	0x080068ed
 8006954:	080068ed 	.word	0x080068ed
 8006958:	08006a67 	.word	0x08006a67
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	1d1a      	adds	r2, r3, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	602a      	str	r2, [r5, #0]
 8006964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800696c:	2301      	movs	r3, #1
 800696e:	e0a3      	b.n	8006ab8 <_printf_i+0x1f4>
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	6829      	ldr	r1, [r5, #0]
 8006974:	0606      	lsls	r6, r0, #24
 8006976:	f101 0304 	add.w	r3, r1, #4
 800697a:	d50a      	bpl.n	8006992 <_printf_i+0xce>
 800697c:	680e      	ldr	r6, [r1, #0]
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	2e00      	cmp	r6, #0
 8006982:	da03      	bge.n	800698c <_printf_i+0xc8>
 8006984:	232d      	movs	r3, #45	; 0x2d
 8006986:	4276      	negs	r6, r6
 8006988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800698c:	485e      	ldr	r0, [pc, #376]	; (8006b08 <_printf_i+0x244>)
 800698e:	230a      	movs	r3, #10
 8006990:	e019      	b.n	80069c6 <_printf_i+0x102>
 8006992:	680e      	ldr	r6, [r1, #0]
 8006994:	602b      	str	r3, [r5, #0]
 8006996:	f010 0f40 	tst.w	r0, #64	; 0x40
 800699a:	bf18      	it	ne
 800699c:	b236      	sxthne	r6, r6
 800699e:	e7ef      	b.n	8006980 <_printf_i+0xbc>
 80069a0:	682b      	ldr	r3, [r5, #0]
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	1d19      	adds	r1, r3, #4
 80069a6:	6029      	str	r1, [r5, #0]
 80069a8:	0601      	lsls	r1, r0, #24
 80069aa:	d501      	bpl.n	80069b0 <_printf_i+0xec>
 80069ac:	681e      	ldr	r6, [r3, #0]
 80069ae:	e002      	b.n	80069b6 <_printf_i+0xf2>
 80069b0:	0646      	lsls	r6, r0, #25
 80069b2:	d5fb      	bpl.n	80069ac <_printf_i+0xe8>
 80069b4:	881e      	ldrh	r6, [r3, #0]
 80069b6:	4854      	ldr	r0, [pc, #336]	; (8006b08 <_printf_i+0x244>)
 80069b8:	2f6f      	cmp	r7, #111	; 0x6f
 80069ba:	bf0c      	ite	eq
 80069bc:	2308      	moveq	r3, #8
 80069be:	230a      	movne	r3, #10
 80069c0:	2100      	movs	r1, #0
 80069c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069c6:	6865      	ldr	r5, [r4, #4]
 80069c8:	60a5      	str	r5, [r4, #8]
 80069ca:	2d00      	cmp	r5, #0
 80069cc:	bfa2      	ittt	ge
 80069ce:	6821      	ldrge	r1, [r4, #0]
 80069d0:	f021 0104 	bicge.w	r1, r1, #4
 80069d4:	6021      	strge	r1, [r4, #0]
 80069d6:	b90e      	cbnz	r6, 80069dc <_printf_i+0x118>
 80069d8:	2d00      	cmp	r5, #0
 80069da:	d04d      	beq.n	8006a78 <_printf_i+0x1b4>
 80069dc:	4615      	mov	r5, r2
 80069de:	fbb6 f1f3 	udiv	r1, r6, r3
 80069e2:	fb03 6711 	mls	r7, r3, r1, r6
 80069e6:	5dc7      	ldrb	r7, [r0, r7]
 80069e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069ec:	4637      	mov	r7, r6
 80069ee:	42bb      	cmp	r3, r7
 80069f0:	460e      	mov	r6, r1
 80069f2:	d9f4      	bls.n	80069de <_printf_i+0x11a>
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d10b      	bne.n	8006a10 <_printf_i+0x14c>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	07de      	lsls	r6, r3, #31
 80069fc:	d508      	bpl.n	8006a10 <_printf_i+0x14c>
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	6861      	ldr	r1, [r4, #4]
 8006a02:	4299      	cmp	r1, r3
 8006a04:	bfde      	ittt	le
 8006a06:	2330      	movle	r3, #48	; 0x30
 8006a08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a10:	1b52      	subs	r2, r2, r5
 8006a12:	6122      	str	r2, [r4, #16]
 8006a14:	f8cd a000 	str.w	sl, [sp]
 8006a18:	464b      	mov	r3, r9
 8006a1a:	aa03      	add	r2, sp, #12
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4640      	mov	r0, r8
 8006a20:	f7ff fee2 	bl	80067e8 <_printf_common>
 8006a24:	3001      	adds	r0, #1
 8006a26:	d14c      	bne.n	8006ac2 <_printf_i+0x1fe>
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2c:	b004      	add	sp, #16
 8006a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a32:	4835      	ldr	r0, [pc, #212]	; (8006b08 <_printf_i+0x244>)
 8006a34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a38:	6829      	ldr	r1, [r5, #0]
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a40:	6029      	str	r1, [r5, #0]
 8006a42:	061d      	lsls	r5, r3, #24
 8006a44:	d514      	bpl.n	8006a70 <_printf_i+0x1ac>
 8006a46:	07df      	lsls	r7, r3, #31
 8006a48:	bf44      	itt	mi
 8006a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a4e:	6023      	strmi	r3, [r4, #0]
 8006a50:	b91e      	cbnz	r6, 8006a5a <_printf_i+0x196>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	f023 0320 	bic.w	r3, r3, #32
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	e7b0      	b.n	80069c0 <_printf_i+0xfc>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	f043 0320 	orr.w	r3, r3, #32
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	2378      	movs	r3, #120	; 0x78
 8006a68:	4828      	ldr	r0, [pc, #160]	; (8006b0c <_printf_i+0x248>)
 8006a6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a6e:	e7e3      	b.n	8006a38 <_printf_i+0x174>
 8006a70:	0659      	lsls	r1, r3, #25
 8006a72:	bf48      	it	mi
 8006a74:	b2b6      	uxthmi	r6, r6
 8006a76:	e7e6      	b.n	8006a46 <_printf_i+0x182>
 8006a78:	4615      	mov	r5, r2
 8006a7a:	e7bb      	b.n	80069f4 <_printf_i+0x130>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	6826      	ldr	r6, [r4, #0]
 8006a80:	6961      	ldr	r1, [r4, #20]
 8006a82:	1d18      	adds	r0, r3, #4
 8006a84:	6028      	str	r0, [r5, #0]
 8006a86:	0635      	lsls	r5, r6, #24
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	d501      	bpl.n	8006a90 <_printf_i+0x1cc>
 8006a8c:	6019      	str	r1, [r3, #0]
 8006a8e:	e002      	b.n	8006a96 <_printf_i+0x1d2>
 8006a90:	0670      	lsls	r0, r6, #25
 8006a92:	d5fb      	bpl.n	8006a8c <_printf_i+0x1c8>
 8006a94:	8019      	strh	r1, [r3, #0]
 8006a96:	2300      	movs	r3, #0
 8006a98:	6123      	str	r3, [r4, #16]
 8006a9a:	4615      	mov	r5, r2
 8006a9c:	e7ba      	b.n	8006a14 <_printf_i+0x150>
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	1d1a      	adds	r2, r3, #4
 8006aa2:	602a      	str	r2, [r5, #0]
 8006aa4:	681d      	ldr	r5, [r3, #0]
 8006aa6:	6862      	ldr	r2, [r4, #4]
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f7f9 fba8 	bl	8000200 <memchr>
 8006ab0:	b108      	cbz	r0, 8006ab6 <_printf_i+0x1f2>
 8006ab2:	1b40      	subs	r0, r0, r5
 8006ab4:	6060      	str	r0, [r4, #4]
 8006ab6:	6863      	ldr	r3, [r4, #4]
 8006ab8:	6123      	str	r3, [r4, #16]
 8006aba:	2300      	movs	r3, #0
 8006abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac0:	e7a8      	b.n	8006a14 <_printf_i+0x150>
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	462a      	mov	r2, r5
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	4640      	mov	r0, r8
 8006aca:	47d0      	blx	sl
 8006acc:	3001      	adds	r0, #1
 8006ace:	d0ab      	beq.n	8006a28 <_printf_i+0x164>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	079b      	lsls	r3, r3, #30
 8006ad4:	d413      	bmi.n	8006afe <_printf_i+0x23a>
 8006ad6:	68e0      	ldr	r0, [r4, #12]
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	4298      	cmp	r0, r3
 8006adc:	bfb8      	it	lt
 8006ade:	4618      	movlt	r0, r3
 8006ae0:	e7a4      	b.n	8006a2c <_printf_i+0x168>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	4640      	mov	r0, r8
 8006aea:	47d0      	blx	sl
 8006aec:	3001      	adds	r0, #1
 8006aee:	d09b      	beq.n	8006a28 <_printf_i+0x164>
 8006af0:	3501      	adds	r5, #1
 8006af2:	68e3      	ldr	r3, [r4, #12]
 8006af4:	9903      	ldr	r1, [sp, #12]
 8006af6:	1a5b      	subs	r3, r3, r1
 8006af8:	42ab      	cmp	r3, r5
 8006afa:	dcf2      	bgt.n	8006ae2 <_printf_i+0x21e>
 8006afc:	e7eb      	b.n	8006ad6 <_printf_i+0x212>
 8006afe:	2500      	movs	r5, #0
 8006b00:	f104 0619 	add.w	r6, r4, #25
 8006b04:	e7f5      	b.n	8006af2 <_printf_i+0x22e>
 8006b06:	bf00      	nop
 8006b08:	08006ec1 	.word	0x08006ec1
 8006b0c:	08006ed2 	.word	0x08006ed2

08006b10 <memcpy>:
 8006b10:	440a      	add	r2, r1
 8006b12:	4291      	cmp	r1, r2
 8006b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b18:	d100      	bne.n	8006b1c <memcpy+0xc>
 8006b1a:	4770      	bx	lr
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b26:	4291      	cmp	r1, r2
 8006b28:	d1f9      	bne.n	8006b1e <memcpy+0xe>
 8006b2a:	bd10      	pop	{r4, pc}

08006b2c <memmove>:
 8006b2c:	4288      	cmp	r0, r1
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	eb01 0402 	add.w	r4, r1, r2
 8006b34:	d902      	bls.n	8006b3c <memmove+0x10>
 8006b36:	4284      	cmp	r4, r0
 8006b38:	4623      	mov	r3, r4
 8006b3a:	d807      	bhi.n	8006b4c <memmove+0x20>
 8006b3c:	1e43      	subs	r3, r0, #1
 8006b3e:	42a1      	cmp	r1, r4
 8006b40:	d008      	beq.n	8006b54 <memmove+0x28>
 8006b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b4a:	e7f8      	b.n	8006b3e <memmove+0x12>
 8006b4c:	4402      	add	r2, r0
 8006b4e:	4601      	mov	r1, r0
 8006b50:	428a      	cmp	r2, r1
 8006b52:	d100      	bne.n	8006b56 <memmove+0x2a>
 8006b54:	bd10      	pop	{r4, pc}
 8006b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b5e:	e7f7      	b.n	8006b50 <memmove+0x24>

08006b60 <_free_r>:
 8006b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b62:	2900      	cmp	r1, #0
 8006b64:	d044      	beq.n	8006bf0 <_free_r+0x90>
 8006b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6a:	9001      	str	r0, [sp, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b72:	bfb8      	it	lt
 8006b74:	18e4      	addlt	r4, r4, r3
 8006b76:	f000 f913 	bl	8006da0 <__malloc_lock>
 8006b7a:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <_free_r+0x94>)
 8006b7c:	9801      	ldr	r0, [sp, #4]
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	b933      	cbnz	r3, 8006b90 <_free_r+0x30>
 8006b82:	6063      	str	r3, [r4, #4]
 8006b84:	6014      	str	r4, [r2, #0]
 8006b86:	b003      	add	sp, #12
 8006b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b8c:	f000 b90e 	b.w	8006dac <__malloc_unlock>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d908      	bls.n	8006ba6 <_free_r+0x46>
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	1961      	adds	r1, r4, r5
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf01      	itttt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	1949      	addeq	r1, r1, r5
 8006ba2:	6021      	streq	r1, [r4, #0]
 8006ba4:	e7ed      	b.n	8006b82 <_free_r+0x22>
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <_free_r+0x50>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d9fa      	bls.n	8006ba6 <_free_r+0x46>
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	1855      	adds	r5, r2, r1
 8006bb4:	42a5      	cmp	r5, r4
 8006bb6:	d10b      	bne.n	8006bd0 <_free_r+0x70>
 8006bb8:	6824      	ldr	r4, [r4, #0]
 8006bba:	4421      	add	r1, r4
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	d1e0      	bne.n	8006b86 <_free_r+0x26>
 8006bc4:	681c      	ldr	r4, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	4421      	add	r1, r4
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	e7da      	b.n	8006b86 <_free_r+0x26>
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x78>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	e7d6      	b.n	8006b86 <_free_r+0x26>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf04      	itt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	6054      	str	r4, [r2, #4]
 8006bee:	e7ca      	b.n	8006b86 <_free_r+0x26>
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	20000238 	.word	0x20000238

08006bf8 <sbrk_aligned>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4e0e      	ldr	r6, [pc, #56]	; (8006c34 <sbrk_aligned+0x3c>)
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	6831      	ldr	r1, [r6, #0]
 8006c00:	4605      	mov	r5, r0
 8006c02:	b911      	cbnz	r1, 8006c0a <sbrk_aligned+0x12>
 8006c04:	f000 f8bc 	bl	8006d80 <_sbrk_r>
 8006c08:	6030      	str	r0, [r6, #0]
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 f8b7 	bl	8006d80 <_sbrk_r>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	d00a      	beq.n	8006c2c <sbrk_aligned+0x34>
 8006c16:	1cc4      	adds	r4, r0, #3
 8006c18:	f024 0403 	bic.w	r4, r4, #3
 8006c1c:	42a0      	cmp	r0, r4
 8006c1e:	d007      	beq.n	8006c30 <sbrk_aligned+0x38>
 8006c20:	1a21      	subs	r1, r4, r0
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 f8ac 	bl	8006d80 <_sbrk_r>
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d101      	bne.n	8006c30 <sbrk_aligned+0x38>
 8006c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c30:	4620      	mov	r0, r4
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	2000023c 	.word	0x2000023c

08006c38 <_malloc_r>:
 8006c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	1ccd      	adds	r5, r1, #3
 8006c3e:	f025 0503 	bic.w	r5, r5, #3
 8006c42:	3508      	adds	r5, #8
 8006c44:	2d0c      	cmp	r5, #12
 8006c46:	bf38      	it	cc
 8006c48:	250c      	movcc	r5, #12
 8006c4a:	2d00      	cmp	r5, #0
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	db01      	blt.n	8006c54 <_malloc_r+0x1c>
 8006c50:	42a9      	cmp	r1, r5
 8006c52:	d905      	bls.n	8006c60 <_malloc_r+0x28>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	2600      	movs	r6, #0
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c60:	4e2e      	ldr	r6, [pc, #184]	; (8006d1c <_malloc_r+0xe4>)
 8006c62:	f000 f89d 	bl	8006da0 <__malloc_lock>
 8006c66:	6833      	ldr	r3, [r6, #0]
 8006c68:	461c      	mov	r4, r3
 8006c6a:	bb34      	cbnz	r4, 8006cba <_malloc_r+0x82>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f7ff ffc2 	bl	8006bf8 <sbrk_aligned>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	4604      	mov	r4, r0
 8006c78:	d14d      	bne.n	8006d16 <_malloc_r+0xde>
 8006c7a:	6834      	ldr	r4, [r6, #0]
 8006c7c:	4626      	mov	r6, r4
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d140      	bne.n	8006d04 <_malloc_r+0xcc>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	4631      	mov	r1, r6
 8006c86:	4638      	mov	r0, r7
 8006c88:	eb04 0803 	add.w	r8, r4, r3
 8006c8c:	f000 f878 	bl	8006d80 <_sbrk_r>
 8006c90:	4580      	cmp	r8, r0
 8006c92:	d13a      	bne.n	8006d0a <_malloc_r+0xd2>
 8006c94:	6821      	ldr	r1, [r4, #0]
 8006c96:	3503      	adds	r5, #3
 8006c98:	1a6d      	subs	r5, r5, r1
 8006c9a:	f025 0503 	bic.w	r5, r5, #3
 8006c9e:	3508      	adds	r5, #8
 8006ca0:	2d0c      	cmp	r5, #12
 8006ca2:	bf38      	it	cc
 8006ca4:	250c      	movcc	r5, #12
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff ffa5 	bl	8006bf8 <sbrk_aligned>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d02b      	beq.n	8006d0a <_malloc_r+0xd2>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	442b      	add	r3, r5
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	e00e      	b.n	8006cd8 <_malloc_r+0xa0>
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	1b52      	subs	r2, r2, r5
 8006cbe:	d41e      	bmi.n	8006cfe <_malloc_r+0xc6>
 8006cc0:	2a0b      	cmp	r2, #11
 8006cc2:	d916      	bls.n	8006cf2 <_malloc_r+0xba>
 8006cc4:	1961      	adds	r1, r4, r5
 8006cc6:	42a3      	cmp	r3, r4
 8006cc8:	6025      	str	r5, [r4, #0]
 8006cca:	bf18      	it	ne
 8006ccc:	6059      	strne	r1, [r3, #4]
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	bf08      	it	eq
 8006cd2:	6031      	streq	r1, [r6, #0]
 8006cd4:	5162      	str	r2, [r4, r5]
 8006cd6:	604b      	str	r3, [r1, #4]
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f104 060b 	add.w	r6, r4, #11
 8006cde:	f000 f865 	bl	8006dac <__malloc_unlock>
 8006ce2:	f026 0607 	bic.w	r6, r6, #7
 8006ce6:	1d23      	adds	r3, r4, #4
 8006ce8:	1af2      	subs	r2, r6, r3
 8006cea:	d0b6      	beq.n	8006c5a <_malloc_r+0x22>
 8006cec:	1b9b      	subs	r3, r3, r6
 8006cee:	50a3      	str	r3, [r4, r2]
 8006cf0:	e7b3      	b.n	8006c5a <_malloc_r+0x22>
 8006cf2:	6862      	ldr	r2, [r4, #4]
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	bf0c      	ite	eq
 8006cf8:	6032      	streq	r2, [r6, #0]
 8006cfa:	605a      	strne	r2, [r3, #4]
 8006cfc:	e7ec      	b.n	8006cd8 <_malloc_r+0xa0>
 8006cfe:	4623      	mov	r3, r4
 8006d00:	6864      	ldr	r4, [r4, #4]
 8006d02:	e7b2      	b.n	8006c6a <_malloc_r+0x32>
 8006d04:	4634      	mov	r4, r6
 8006d06:	6876      	ldr	r6, [r6, #4]
 8006d08:	e7b9      	b.n	8006c7e <_malloc_r+0x46>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f000 f84c 	bl	8006dac <__malloc_unlock>
 8006d14:	e7a1      	b.n	8006c5a <_malloc_r+0x22>
 8006d16:	6025      	str	r5, [r4, #0]
 8006d18:	e7de      	b.n	8006cd8 <_malloc_r+0xa0>
 8006d1a:	bf00      	nop
 8006d1c:	20000238 	.word	0x20000238

08006d20 <_realloc_r>:
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	4680      	mov	r8, r0
 8006d26:	4614      	mov	r4, r2
 8006d28:	460e      	mov	r6, r1
 8006d2a:	b921      	cbnz	r1, 8006d36 <_realloc_r+0x16>
 8006d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	4611      	mov	r1, r2
 8006d32:	f7ff bf81 	b.w	8006c38 <_malloc_r>
 8006d36:	b92a      	cbnz	r2, 8006d44 <_realloc_r+0x24>
 8006d38:	f7ff ff12 	bl	8006b60 <_free_r>
 8006d3c:	4625      	mov	r5, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	f000 f838 	bl	8006db8 <_malloc_usable_size_r>
 8006d48:	4284      	cmp	r4, r0
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	d802      	bhi.n	8006d54 <_realloc_r+0x34>
 8006d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d52:	d812      	bhi.n	8006d7a <_realloc_r+0x5a>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4640      	mov	r0, r8
 8006d58:	f7ff ff6e 	bl	8006c38 <_malloc_r>
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0ed      	beq.n	8006d3e <_realloc_r+0x1e>
 8006d62:	42bc      	cmp	r4, r7
 8006d64:	4622      	mov	r2, r4
 8006d66:	4631      	mov	r1, r6
 8006d68:	bf28      	it	cs
 8006d6a:	463a      	movcs	r2, r7
 8006d6c:	f7ff fed0 	bl	8006b10 <memcpy>
 8006d70:	4631      	mov	r1, r6
 8006d72:	4640      	mov	r0, r8
 8006d74:	f7ff fef4 	bl	8006b60 <_free_r>
 8006d78:	e7e1      	b.n	8006d3e <_realloc_r+0x1e>
 8006d7a:	4635      	mov	r5, r6
 8006d7c:	e7df      	b.n	8006d3e <_realloc_r+0x1e>
	...

08006d80 <_sbrk_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4d06      	ldr	r5, [pc, #24]	; (8006d9c <_sbrk_r+0x1c>)
 8006d84:	2300      	movs	r3, #0
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	f7fa f8b6 	bl	8000efc <_sbrk>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_sbrk_r+0x1a>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_sbrk_r+0x1a>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20000240 	.word	0x20000240

08006da0 <__malloc_lock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__malloc_lock+0x8>)
 8006da2:	f000 b811 	b.w	8006dc8 <__retarget_lock_acquire_recursive>
 8006da6:	bf00      	nop
 8006da8:	20000244 	.word	0x20000244

08006dac <__malloc_unlock>:
 8006dac:	4801      	ldr	r0, [pc, #4]	; (8006db4 <__malloc_unlock+0x8>)
 8006dae:	f000 b80c 	b.w	8006dca <__retarget_lock_release_recursive>
 8006db2:	bf00      	nop
 8006db4:	20000244 	.word	0x20000244

08006db8 <_malloc_usable_size_r>:
 8006db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dbc:	1f18      	subs	r0, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfbc      	itt	lt
 8006dc2:	580b      	ldrlt	r3, [r1, r0]
 8006dc4:	18c0      	addlt	r0, r0, r3
 8006dc6:	4770      	bx	lr

08006dc8 <__retarget_lock_acquire_recursive>:
 8006dc8:	4770      	bx	lr

08006dca <__retarget_lock_release_recursive>:
 8006dca:	4770      	bx	lr

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
