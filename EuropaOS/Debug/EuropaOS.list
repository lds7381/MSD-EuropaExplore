
EuropaOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a90  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d3c  08006d3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d44  08006d44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08006dbc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08006dbc  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017012  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002938  00000000  00000000  000370b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  000399f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  0003ac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d26a  00000000  00000000  0003bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b38  00000000  00000000  00069062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ac66  00000000  00000000  0007fb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019a800  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  0019a850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006c38 	.word	0x08006c38

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08006c38 	.word	0x08006c38

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <start_va_sensors>:

#include "VASensors.h"

ADC_ChannelConfTypeDef sConfig = {0};

void start_va_sensors(ADC_HandleTypeDef* adc_handle, UART_HandleTypeDef* uart, uint32_t *buff){
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	uint32_t vernier_values[3];

	char str[50] = "Vernier Sensor Collection Started\r\n";
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <start_va_sensors+0x64>)
 80005b2:	f107 0410 	add.w	r4, r7, #16
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	682b      	ldr	r3, [r5, #0]
 80005c2:	6023      	str	r3, [r4, #0]
 80005c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	819a      	strh	r2, [r3, #12]
	print(uart, str, sizeof(str));
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	2232      	movs	r2, #50	; 0x32
 80005d8:	4619      	mov	r1, r3
 80005da:	68b8      	ldr	r0, [r7, #8]
 80005dc:	f000 fcc0 	bl	8000f60 <print>

	// Select pH Channel
	adc_select_pH(adc_handle);
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f813 	bl	800060c <adc_select_pH>
	// Start the collection of Values from the ADC
	if ( HAL_ADC_Start(adc_handle) != HAL_OK) {
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f001 f8b4 	bl	8001754 <HAL_ADC_Start>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <start_va_sensors+0x52>
		Error_Handler();
 80005f2:	f000 fad9 	bl	8000ba8 <Error_Handler>
	}

	HAL_ADC_Start_DMA(adc_handle, buff, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f001 f90e 	bl	800181c <HAL_ADC_Start_DMA>
//		print(uart, str, sizeof(str));
//		HAL_Delay(500);
//
//	}

}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bdb0      	pop	{r4, r5, r7, pc}
 8000608:	08006c50 	.word	0x08006c50

0800060c <adc_select_pH>:

void adc_select_pH(ADC_HandleTypeDef* adc_handle){
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	// Create the ADC channel configuration
	ADC_ChannelConfTypeDef sConfig = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]

	// Populate the configuration to select channel 3 (pH Sensor)
	sConfig.Channel = ADC_CHANNEL_4;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <adc_select_pH+0x44>)
 8000628:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800062a:	2306      	movs	r3, #6
 800062c:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]

    // Configure the adc to select channel 3
    if (HAL_ADC_ConfigChannel(adc_handle, &sConfig) != HAL_OK){
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4619      	mov	r1, r3
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f001 f991 	bl	8001960 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <adc_select_pH+0x3c>
    	Error_Handler();
 8000644:	f000 fab0 	bl	8000ba8 <Error_Handler>
    }
}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	10c00010 	.word	0x10c00010

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fcbc 	bl	8000fd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f827 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f9d7 	bl	8000a14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000666:	f000 f9ab 	bl	80009c0 <MX_DMA_Init>
  MX_ADC1_Init();
 800066a:	f000 f873 	bl	8000754 <MX_ADC1_Init>
  MX_TIM3_Init();
 800066e:	f000 f931 	bl	80008d4 <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 8000672:	f000 f8d7 	bl	8000824 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  start_va_sensors(&hadc1, &hlpuart1, adc_buff);
 8000676:	463b      	mov	r3, r7
 8000678:	461a      	mov	r2, r3
 800067a:	490a      	ldr	r1, [pc, #40]	; (80006a4 <main+0x50>)
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <main+0x54>)
 800067e:	f7ff ff91 	bl	80005a4 <start_va_sensors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sprintf(tx, "ADC VALUE: %ld\r\n", adc_buff[0]);
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <main+0x58>)
 8000688:	4618      	mov	r0, r3
 800068a:	f005 fe67 	bl	800635c <siprintf>
	print(&hlpuart1, tx, sizeof(tx));
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2214      	movs	r2, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <main+0x50>)
 8000696:	f000 fc63 	bl	8000f60 <print>
	HAL_Delay(500);
 800069a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069e:	f000 fd0f 	bl	80010c0 <HAL_Delay>
	sprintf(tx, "ADC VALUE: %ld\r\n", adc_buff[0]);
 80006a2:	e7ee      	b.n	8000682 <main+0x2e>
 80006a4:	20000154 	.word	0x20000154
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	08006c84 	.word	0x08006c84

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fe44 	bl	800634c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006d2:	2000      	movs	r0, #0
 80006d4:	f002 fba8 	bl	8002e28 <HAL_PWREx_ControlVoltageScaling>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006de:	f000 fa63 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2340      	movs	r3, #64	; 0x40
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80006fc:	231e      	movs	r3, #30
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fc3d 	bl	8002f90 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800071c:	f000 fa44 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	2105      	movs	r1, #5
 800073a:	4618      	mov	r0, r3
 800073c:	f003 f842 	bl	80037c4 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 fa2f 	bl	8000ba8 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3758      	adds	r7, #88	; 0x58
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_ADC1_Init+0xc0>)
 800076c:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <MX_ADC1_Init+0xc4>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_ADC1_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_ADC1_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <MX_ADC1_Init+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_ADC1_Init+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_ADC1_Init+0xc0>)
 800078a:	2204      	movs	r2, #4
 800078c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_ADC1_Init+0xc0>)
 8000790:	2200      	movs	r2, #0
 8000792:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ADC1_Init+0xc0>)
 8000796:	2201      	movs	r2, #1
 8000798:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_ADC1_Init+0xc0>)
 800079c:	2201      	movs	r2, #1
 800079e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_ADC1_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_ADC1_Init+0xc0>)
 80007aa:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_ADC1_Init+0xc0>)
 80007b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_ADC1_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_ADC1_Init+0xc0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ADC1_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_ADC1_Init+0xc0>)
 80007d0:	f000 fe74 	bl	80014bc <HAL_ADC_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007da:	f000 f9e5 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_ADC1_Init+0xc8>)
 80007e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e2:	2306      	movs	r3, #6
 80007e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_ADC1_Init+0xcc>)
 80007ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ee:	2304      	movs	r3, #4
 80007f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_ADC1_Init+0xc0>)
 80007fc:	f001 f8b0 	bl	8001960 <HAL_ADC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000806:	f000 f9cf 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000008c 	.word	0x2000008c
 8000818:	50040000 	.word	0x50040000
 800081c:	10c00010 	.word	0x10c00010
 8000820:	407f0000 	.word	0x407f0000

08000824 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 800082a:	4a28      	ldr	r2, [pc, #160]	; (80008cc <MX_LPUART1_UART_Init+0xa8>)
 800082c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <MX_LPUART1_UART_Init+0xac>)
 8000832:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 8000848:	220c      	movs	r2, #12
 800084a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 800086c:	f004 fea8 	bl	80055c0 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000876:	f000 f997 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 800087e:	f005 fc71 	bl	8006164 <HAL_UARTEx_SetTxFifoThreshold>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000888:	f000 f98e 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 8000890:	f005 fca6 	bl	80061e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800089a:	f000 f985 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800089e:	480a      	ldr	r0, [pc, #40]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 80008a0:	f005 fc27 	bl	80060f2 <HAL_UARTEx_DisableFifoMode>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008aa:	f000 f97d 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 80008b0:	f004 fe86 	bl	80055c0 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_LPUART1_UART_Init+0x9a>
	  Error_Handler();
 80008ba:	f000 f975 	bl	8000ba8 <Error_Handler>
  }
  HAL_UART_MspInit(&hlpuart1);
 80008be:	4802      	ldr	r0, [pc, #8]	; (80008c8 <MX_LPUART1_UART_Init+0xa4>)
 80008c0:	f000 fa52 	bl	8000d68 <HAL_UART_MspInit>
  /* USER CODE END LPUART1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000154 	.word	0x20000154
 80008cc:	40008000 	.word	0x40008000
 80008d0:	00033324 	.word	0x00033324

080008d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <MX_TIM3_Init+0xe4>)
 8000908:	4a2c      	ldr	r2, [pc, #176]	; (80009bc <MX_TIM3_Init+0xe8>)
 800090a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11999;
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_TIM3_Init+0xe4>)
 800090e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000912:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <MX_TIM3_Init+0xe4>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_TIM3_Init+0xe4>)
 800091c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000920:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_TIM3_Init+0xe4>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_TIM3_Init+0xe4>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800092e:	4822      	ldr	r0, [pc, #136]	; (80009b8 <MX_TIM3_Init+0xe4>)
 8000930:	f003 ff1e 	bl	8004770 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f935 	bl	8000ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000944:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000948:	4619      	mov	r1, r3
 800094a:	481b      	ldr	r0, [pc, #108]	; (80009b8 <MX_TIM3_Init+0xe4>)
 800094c:	f004 f8dc 	bl	8004b08 <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000956:	f000 f927 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800095a:	4817      	ldr	r0, [pc, #92]	; (80009b8 <MX_TIM3_Init+0xe4>)
 800095c:	f003 ff5f 	bl	800481e <HAL_TIM_PWM_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000966:	f000 f91f 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <MX_TIM3_Init+0xe4>)
 800097a:	f004 fd99 	bl	80054b0 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000984:	f000 f910 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2360      	movs	r3, #96	; 0x60
 800098a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <MX_TIM3_Init+0xe4>)
 80009a0:	f003 ff9e 	bl	80048e0 <HAL_TIM_PWM_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80009aa:	f000 f8fd 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001e4 	.word	0x200001e4
 80009bc:	40000400 	.word	0x40000400

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DMA_Init+0x50>)
 80009c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <MX_DMA_Init+0x50>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6493      	str	r3, [r2, #72]	; 0x48
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DMA_Init+0x50>)
 80009d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DMA_Init+0x50>)
 80009e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <MX_DMA_Init+0x50>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6493      	str	r3, [r2, #72]	; 0x48
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DMA_Init+0x50>)
 80009ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	200b      	movs	r0, #11
 80009fc:	f001 fda1 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a00:	200b      	movs	r0, #11
 8000a02:	f001 fdba 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b5a      	ldr	r3, [pc, #360]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a59      	ldr	r2, [pc, #356]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a53      	ldr	r2, [pc, #332]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b51      	ldr	r3, [pc, #324]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a4d      	ldr	r2, [pc, #308]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b4b      	ldr	r3, [pc, #300]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a47      	ldr	r2, [pc, #284]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b42      	ldr	r3, [pc, #264]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a41      	ldr	r2, [pc, #260]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a3b      	ldr	r2, [pc, #236]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000aba:	f002 fa59 	bl	8002f70 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ac4:	4834      	ldr	r0, [pc, #208]	; (8000b98 <MX_GPIO_Init+0x184>)
 8000ac6:	f002 f977 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_SEL0_Pin|USB_PowerSwitchOn_Pin|MUX_SEL1_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2170      	movs	r1, #112	; 0x70
 8000ace:	4833      	ldr	r0, [pc, #204]	; (8000b9c <MX_GPIO_Init+0x188>)
 8000ad0:	f002 f972 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ada:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <MX_GPIO_Init+0x18c>)
 8000aec:	f001 ffd2 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000af0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4823      	ldr	r0, [pc, #140]	; (8000b98 <MX_GPIO_Init+0x184>)
 8000b0a:	f001 ffc3 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b20:	2307      	movs	r3, #7
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481e      	ldr	r0, [pc, #120]	; (8000ba4 <MX_GPIO_Init+0x190>)
 8000b2c:	f001 ffb2 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin USB_PowerSwitchOn_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|USB_PowerSwitchOn_Pin|MUX_SEL1_Pin;
 8000b30:	2370      	movs	r3, #112	; 0x70
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_GPIO_Init+0x188>)
 8000b48:	f001 ffa4 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b4c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b5e:	230a      	movs	r3, #10
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f001 ff92 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f001 ff84 	bl	8002a94 <HAL_GPIO_Init>

}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	; 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	48001800 	.word	0x48001800
 8000ba0:	48000800 	.word	0x48000800
 8000ba4:	48000c00 	.word	0x48000c00

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x44>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x44>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0b0      	sub	sp, #192	; 0xc0
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	2294      	movs	r2, #148	; 0x94
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f005 fb95 	bl	800634c <memset>
  if(hadc->Instance==ADC1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a4b      	ldr	r2, [pc, #300]	; (8000d54 <HAL_ADC_MspInit+0x158>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	f040 808e 	bne.w	8000d4a <HAL_ADC_MspInit+0x14e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000c44:	230c      	movs	r3, #12
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 f86e 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000c6a:	f7ff ff9d 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a39      	ldr	r2, [pc, #228]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a33      	ldr	r2, [pc, #204]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <HAL_ADC_MspInit+0x15c>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4823      	ldr	r0, [pc, #140]	; (8000d5c <HAL_ADC_MspInit+0x160>)
 8000cd0:	f001 fee0 	bl	8002a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cda:	230b      	movs	r3, #11
 8000cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f001 fed0 	bl	8002a94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <HAL_ADC_MspInit+0x168>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d24:	2220      	movs	r2, #32
 8000d26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d30:	f001 fc3e 	bl	80025b0 <HAL_DMA_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_ADC_MspInit+0x142>
    {
      Error_Handler();
 8000d3a:	f7ff ff35 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d42:	651a      	str	r2, [r3, #80]	; 0x50
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_ADC_MspInit+0x164>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	37c0      	adds	r7, #192	; 0xc0
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	50040000 	.word	0x50040000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800
 8000d60:	200000f4 	.word	0x200000f4
 8000d64:	40020008 	.word	0x40020008

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ae      	sub	sp, #184	; 0xb8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2294      	movs	r2, #148	; 0x94
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fadf 	bl	800634c <memset>
  if(huart->Instance==LPUART1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <HAL_UART_MspInit+0xb4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d13d      	bne.n	8000e14 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 ffcb 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000db0:	f7ff fefa 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000de4:	f002 f8c4 	bl	8002f70 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|GPIO_PIN_8;
 8000de8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e02:	2308      	movs	r3, #8
 8000e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000e10:	f001 fe40 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	37b8      	adds	r7, #184	; 0xb8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40008000 	.word	0x40008000
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48001800 	.word	0x48001800

08000e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_TIM_Base_MspInit+0x38>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10b      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_TIM_Base_MspInit+0x3c>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <HAL_TIM_Base_MspInit+0x3c>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <HAL_TIM_Base_MspInit+0x3c>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40000400 	.word	0x40000400
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f8e4 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <DMA1_Channel1_IRQHandler+0x10>)
 8000ec2:	f001 fc98 	bl	80027f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200000f4 	.word	0x200000f4

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f005 f9fa 	bl	80062f8 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200a0000 	.word	0x200a0000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000230 	.word	0x20000230
 8000f38:	20000248 	.word	0x20000248

08000f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <print>:
 *      Author: Liam Sullivan
 */

#include "uart.h"

void print(UART_HandleTypeDef *uart, char *msg, int size) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, (uint8_t *)msg, size, transmit_timeout);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f004 fb73 	bl	8005660 <HAL_UART_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f88:	f7ff ffd8 	bl	8000f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopForever+0xe>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopForever+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f005 f9a7 	bl	8006304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fb6:	f7ff fb4d 	bl	8000654 <main>

08000fba <LoopForever>:

LoopForever:
    b LoopForever
 8000fba:	e7fe      	b.n	8000fba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fc8:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 8000fcc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fd0:	20000248 	.word	0x20000248

08000fd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_IRQHandler>

08000fd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f001 faa3 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f80e 	bl	8001008 <HAL_InitTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	e001      	b.n	8000ffc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff8:	f7ff fddc 	bl	8000bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_InitTick+0x6c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d023      	beq.n	8001064 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x70>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_InitTick+0x6c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f001 faaf 	bl	8002596 <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10f      	bne.n	800105e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d809      	bhi.n	8001058 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f001 fa79 	bl	8002542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_InitTick+0x74>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e007      	b.n	8001068 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e004      	b.n	8001068 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e001      	b.n	8001068 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000000 	.word	0x20000000
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000234 	.word	0x20000234

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000234 	.word	0x20000234

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff ffee 	bl	80010a8 <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffde 	bl	80010a8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008

08001108 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3360      	adds	r3, #96	; 0x60
 8001182:	461a      	mov	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <LL_ADC_SetOffset+0x44>)
 8001192:	4013      	ands	r3, r2
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	4313      	orrs	r3, r2
 80011a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011a8:	bf00      	nop
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	03fff000 	.word	0x03fff000

080011b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3360      	adds	r3, #96	; 0x60
 80011c6:	461a      	mov	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3360      	adds	r3, #96	; 0x60
 80011f4:	461a      	mov	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	615a      	str	r2, [r3, #20]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001266:	b480      	push	{r7}
 8001268:	b087      	sub	sp, #28
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3330      	adds	r3, #48	; 0x30
 8001276:	461a      	mov	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	4413      	add	r3, r2
 8001284:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	211f      	movs	r1, #31
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	401a      	ands	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0e9b      	lsrs	r3, r3, #26
 800129e:	f003 011f 	and.w	r1, r3, #31
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012b2:	bf00      	nop
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012be:	b480      	push	{r7}
 80012c0:	b087      	sub	sp, #28
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3314      	adds	r3, #20
 80012ce:	461a      	mov	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0e5b      	lsrs	r3, r3, #25
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0d1b      	lsrs	r3, r3, #20
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	2107      	movs	r1, #7
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	0d1b      	lsrs	r3, r3, #20
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	431a      	orrs	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0318 	and.w	r3, r3, #24
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001338:	40d9      	lsrs	r1, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	400b      	ands	r3, r1
 800133e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001342:	431a      	orrs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	0007ffff 	.word	0x0007ffff

0800135c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800136c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6093      	str	r3, [r2, #8]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001394:	d101      	bne.n	800139a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <LL_ADC_IsEnabled+0x18>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_ADC_IsEnabled+0x1a>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145a:	f043 0204 	orr.w	r2, r3, #4
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b04      	cmp	r3, #4
 8001480:	d101      	bne.n	8001486 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d101      	bne.n	80014ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e12f      	b.n	8001736 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fb89 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff3f 	bl	8001380 <LL_ADC_IsDeepPowerDownEnabled>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff25 	bl	800135c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff5a 	bl	80013d0 <LL_ADC_IsInternalRegulatorEnabled>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d115      	bne.n	800154e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff3e 	bl	80013a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800152c:	4b84      	ldr	r3, [pc, #528]	; (8001740 <HAL_ADC_Init+0x284>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	4a84      	ldr	r2, [pc, #528]	; (8001744 <HAL_ADC_Init+0x288>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	3301      	adds	r3, #1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001540:	e002      	b.n	8001548 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3b01      	subs	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f9      	bne.n	8001542 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff3c 	bl	80013d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10d      	bne.n	800157a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	f043 0210 	orr.w	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156e:	f043 0201 	orr.w	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff75 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 8001584:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 80c8 	bne.w	8001724 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 80c4 	bne.w	8001724 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015a4:	f043 0202 	orr.w	r2, r3, #2
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff35 	bl	8001420 <LL_ADC_IsEnabled>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10b      	bne.n	80015d4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015bc:	4862      	ldr	r0, [pc, #392]	; (8001748 <HAL_ADC_Init+0x28c>)
 80015be:	f7ff ff2f 	bl	8001420 <LL_ADC_IsEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4619      	mov	r1, r3
 80015ce:	485f      	ldr	r0, [pc, #380]	; (800174c <HAL_ADC_Init+0x290>)
 80015d0:	f7ff fd9a 	bl	8001108 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7e5b      	ldrb	r3, [r3, #25]
 80015d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d106      	bne.n	8001610 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	3b01      	subs	r3, #1
 8001608:	045b      	lsls	r3, r3, #17
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_ADC_Init+0x294>)
 8001634:	4013      	ands	r3, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	430b      	orrs	r3, r1
 800163e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff12 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 800164a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff1f 	bl	8001494 <LL_ADC_INJ_IsConversionOngoing>
 8001656:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d140      	bne.n	80016e0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d13d      	bne.n	80016e0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7e1b      	ldrb	r3, [r3, #24]
 800166c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800166e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001676:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001686:	f023 0306 	bic.w	r3, r3, #6
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	69b9      	ldr	r1, [r7, #24]
 8001690:	430b      	orrs	r3, r1
 8001692:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800169a:	2b01      	cmp	r3, #1
 800169c:	d118      	bne.n	80016d0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016b4:	4311      	orrs	r1, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016c0:	430a      	orrs	r2, r1
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	e007      	b.n	80016e0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10c      	bne.n	8001702 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f023 010f 	bic.w	r1, r3, #15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001700:	e007      	b.n	8001712 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 020f 	bic.w	r2, r2, #15
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	f043 0201 	orr.w	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	659a      	str	r2, [r3, #88]	; 0x58
 8001722:	e007      	b.n	8001734 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	f043 0210 	orr.w	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000000 	.word	0x20000000
 8001744:	053e2d63 	.word	0x053e2d63
 8001748:	50040000 	.word	0x50040000
 800174c:	50040300 	.word	0x50040300
 8001750:	fff0c007 	.word	0xfff0c007

08001754 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe84 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d14f      	bne.n	800180c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_ADC_Start+0x26>
 8001776:	2302      	movs	r3, #2
 8001778:	e04b      	b.n	8001812 <HAL_ADC_Start+0xbe>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fce8 	bl	8002158 <ADC_Enable>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d137      	bne.n	8001802 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b2:	d106      	bne.n	80017c2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	f023 0206 	bic.w	r2, r3, #6
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	221c      	movs	r2, #28
 80017ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fe23 	bl	8001446 <LL_ADC_REG_StartConversion>
 8001800:	e006      	b.n	8001810 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800180a:	e001      	b.n	8001810 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800180c:	2302      	movs	r3, #2
 800180e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe1e 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d167      	bne.n	8001908 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Start_DMA+0x2a>
 8001842:	2302      	movs	r3, #2
 8001844:	e063      	b.n	800190e <HAL_ADC_Start_DMA+0xf2>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fc82 	bl	8002158 <ADC_Enable>
 8001854:	4603      	mov	r3, r0
 8001856:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d14f      	bne.n	80018fe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	f023 0206 	bic.w	r2, r3, #6
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	65da      	str	r2, [r3, #92]	; 0x5c
 800188a:	e002      	b.n	8001892 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001896:	4a20      	ldr	r2, [pc, #128]	; (8001918 <HAL_ADC_Start_DMA+0xfc>)
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189e:	4a1f      	ldr	r2, [pc, #124]	; (800191c <HAL_ADC_Start_DMA+0x100>)
 80018a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a6:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_ADC_Start_DMA+0x104>)
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	221c      	movs	r2, #28
 80018b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0210 	orr.w	r2, r2, #16
 80018c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3340      	adds	r3, #64	; 0x40
 80018e4:	4619      	mov	r1, r3
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f000 ff09 	bl	8002700 <HAL_DMA_Start_IT>
 80018ee:	4603      	mov	r3, r0
 80018f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fda5 	bl	8001446 <LL_ADC_REG_StartConversion>
 80018fc:	e006      	b.n	800190c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001906:	e001      	b.n	800190c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001908:	2302      	movs	r3, #2
 800190a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800190c:	7dfb      	ldrb	r3, [r7, #23]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	08002265 	.word	0x08002265
 800191c:	0800233d 	.word	0x0800233d
 8001920:	08002359 	.word	0x08002359

08001924 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0b6      	sub	sp, #216	; 0xd8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x22>
 800197e:	2302      	movs	r3, #2
 8001980:	e3d5      	b.n	800212e <HAL_ADC_ConfigChannel+0x7ce>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd6d 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 83ba 	bne.w	8002110 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d824      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	3b02      	subs	r3, #2
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d81b      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x86>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <HAL_ADC_ConfigChannel+0x54>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019d5 	.word	0x080019d5
 80019c0:	080019dd 	.word	0x080019dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	220c      	movs	r2, #12
 80019c8:	605a      	str	r2, [r3, #4]
          break;
 80019ca:	e011      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2212      	movs	r2, #18
 80019d0:	605a      	str	r2, [r3, #4]
          break;
 80019d2:	e00d      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2218      	movs	r2, #24
 80019d8:	605a      	str	r2, [r3, #4]
          break;
 80019da:	e009      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e2:	605a      	str	r2, [r3, #4]
          break;
 80019e4:	e004      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2206      	movs	r2, #6
 80019ea:	605a      	str	r2, [r3, #4]
          break;
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80019ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	f7ff fc32 	bl	8001266 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fd31 	bl	800146e <LL_ADC_REG_IsConversionOngoing>
 8001a0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fd3d 	bl	8001494 <LL_ADC_INJ_IsConversionOngoing>
 8001a1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 81c1 	bne.w	8001daa <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f040 81bc 	bne.w	8001daa <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a3a:	d10f      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff fc39 	bl	80012be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fbe0 	bl	800121a <LL_ADC_SetSamplingTimeCommonConfig>
 8001a5a:	e00e      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f7ff fc28 	bl	80012be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fbd0 	bl	800121a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d00a      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6919      	ldr	r1, [r3, #16]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aac:	f7ff fb60 	bl	8001170 <LL_ADC_SetOffset>
 8001ab0:	e17b      	b.n	8001daa <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fb7d 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x17e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fb72 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	e01e      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x1bc>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fb67 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001afc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	e004      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1d4>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	e018      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x206>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e004      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001b5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d106      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fb36 	bl	80011e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fb1a 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x244>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2101      	movs	r1, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fb0f 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	f003 021f 	and.w	r2, r3, #31
 8001ba2:	e01e      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x282>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fb04 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	e004      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001bd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x29a>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	e018      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x2cc>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e004      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d106      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	2101      	movs	r1, #1
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fad3 	bl	80011e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fab7 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10a      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x30a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff faac 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	0e9b      	lsrs	r3, r3, #26
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	e01e      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x348>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff faa1 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e004      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001c9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x360>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0e9b      	lsrs	r3, r3, #26
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	e016      	b.n	8001cee <HAL_ADC_ConfigChannel+0x38e>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001cd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e004      	b.n	8001cee <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d106      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fa72 	bl	80011e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2103      	movs	r1, #3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fa56 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x3cc>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fa4b 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	f003 021f 	and.w	r2, r3, #31
 8001d2a:	e017      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x3fc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2103      	movs	r1, #3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa40 	bl	80011b8 <LL_ADC_GetOffsetChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d46:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e003      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x414>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	e011      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x438>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d84:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	e003      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d106      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2200      	movs	r2, #0
 8001da2:	2103      	movs	r1, #3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fa1d 	bl	80011e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fb36 	bl	8001420 <LL_ADC_IsEnabled>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 8140 	bne.w	800203c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f7ff faa3 	bl	8001314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4a8f      	ldr	r2, [pc, #572]	; (8002010 <HAL_ADC_ConfigChannel+0x6b0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	f040 8131 	bne.w	800203c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10b      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x4a2>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0e9b      	lsrs	r3, r3, #26
 8001df0:	3301      	adds	r3, #1
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	bf94      	ite	ls
 8001dfa:	2301      	movls	r3, #1
 8001dfc:	2300      	movhi	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	e019      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x4d6>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e12:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e003      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d079      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d107      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x4f6>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0e9b      	lsrs	r3, r3, #26
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	069b      	lsls	r3, r3, #26
 8001e50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e54:	e015      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x522>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e66:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e003      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	069b      	lsls	r3, r3, #26
 8001e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x542>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	3301      	adds	r3, #1
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	e017      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x572>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e003      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	ea42 0103 	orr.w	r1, r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10a      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x598>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0e9b      	lsrs	r3, r3, #26
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f003 021f 	and.w	r2, r3, #31
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	051b      	lsls	r3, r3, #20
 8001ef6:	e018      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x5ca>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f003 021f 	and.w	r2, r3, #31
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	e081      	b.n	8002032 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d107      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x5ea>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	3301      	adds	r3, #1
 8001f42:	069b      	lsls	r3, r3, #26
 8001f44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f48:	e015      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x616>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e003      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	069b      	lsls	r3, r3, #26
 8001f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x636>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0e9b      	lsrs	r3, r3, #26
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	e017      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x666>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	61fb      	str	r3, [r7, #28]
  return result;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e003      	b.n	8001fba <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	ea42 0103 	orr.w	r1, r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x692>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f003 021f 	and.w	r2, r3, #31
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b1e      	subs	r3, #30
 8001fea:	051b      	lsls	r3, r3, #20
 8001fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	e01e      	b.n	8002030 <HAL_ADC_ConfigChannel+0x6d0>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	613b      	str	r3, [r7, #16]
  return result;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e006      	b.n	800201c <HAL_ADC_ConfigChannel+0x6bc>
 800200e:	bf00      	nop
 8002010:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	f003 021f 	and.w	r2, r3, #31
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	3b1e      	subs	r3, #30
 800202a:	051b      	lsls	r3, r3, #20
 800202c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002030:	430b      	orrs	r3, r1
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	6892      	ldr	r2, [r2, #8]
 8002036:	4619      	mov	r1, r3
 8002038:	f7ff f941 	bl	80012be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_ADC_ConfigChannel+0x7d8>)
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d06c      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002048:	483c      	ldr	r0, [pc, #240]	; (800213c <HAL_ADC_ConfigChannel+0x7dc>)
 800204a:	f7ff f883 	bl	8001154 <LL_ADC_GetCommonPathInternalCh>
 800204e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a3a      	ldr	r2, [pc, #232]	; (8002140 <HAL_ADC_ConfigChannel+0x7e0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d127      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800205c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d121      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a35      	ldr	r2, [pc, #212]	; (8002144 <HAL_ADC_ConfigChannel+0x7e4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d157      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002072:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002076:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800207a:	4619      	mov	r1, r3
 800207c:	482f      	ldr	r0, [pc, #188]	; (800213c <HAL_ADC_ConfigChannel+0x7dc>)
 800207e:	f7ff f856 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002082:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_ADC_ConfigChannel+0x7e8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	4a30      	ldr	r2, [pc, #192]	; (800214c <HAL_ADC_ConfigChannel+0x7ec>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800209c:	e002      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f9      	bne.n	800209e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020aa:	e03a      	b.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <HAL_ADC_ConfigChannel+0x7f0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <HAL_ADC_ConfigChannel+0x77e>
 80020b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_ADC_ConfigChannel+0x7e4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d12a      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d4:	4619      	mov	r1, r3
 80020d6:	4819      	ldr	r0, [pc, #100]	; (800213c <HAL_ADC_ConfigChannel+0x7dc>)
 80020d8:	f7ff f829 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020dc:	e021      	b.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <HAL_ADC_ConfigChannel+0x7f4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d11c      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d116      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_ADC_ConfigChannel+0x7e4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d111      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002102:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002106:	4619      	mov	r1, r3
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <HAL_ADC_ConfigChannel+0x7dc>)
 800210a:	f7ff f810 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
 800210e:	e008      	b.n	8002122 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800212a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800212e:	4618      	mov	r0, r3
 8002130:	37d8      	adds	r7, #216	; 0xd8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	80080000 	.word	0x80080000
 800213c:	50040300 	.word	0x50040300
 8002140:	c7520000 	.word	0xc7520000
 8002144:	50040000 	.word	0x50040000
 8002148:	20000000 	.word	0x20000000
 800214c:	053e2d63 	.word	0x053e2d63
 8002150:	cb840000 	.word	0xcb840000
 8002154:	80000001 	.word	0x80000001

08002158 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f959 	bl	8001420 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d169      	bne.n	8002248 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	4b36      	ldr	r3, [pc, #216]	; (8002254 <ADC_Enable+0xfc>)
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e055      	b.n	800224a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f928 	bl	80013f8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021a8:	482b      	ldr	r0, [pc, #172]	; (8002258 <ADC_Enable+0x100>)
 80021aa:	f7fe ffd3 	bl	8001154 <LL_ADC_GetCommonPathInternalCh>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <ADC_Enable+0x104>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	4a28      	ldr	r2, [pc, #160]	; (8002260 <ADC_Enable+0x108>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80021d2:	e002      	b.n	80021da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021e6:	e028      	b.n	800223a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f917 	bl	8001420 <LL_ADC_IsEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d104      	bne.n	8002202 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f8fb 	bl	80013f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002202:	f7fe ff51 	bl	80010a8 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d914      	bls.n	800223a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d00d      	beq.n	800223a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e007      	b.n	800224a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d1cf      	bne.n	80021e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	8000003f 	.word	0x8000003f
 8002258:	50040300 	.word	0x50040300
 800225c:	20000000 	.word	0x20000000
 8002260:	053e2d63 	.word	0x053e2d63

08002264 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d14b      	bne.n	8002316 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d021      	beq.n	80022dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe ffcf 	bl	8001240 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d032      	beq.n	800230e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12b      	bne.n	800230e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11f      	bne.n	800230e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	659a      	str	r2, [r3, #88]	; 0x58
 80022da:	e018      	b.n	800230e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d111      	bne.n	800230e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff fb08 	bl	8001924 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002314:	e00e      	b.n	8002334 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7ff fb12 	bl	800194c <HAL_ADC_ErrorCallback>
}
 8002328:	e004      	b.n	8002334 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7ff faf4 	bl	8001938 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fae4 	bl	800194c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f7ff ff8e 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff29 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff3e 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff8e 	bl	8002480 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5d 	bl	800242c <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff31 	bl	80023f0 <__NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffa2 	bl	80024e8 <SysTick_Config>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08d      	b.n	80026de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_DMA_Init+0x138>)
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d80f      	bhi.n	80025ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b45      	ldr	r3, [pc, #276]	; (80026ec <HAL_DMA_Init+0x13c>)
 80025d6:	4413      	add	r3, r2
 80025d8:	4a45      	ldr	r2, [pc, #276]	; (80026f0 <HAL_DMA_Init+0x140>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	009a      	lsls	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a42      	ldr	r2, [pc, #264]	; (80026f4 <HAL_DMA_Init+0x144>)
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
 80025ec:	e00e      	b.n	800260c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_DMA_Init+0x148>)
 80025f6:	4413      	add	r3, r2
 80025f8:	4a3d      	ldr	r2, [pc, #244]	; (80026f0 <HAL_DMA_Init+0x140>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a3c      	ldr	r2, [pc, #240]	; (80026fc <HAL_DMA_Init+0x14c>)
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9b6 	bl	80029d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266c:	d102      	bne.n	8002674 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002688:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d010      	beq.n	80026b4 <HAL_DMA_Init+0x104>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d80c      	bhi.n	80026b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9d6 	bl	8002a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	e008      	b.n	80026c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40020407 	.word	0x40020407
 80026ec:	bffdfff8 	.word	0xbffdfff8
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	40020000 	.word	0x40020000
 80026f8:	bffdfbf8 	.word	0xbffdfbf8
 80026fc:	40020400 	.word	0x40020400

08002700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_DMA_Start_IT+0x20>
 800271c:	2302      	movs	r3, #2
 800271e:	e066      	b.n	80027ee <HAL_DMA_Start_IT+0xee>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d155      	bne.n	80027e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f8fb 	bl	8002954 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 020e 	orr.w	r2, r2, #14
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e00f      	b.n	8002798 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0204 	bic.w	r2, r2, #4
 8002786:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 020a 	orr.w	r2, r2, #10
 8002796:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027cc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e005      	b.n	80027ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f003 031c 	and.w	r3, r3, #28
 8002816:	2204      	movs	r2, #4
 8002818:	409a      	lsls	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d026      	beq.n	8002870 <HAL_DMA_IRQHandler+0x7a>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d021      	beq.n	8002870 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0204 	bic.w	r2, r2, #4
 8002848:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f003 021c 	and.w	r2, r3, #28
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2104      	movs	r1, #4
 8002858:	fa01 f202 	lsl.w	r2, r1, r2
 800285c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	2b00      	cmp	r3, #0
 8002864:	d071      	beq.n	800294a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800286e:	e06c      	b.n	800294a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f003 031c 	and.w	r3, r3, #28
 8002878:	2202      	movs	r2, #2
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d02e      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xec>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d029      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 020a 	bic.w	r2, r2, #10
 80028aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f003 021c 	and.w	r2, r3, #28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2102      	movs	r1, #2
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d038      	beq.n	800294a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028e0:	e033      	b.n	800294a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f003 031c 	and.w	r3, r3, #28
 80028ea:	2208      	movs	r2, #8
 80028ec:	409a      	lsls	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d02a      	beq.n	800294c <HAL_DMA_IRQHandler+0x156>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d025      	beq.n	800294c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 020e 	bic.w	r2, r2, #14
 800290e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f003 021c 	and.w	r2, r3, #28
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800294a:	bf00      	nop
 800294c:	bf00      	nop
}
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800296a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800297c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f003 021c 	and.w	r2, r3, #28
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d108      	bne.n	80029b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029b2:	e007      	b.n	80029c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d80a      	bhi.n	80029fa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029f0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6493      	str	r3, [r2, #72]	; 0x48
 80029f8:	e007      	b.n	8002a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a04:	4413      	add	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3b08      	subs	r3, #8
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a20:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2201      	movs	r2, #1
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40020407 	.word	0x40020407
 8002a40:	4002081c 	.word	0x4002081c
 8002a44:	cccccccd 	.word	0xcccccccd
 8002a48:	40020880 	.word	0x40020880

08002a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	461a      	mov	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	1000823f 	.word	0x1000823f
 8002a90:	40020940 	.word	0x40020940

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa2:	e166      	b.n	8002d72 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8158 	beq.w	8002d6c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d005      	beq.n	8002ad4 <HAL_GPIO_Init+0x40>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d130      	bne.n	8002b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 0201 	and.w	r2, r3, #1
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d017      	beq.n	8002b72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d123      	bne.n	8002bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	08da      	lsrs	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3208      	adds	r2, #8
 8002b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	6939      	ldr	r1, [r7, #16]
 8002bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80b2 	beq.w	8002d6c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c08:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <HAL_GPIO_Init+0x2fc>)
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0c:	4a60      	ldr	r2, [pc, #384]	; (8002d90 <HAL_GPIO_Init+0x2fc>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6613      	str	r3, [r2, #96]	; 0x60
 8002c14:	4b5e      	ldr	r3, [pc, #376]	; (8002d90 <HAL_GPIO_Init+0x2fc>)
 8002c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c20:	4a5c      	ldr	r2, [pc, #368]	; (8002d94 <HAL_GPIO_Init+0x300>)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c4a:	d02b      	beq.n	8002ca4 <HAL_GPIO_Init+0x210>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_GPIO_Init+0x304>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d025      	beq.n	8002ca0 <HAL_GPIO_Init+0x20c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_GPIO_Init+0x308>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d01f      	beq.n	8002c9c <HAL_GPIO_Init+0x208>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a50      	ldr	r2, [pc, #320]	; (8002da0 <HAL_GPIO_Init+0x30c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d019      	beq.n	8002c98 <HAL_GPIO_Init+0x204>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a4f      	ldr	r2, [pc, #316]	; (8002da4 <HAL_GPIO_Init+0x310>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d013      	beq.n	8002c94 <HAL_GPIO_Init+0x200>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a4e      	ldr	r2, [pc, #312]	; (8002da8 <HAL_GPIO_Init+0x314>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00d      	beq.n	8002c90 <HAL_GPIO_Init+0x1fc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a4d      	ldr	r2, [pc, #308]	; (8002dac <HAL_GPIO_Init+0x318>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d007      	beq.n	8002c8c <HAL_GPIO_Init+0x1f8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a4c      	ldr	r2, [pc, #304]	; (8002db0 <HAL_GPIO_Init+0x31c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d101      	bne.n	8002c88 <HAL_GPIO_Init+0x1f4>
 8002c84:	2307      	movs	r3, #7
 8002c86:	e00e      	b.n	8002ca6 <HAL_GPIO_Init+0x212>
 8002c88:	2308      	movs	r3, #8
 8002c8a:	e00c      	b.n	8002ca6 <HAL_GPIO_Init+0x212>
 8002c8c:	2306      	movs	r3, #6
 8002c8e:	e00a      	b.n	8002ca6 <HAL_GPIO_Init+0x212>
 8002c90:	2305      	movs	r3, #5
 8002c92:	e008      	b.n	8002ca6 <HAL_GPIO_Init+0x212>
 8002c94:	2304      	movs	r3, #4
 8002c96:	e006      	b.n	8002ca6 <HAL_GPIO_Init+0x212>
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e004      	b.n	8002ca6 <HAL_GPIO_Init+0x212>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e002      	b.n	8002ca6 <HAL_GPIO_Init+0x212>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_GPIO_Init+0x212>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	f002 0203 	and.w	r2, r2, #3
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cb6:	4937      	ldr	r1, [pc, #220]	; (8002d94 <HAL_GPIO_Init+0x300>)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ce8:	4a32      	ldr	r2, [pc, #200]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cee:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d12:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d18:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d42:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d66:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <HAL_GPIO_Init+0x320>)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f47f ae91 	bne.w	8002aa4 <HAL_GPIO_Init+0x10>
  }
}
 8002d82:	bf00      	nop
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000
 8002d98:	48000400 	.word	0x48000400
 8002d9c:	48000800 	.word	0x48000800
 8002da0:	48000c00 	.word	0x48000c00
 8002da4:	48001000 	.word	0x48001000
 8002da8:	48001400 	.word	0x48001400
 8002dac:	48001800 	.word	0x48001800
 8002db0:	48001c00 	.word	0x48001c00
 8002db4:	40010400 	.word	0x40010400

08002db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df8:	d102      	bne.n	8002e00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfe:	e00b      	b.n	8002e18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0e:	d102      	bne.n	8002e16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e14:	e000      	b.n	8002e18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40007000 	.word	0x40007000

08002e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d141      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e36:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e42:	d131      	bne.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e44:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4a:	4a46      	ldr	r2, [pc, #280]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e54:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e5c:	4a41      	ldr	r2, [pc, #260]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2232      	movs	r2, #50	; 0x32
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a3f      	ldr	r2, [pc, #252]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	0c9b      	lsrs	r3, r3, #18
 8002e76:	3301      	adds	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7a:	e002      	b.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d102      	bne.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f2      	bne.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e96:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d158      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e057      	b.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eae:	4a2d      	ldr	r2, [pc, #180]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eb8:	e04d      	b.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec0:	d141      	bne.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ec2:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	d131      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee0:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2232      	movs	r2, #50	; 0x32
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	0c9b      	lsrs	r3, r3, #18
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f06:	e002      	b.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1a:	d102      	bne.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f2      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2e:	d112      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e011      	b.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f44:	e007      	b.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f4e:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40007000 	.word	0x40007000
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	431bde83 	.word	0x431bde83

08002f70 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7e:	6053      	str	r3, [r2, #4]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f000 bc08 	b.w	80037b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa4:	4b96      	ldr	r3, [pc, #600]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fae:	4b94      	ldr	r3, [pc, #592]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80e4 	beq.w	800318e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_RCC_OscConfig+0x4c>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	f040 808b 	bne.w	80030ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 8087 	bne.w	80030ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fdc:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x64>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e3df      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	4b81      	ldr	r3, [pc, #516]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <HAL_RCC_OscConfig+0x7e>
 8003004:	4b7e      	ldr	r3, [pc, #504]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300c:	e005      	b.n	800301a <HAL_RCC_OscConfig+0x8a>
 800300e:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800301a:	4293      	cmp	r3, r2
 800301c:	d223      	bcs.n	8003066 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fdcc 	bl	8003bc0 <RCC_SetFlashLatencyFromMSIRange>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e3c0      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003032:	4b73      	ldr	r3, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a72      	ldr	r2, [pc, #456]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003038:	f043 0308 	orr.w	r3, r3, #8
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b70      	ldr	r3, [pc, #448]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	496d      	ldr	r1, [pc, #436]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003050:	4b6b      	ldr	r3, [pc, #428]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	4968      	ldr	r1, [pc, #416]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	e025      	b.n	80030b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003066:	4b66      	ldr	r3, [pc, #408]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b63      	ldr	r3, [pc, #396]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4960      	ldr	r1, [pc, #384]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003084:	4b5e      	ldr	r3, [pc, #376]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	495b      	ldr	r1, [pc, #364]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fd8c 	bl	8003bc0 <RCC_SetFlashLatencyFromMSIRange>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e380      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030b2:	f000 fcc1 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b51      	ldr	r3, [pc, #324]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4950      	ldr	r1, [pc, #320]	; (8003204 <HAL_RCC_OscConfig+0x274>)
 80030c4:	5ccb      	ldrb	r3, [r1, r3]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a4e      	ldr	r2, [pc, #312]	; (8003208 <HAL_RCC_OscConfig+0x278>)
 80030d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030d2:	4b4e      	ldr	r3, [pc, #312]	; (800320c <HAL_RCC_OscConfig+0x27c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd ff96 	bl	8001008 <HAL_InitTick>
 80030dc:	4603      	mov	r3, r0
 80030de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d052      	beq.n	800318c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	e364      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d032      	beq.n	8003158 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a42      	ldr	r2, [pc, #264]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030fe:	f7fd ffd3 	bl	80010a8 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003106:	f7fd ffcf 	bl	80010a8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e34d      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003118:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003124:	4b36      	ldr	r3, [pc, #216]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a35      	ldr	r2, [pc, #212]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4930      	ldr	r1, [pc, #192]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	492b      	ldr	r1, [pc, #172]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
 8003156:	e01a      	b.n	800318e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003158:	4b29      	ldr	r3, [pc, #164]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a28      	ldr	r2, [pc, #160]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003164:	f7fd ffa0 	bl	80010a8 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800316c:	f7fd ff9c 	bl	80010a8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e31a      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1dc>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d073      	beq.n	8003282 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x21c>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d10e      	bne.n	80031c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d10b      	bne.n	80031c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d063      	beq.n	8003280 <HAL_RCC_OscConfig+0x2f0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d15f      	bne.n	8003280 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e2f7      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x24c>
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e025      	b.n	8003228 <HAL_RCC_OscConfig+0x298>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e4:	d114      	bne.n	8003210 <HAL_RCC_OscConfig+0x280>
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a02      	ldr	r2, [pc, #8]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e013      	b.n	8003228 <HAL_RCC_OscConfig+0x298>
 8003200:	40021000 	.word	0x40021000
 8003204:	08006c98 	.word	0x08006c98
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004
 8003210:	4ba0      	ldr	r3, [pc, #640]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a9f      	ldr	r2, [pc, #636]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b9d      	ldr	r3, [pc, #628]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a9c      	ldr	r2, [pc, #624]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd ff3a 	bl	80010a8 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fd ff36 	bl	80010a8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e2b4      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324a:	4b92      	ldr	r3, [pc, #584]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x2a8>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd ff26 	bl	80010a8 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fd ff22 	bl	80010a8 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e2a0      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x2d0>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d060      	beq.n	8003350 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x310>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d119      	bne.n	80032ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d116      	bne.n	80032ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a0:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_OscConfig+0x328>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e27d      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b76      	ldr	r3, [pc, #472]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	4973      	ldr	r1, [pc, #460]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032cc:	e040      	b.n	8003350 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d023      	beq.n	800331e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d6:	4b6f      	ldr	r3, [pc, #444]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6e      	ldr	r2, [pc, #440]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fd fee1 	bl	80010a8 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ea:	f7fd fedd 	bl	80010a8 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e25b      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032fc:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b62      	ldr	r3, [pc, #392]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	495f      	ldr	r1, [pc, #380]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
 800331c:	e018      	b.n	8003350 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331e:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fd febd 	bl	80010a8 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7fd feb9 	bl	80010a8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e237      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003344:	4b53      	ldr	r3, [pc, #332]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d03c      	beq.n	80033d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01c      	beq.n	800339e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003364:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336a:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fd fe98 	bl	80010a8 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337c:	f7fd fe94 	bl	80010a8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e212      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338e:	4b41      	ldr	r3, [pc, #260]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ef      	beq.n	800337c <HAL_RCC_OscConfig+0x3ec>
 800339c:	e01b      	b.n	80033d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339e:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ae:	f7fd fe7b 	bl	80010a8 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fd fe77 	bl	80010a8 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1f5      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ef      	bne.n	80033b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a6 	beq.w	8003530 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e4:	2300      	movs	r3, #0
 80033e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10d      	bne.n	8003410 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_OscConfig+0x508>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d118      	bne.n	800344e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_OscConfig+0x508>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x508>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003428:	f7fd fe3e 	bl	80010a8 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fd fe3a 	bl	80010a8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1b8      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCC_OscConfig+0x508>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d108      	bne.n	8003468 <HAL_RCC_OscConfig+0x4d8>
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003466:	e029      	b.n	80034bc <HAL_RCC_OscConfig+0x52c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d115      	bne.n	800349c <HAL_RCC_OscConfig+0x50c>
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	4a03      	ldr	r2, [pc, #12]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x52c>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	40007000 	.word	0x40007000
 800349c:	4b9d      	ldr	r3, [pc, #628]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	4a9c      	ldr	r2, [pc, #624]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ac:	4b99      	ldr	r3, [pc, #612]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	4a98      	ldr	r2, [pc, #608]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d016      	beq.n	80034f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fd fdf0 	bl	80010a8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd fdec 	bl	80010a8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e168      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e2:	4b8c      	ldr	r3, [pc, #560]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ed      	beq.n	80034cc <HAL_RCC_OscConfig+0x53c>
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fd fdd9 	bl	80010a8 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fd fdd5 	bl	80010a8 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e151      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003510:	4b80      	ldr	r3, [pc, #512]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ed      	bne.n	80034fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b7b      	ldr	r3, [pc, #492]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	4a7a      	ldr	r2, [pc, #488]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d03c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003544:	4b73      	ldr	r3, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800354a:	4a72      	ldr	r2, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd fda8 	bl	80010a8 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800355c:	f7fd fda4 	bl	80010a8 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e122      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800356e:	4b69      	ldr	r3, [pc, #420]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ef      	beq.n	800355c <HAL_RCC_OscConfig+0x5cc>
 800357c:	e01b      	b.n	80035b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003584:	4a63      	ldr	r2, [pc, #396]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fd fd8b 	bl	80010a8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003596:	f7fd fd87 	bl	80010a8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e105      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035a8:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80035aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ef      	bne.n	8003596 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80f9 	beq.w	80037b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	f040 80cf 	bne.w	8003768 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ca:	4b52      	ldr	r3, [pc, #328]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0203 	and.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	429a      	cmp	r2, r3
 80035dc:	d12c      	bne.n	8003638 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	3b01      	subs	r3, #1
 80035ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d123      	bne.n	8003638 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d11b      	bne.n	8003638 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d113      	bne.n	8003638 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	3b01      	subs	r3, #1
 800361e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d109      	bne.n	8003638 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	3b01      	subs	r3, #1
 8003632:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d071      	beq.n	800371c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d068      	beq.n	8003710 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800363e:	4b35      	ldr	r3, [pc, #212]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800364a:	4b32      	ldr	r3, [pc, #200]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0ac      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800365a:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a2d      	ldr	r2, [pc, #180]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003664:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003666:	f7fd fd1f 	bl	80010a8 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fd1b 	bl	80010a8 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e099      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800368c:	4b21      	ldr	r3, [pc, #132]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <HAL_RCC_OscConfig+0x788>)
 8003692:	4013      	ands	r3, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800369c:	3a01      	subs	r2, #1
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	4311      	orrs	r1, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036a6:	0212      	lsls	r2, r2, #8
 80036a8:	4311      	orrs	r1, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036ae:	0852      	lsrs	r2, r2, #1
 80036b0:	3a01      	subs	r2, #1
 80036b2:	0552      	lsls	r2, r2, #21
 80036b4:	4311      	orrs	r1, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036ba:	0852      	lsrs	r2, r2, #1
 80036bc:	3a01      	subs	r2, #1
 80036be:	0652      	lsls	r2, r2, #25
 80036c0:	4311      	orrs	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036c6:	06d2      	lsls	r2, r2, #27
 80036c8:	430a      	orrs	r2, r1
 80036ca:	4912      	ldr	r1, [pc, #72]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80036d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 80036e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036e8:	f7fd fcde 	bl	80010a8 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fd fcda 	bl	80010a8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e058      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800370e:	e050      	b.n	80037b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e04f      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
 8003714:	40021000 	.word	0x40021000
 8003718:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d144      	bne.n	80037b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003728:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003732:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a20      	ldr	r2, [pc, #128]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003740:	f7fd fcb2 	bl	80010a8 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fcae 	bl	80010a8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e02c      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x7b8>
 8003766:	e024      	b.n	80037b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d01f      	beq.n	80037ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 8003774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fd fc95 	bl	80010a8 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7fd fc91 	bl	80010a8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e00f      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	4905      	ldr	r1, [pc, #20]	; (80037bc <HAL_RCC_OscConfig+0x82c>)
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x830>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	60cb      	str	r3, [r1, #12]
 80037ac:	e001      	b.n	80037b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	feeefffc 	.word	0xfeeefffc

080037c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e11d      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b90      	ldr	r3, [pc, #576]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d910      	bls.n	800380c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 020f 	bic.w	r2, r3, #15
 80037f2:	498b      	ldr	r1, [pc, #556]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e105      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	429a      	cmp	r2, r3
 8003826:	d908      	bls.n	800383a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b7e      	ldr	r3, [pc, #504]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	497b      	ldr	r1, [pc, #492]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d079      	beq.n	800393a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d11e      	bne.n	800388c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e0dc      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800385e:	f000 fa09 	bl	8003c74 <RCC_GetSysClockFreqFromPLLSource>
 8003862:	4603      	mov	r3, r0
 8003864:	4a70      	ldr	r2, [pc, #448]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d946      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800386a:	4b6e      	ldr	r3, [pc, #440]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d140      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003876:	4b6b      	ldr	r3, [pc, #428]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800387e:	4a69      	ldr	r2, [pc, #420]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e035      	b.n	80038f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003894:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d115      	bne.n	80038cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b9      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ac:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0ad      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a5      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80038cc:	f000 f8b4 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4a55      	ldr	r2, [pc, #340]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d90f      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038d8:	4b52      	ldr	r3, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038e4:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ec:	4a4d      	ldr	r2, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f8:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 0203 	bic.w	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4947      	ldr	r1, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390a:	f7fd fbcd 	bl	80010a8 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003910:	e00a      	b.n	8003928 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003912:	f7fd fbc9 	bl	80010a8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e077      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003928:	4b3e      	ldr	r3, [pc, #248]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 020c 	and.w	r2, r3, #12
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	429a      	cmp	r2, r3
 8003938:	d1eb      	bne.n	8003912 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d105      	bne.n	800394c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003940:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a37      	ldr	r2, [pc, #220]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d010      	beq.n	800397a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	429a      	cmp	r2, r3
 8003966:	d208      	bcs.n	800397a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	492b      	ldr	r1, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800397a:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d210      	bcs.n	80039aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 020f 	bic.w	r2, r3, #15
 8003990:	4923      	ldr	r1, [pc, #140]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_RCC_ClockConfig+0x25c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e036      	b.n	8003a18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4918      	ldr	r1, [pc, #96]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4910      	ldr	r1, [pc, #64]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e8:	f000 f826 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	490c      	ldr	r1, [pc, #48]	; (8003a2c <HAL_RCC_ClockConfig+0x268>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x26c>)
 8003a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x270>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fafb 	bl	8001008 <HAL_InitTick>
 8003a12:	4603      	mov	r3, r0
 8003a14:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	04c4b400 	.word	0x04c4b400
 8003a2c:	08006c98 	.word	0x08006c98
 8003a30:	20000000 	.word	0x20000000
 8003a34:	20000004 	.word	0x20000004

08003a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a46:	4b3e      	ldr	r3, [pc, #248]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x34>
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d121      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d11e      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a6c:	4b34      	ldr	r3, [pc, #208]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a78:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a88:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a94:	4a2b      	ldr	r2, [pc, #172]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e004      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003abe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d134      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0xa6>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d003      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xac>
 8003adc:	e005      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ae0:	617b      	str	r3, [r7, #20]
      break;
 8003ae2:	e005      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ae6:	617b      	str	r3, [r7, #20]
      break;
 8003ae8:	e002      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	617b      	str	r3, [r7, #20]
      break;
 8003aee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3301      	adds	r3, #1
 8003afc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	0a1b      	lsrs	r3, r3, #8
 8003b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	fb03 f202 	mul.w	r2, r3, r2
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	0e5b      	lsrs	r3, r3, #25
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	3301      	adds	r3, #1
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b30:	69bb      	ldr	r3, [r7, #24]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3724      	adds	r7, #36	; 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08006cb0 	.word	0x08006cb0
 8003b48:	00f42400 	.word	0x00f42400
 8003b4c:	007a1200 	.word	0x007a1200

08003b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000000 	.word	0x20000000

08003b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b6c:	f7ff fff0 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08006ca8 	.word	0x08006ca8

08003b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b98:	f7ff ffda 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	0adb      	lsrs	r3, r3, #11
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4904      	ldr	r1, [pc, #16]	; (8003bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	08006ca8 	.word	0x08006ca8

08003bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd8:	f7ff f906 	bl	8002de8 <HAL_PWREx_GetVoltageRange>
 8003bdc:	6178      	str	r0, [r7, #20]
 8003bde:	e014      	b.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
 8003bec:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bf8:	f7ff f8f6 	bl	8002de8 <HAL_PWREx_GetVoltageRange>
 8003bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c10:	d10b      	bne.n	8003c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d913      	bls.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2ba0      	cmp	r3, #160	; 0xa0
 8003c1c:	d902      	bls.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c1e:	2302      	movs	r3, #2
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e00d      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c24:	2301      	movs	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	e00a      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2e:	d902      	bls.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c30:	2302      	movs	r3, #2
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	e004      	b.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b70      	cmp	r3, #112	; 0x70
 8003c3a:	d101      	bne.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 020f 	bic.w	r2, r3, #15
 8003c48:	4909      	ldr	r1, [pc, #36]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d001      	beq.n	8003c62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40022000 	.word	0x40022000

08003c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d00b      	beq.n	8003ca2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d825      	bhi.n	8003cdc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d008      	beq.n	8003ca8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d11f      	bne.n	8003cdc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c9e:	613b      	str	r3, [r7, #16]
    break;
 8003ca0:	e01f      	b.n	8003ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003ca2:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ca4:	613b      	str	r3, [r7, #16]
    break;
 8003ca6:	e01c      	b.n	8003ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e005      	b.n	8003cd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd8:	613b      	str	r3, [r7, #16]
    break;
 8003cda:	e002      	b.n	8003ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
    break;
 8003ce0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	3301      	adds	r3, #1
 8003cee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	fb03 f202 	mul.w	r2, r3, r2
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	0e5b      	lsrs	r3, r3, #25
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	3301      	adds	r3, #1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d22:	683b      	ldr	r3, [r7, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40021000 	.word	0x40021000
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200
 8003d3c:	08006cb0 	.word	0x08006cb0

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d48:	2300      	movs	r3, #0
 8003d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d040      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d02a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d825      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d68:	2b60      	cmp	r3, #96	; 0x60
 8003d6a:	d026      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d6c:	2b60      	cmp	r3, #96	; 0x60
 8003d6e:	d821      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d006      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d81d      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d010      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d80:	e018      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d82:	4b89      	ldr	r3, [pc, #548]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4a88      	ldr	r2, [pc, #544]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8e:	e015      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fb02 	bl	80043a0 <RCCEx_PLLSAI1_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003da0:	e00c      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3320      	adds	r3, #32
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fbed 	bl	8004588 <RCCEx_PLLSAI2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003db2:	e003      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	74fb      	strb	r3, [r7, #19]
      break;
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc2:	4b79      	ldr	r3, [pc, #484]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd0:	4975      	ldr	r1, [pc, #468]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d047      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d030      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d82a      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfe:	d02a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d824      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e10:	d81e      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e1c:	e018      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1e:	4b62      	ldr	r3, [pc, #392]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4a61      	ldr	r2, [pc, #388]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e2a:	e015      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fab4 	bl	80043a0 <RCCEx_PLLSAI1_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e3c:	e00c      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3320      	adds	r3, #32
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fb9f 	bl	8004588 <RCCEx_PLLSAI2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	74fb      	strb	r3, [r7, #19]
      break;
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e5e:	4b52      	ldr	r3, [pc, #328]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	494e      	ldr	r1, [pc, #312]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e74:	e001      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 809f 	beq.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e8c:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6593      	str	r3, [r2, #88]	; 0x58
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3a      	ldr	r2, [pc, #232]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eca:	f7fd f8ed 	bl	80010a8 <HAL_GetTick>
 8003ece:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ed0:	e009      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fd f8e9 	bl	80010a8 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d902      	bls.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ee6:	4b31      	ldr	r3, [pc, #196]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0ef      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003ef2:	7cfb      	ldrb	r3, [r7, #19]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d15b      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01f      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d019      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f22:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f42:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd f8a8 	bl	80010a8 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fd f8a4 	bl	80010a8 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d902      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	74fb      	strb	r3, [r7, #19]
            break;
 8003f72:	e006      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ec      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10c      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	74bb      	strb	r3, [r7, #18]
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb4:	7c7b      	ldrb	r3, [r7, #17]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fba:	4ba0      	ldr	r3, [pc, #640]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	4a9f      	ldr	r2, [pc, #636]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd2:	4b9a      	ldr	r3, [pc, #616]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 0203 	bic.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	4996      	ldr	r1, [pc, #600]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff4:	4b91      	ldr	r3, [pc, #580]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 020c 	bic.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	498e      	ldr	r1, [pc, #568]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004016:	4b89      	ldr	r3, [pc, #548]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	4985      	ldr	r1, [pc, #532]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004038:	4b80      	ldr	r3, [pc, #512]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004046:	497d      	ldr	r1, [pc, #500]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800405a:	4b78      	ldr	r3, [pc, #480]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	4974      	ldr	r1, [pc, #464]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407c:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408a:	496c      	ldr	r1, [pc, #432]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409e:	4b67      	ldr	r3, [pc, #412]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ac:	4963      	ldr	r1, [pc, #396]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040c0:	4b5e      	ldr	r3, [pc, #376]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ce:	495b      	ldr	r1, [pc, #364]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e2:	4b56      	ldr	r3, [pc, #344]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	4952      	ldr	r1, [pc, #328]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004104:	4b4d      	ldr	r3, [pc, #308]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	494a      	ldr	r1, [pc, #296]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004126:	4b45      	ldr	r3, [pc, #276]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	4941      	ldr	r1, [pc, #260]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004148:	4b3c      	ldr	r3, [pc, #240]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004156:	4939      	ldr	r1, [pc, #228]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d028      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416a:	4b34      	ldr	r3, [pc, #208]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	4930      	ldr	r1, [pc, #192]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004188:	d106      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a2b      	ldr	r2, [pc, #172]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004194:	60d3      	str	r3, [r2, #12]
 8004196:	e011      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 f8f9 	bl	80043a0 <RCCEx_PLLSAI1_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d04d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d0:	d108      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80041d2:	4b1a      	ldr	r3, [pc, #104]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041e2:	e012      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80041e4:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ea:	4a14      	ldr	r2, [pc, #80]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004202:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004212:	d106      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
 8004220:	e020      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422a:	d109      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a02      	ldr	r2, [pc, #8]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004236:	60d3      	str	r3, [r2, #12]
 8004238:	e014      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004248:	d10c      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	2101      	movs	r1, #1
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f8a5 	bl	80043a0 <RCCEx_PLLSAI1_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d028      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004270:	4b4a      	ldr	r3, [pc, #296]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427e:	4947      	ldr	r1, [pc, #284]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428e:	d106      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004290:	4b42      	ldr	r3, [pc, #264]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a41      	ldr	r2, [pc, #260]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800429a:	60d3      	str	r3, [r2, #12]
 800429c:	e011      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a6:	d10c      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	2101      	movs	r1, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f876 	bl	80043a0 <RCCEx_PLLSAI1_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01e      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042ce:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042de:	492f      	ldr	r1, [pc, #188]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2102      	movs	r1, #2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f851 	bl	80043a0 <RCCEx_PLLSAI1_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004318:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800431e:	f023 0204 	bic.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004328:	491c      	ldr	r1, [pc, #112]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800433e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004342:	f023 0218 	bic.w	r2, r3, #24
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	4913      	ldr	r1, [pc, #76]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d017      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004370:	490a      	ldr	r1, [pc, #40]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004382:	d105      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004390:	7cbb      	ldrb	r3, [r7, #18]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000

080043a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ae:	4b72      	ldr	r3, [pc, #456]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00e      	beq.n	80043d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ba:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0203 	and.w	r2, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d103      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
       ||
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d142      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
 80043d6:	e03f      	b.n	8004458 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d018      	beq.n	8004412 <RCCEx_PLLSAI1_Config+0x72>
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d825      	bhi.n	8004430 <RCCEx_PLLSAI1_Config+0x90>
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d002      	beq.n	80043ee <RCCEx_PLLSAI1_Config+0x4e>
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d009      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x60>
 80043ec:	e020      	b.n	8004430 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ee:	4b62      	ldr	r3, [pc, #392]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11d      	bne.n	8004436 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fe:	e01a      	b.n	8004436 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004400:	4b5d      	ldr	r3, [pc, #372]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	2b00      	cmp	r3, #0
 800440a:	d116      	bne.n	800443a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004410:	e013      	b.n	800443a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004412:	4b59      	ldr	r3, [pc, #356]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800441e:	4b56      	ldr	r3, [pc, #344]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800442e:	e006      	b.n	800443e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      break;
 8004434:	e004      	b.n	8004440 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800443e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004446:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4949      	ldr	r1, [pc, #292]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004454:	4313      	orrs	r3, r2
 8004456:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 8086 	bne.w	800456c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004460:	4b45      	ldr	r3, [pc, #276]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a44      	ldr	r2, [pc, #272]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800446a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446c:	f7fc fe1c 	bl	80010a8 <HAL_GetTick>
 8004470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004472:	e009      	b.n	8004488 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004474:	f7fc fe18 	bl	80010a8 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d902      	bls.n	8004488 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	73fb      	strb	r3, [r7, #15]
        break;
 8004486:	e005      	b.n	8004494 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004488:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ef      	bne.n	8004474 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d168      	bne.n	800456c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d113      	bne.n	80044c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	4b35      	ldr	r3, [pc, #212]	; (800457c <RCCEx_PLLSAI1_Config+0x1dc>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	0211      	lsls	r1, r2, #8
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68d2      	ldr	r2, [r2, #12]
 80044b2:	06d2      	lsls	r2, r2, #27
 80044b4:	4311      	orrs	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6852      	ldr	r2, [r2, #4]
 80044ba:	3a01      	subs	r2, #1
 80044bc:	0112      	lsls	r2, r2, #4
 80044be:	430a      	orrs	r2, r1
 80044c0:	492d      	ldr	r1, [pc, #180]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	610b      	str	r3, [r1, #16]
 80044c6:	e02d      	b.n	8004524 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d115      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	0211      	lsls	r1, r2, #8
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6912      	ldr	r2, [r2, #16]
 80044e0:	0852      	lsrs	r2, r2, #1
 80044e2:	3a01      	subs	r2, #1
 80044e4:	0552      	lsls	r2, r2, #21
 80044e6:	4311      	orrs	r1, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6852      	ldr	r2, [r2, #4]
 80044ec:	3a01      	subs	r2, #1
 80044ee:	0112      	lsls	r2, r2, #4
 80044f0:	430a      	orrs	r2, r1
 80044f2:	4921      	ldr	r1, [pc, #132]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	610b      	str	r3, [r1, #16]
 80044f8:	e014      	b.n	8004524 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	4b21      	ldr	r3, [pc, #132]	; (8004584 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004500:	4013      	ands	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6892      	ldr	r2, [r2, #8]
 8004506:	0211      	lsls	r1, r2, #8
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6952      	ldr	r2, [r2, #20]
 800450c:	0852      	lsrs	r2, r2, #1
 800450e:	3a01      	subs	r2, #1
 8004510:	0652      	lsls	r2, r2, #25
 8004512:	4311      	orrs	r1, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6852      	ldr	r2, [r2, #4]
 8004518:	3a01      	subs	r2, #1
 800451a:	0112      	lsls	r2, r2, #4
 800451c:	430a      	orrs	r2, r1
 800451e:	4916      	ldr	r1, [pc, #88]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004520:	4313      	orrs	r3, r2
 8004522:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 800452a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800452e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fc fdba 	bl	80010a8 <HAL_GetTick>
 8004534:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004536:	e009      	b.n	800454c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004538:	f7fc fdb6 	bl	80010a8 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d902      	bls.n	800454c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	73fb      	strb	r3, [r7, #15]
          break;
 800454a:	e005      	b.n	8004558 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	4904      	ldr	r1, [pc, #16]	; (8004578 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	07ff800f 	.word	0x07ff800f
 8004580:	ff9f800f 	.word	0xff9f800f
 8004584:	f9ff800f 	.word	0xf9ff800f

08004588 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004596:	4b72      	ldr	r3, [pc, #456]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045a2:	4b6f      	ldr	r3, [pc, #444]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0203 	and.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d103      	bne.n	80045ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
       ||
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d142      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e03f      	b.n	8004640 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d018      	beq.n	80045fa <RCCEx_PLLSAI2_Config+0x72>
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d825      	bhi.n	8004618 <RCCEx_PLLSAI2_Config+0x90>
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d002      	beq.n	80045d6 <RCCEx_PLLSAI2_Config+0x4e>
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d009      	beq.n	80045e8 <RCCEx_PLLSAI2_Config+0x60>
 80045d4:	e020      	b.n	8004618 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045d6:	4b62      	ldr	r3, [pc, #392]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d11d      	bne.n	800461e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e6:	e01a      	b.n	800461e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045e8:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d116      	bne.n	8004622 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f8:	e013      	b.n	8004622 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045fa:	4b59      	ldr	r3, [pc, #356]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004606:	4b56      	ldr	r3, [pc, #344]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004616:	e006      	b.n	8004626 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e004      	b.n	8004628 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800461e:	bf00      	nop
 8004620:	e002      	b.n	8004628 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004626:	bf00      	nop
    }

    if(status == HAL_OK)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d108      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800462e:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f023 0203 	bic.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4949      	ldr	r1, [pc, #292]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 800463c:	4313      	orrs	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8086 	bne.w	8004754 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a44      	ldr	r2, [pc, #272]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fc fd28 	bl	80010a8 <HAL_GetTick>
 8004658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800465a:	e009      	b.n	8004670 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800465c:	f7fc fd24 	bl	80010a8 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d902      	bls.n	8004670 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	73fb      	strb	r3, [r7, #15]
        break;
 800466e:	e005      	b.n	800467c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ef      	bne.n	800465c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d168      	bne.n	8004754 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d113      	bne.n	80046b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004688:	4b35      	ldr	r3, [pc, #212]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	4b35      	ldr	r3, [pc, #212]	; (8004764 <RCCEx_PLLSAI2_Config+0x1dc>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6892      	ldr	r2, [r2, #8]
 8004694:	0211      	lsls	r1, r2, #8
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68d2      	ldr	r2, [r2, #12]
 800469a:	06d2      	lsls	r2, r2, #27
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6852      	ldr	r2, [r2, #4]
 80046a2:	3a01      	subs	r2, #1
 80046a4:	0112      	lsls	r2, r2, #4
 80046a6:	430a      	orrs	r2, r1
 80046a8:	492d      	ldr	r1, [pc, #180]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	614b      	str	r3, [r1, #20]
 80046ae:	e02d      	b.n	800470c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d115      	bne.n	80046e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <RCCEx_PLLSAI2_Config+0x1e0>)
 80046bc:	4013      	ands	r3, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6892      	ldr	r2, [r2, #8]
 80046c2:	0211      	lsls	r1, r2, #8
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6912      	ldr	r2, [r2, #16]
 80046c8:	0852      	lsrs	r2, r2, #1
 80046ca:	3a01      	subs	r2, #1
 80046cc:	0552      	lsls	r2, r2, #21
 80046ce:	4311      	orrs	r1, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6852      	ldr	r2, [r2, #4]
 80046d4:	3a01      	subs	r2, #1
 80046d6:	0112      	lsls	r2, r2, #4
 80046d8:	430a      	orrs	r2, r1
 80046da:	4921      	ldr	r1, [pc, #132]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	614b      	str	r3, [r1, #20]
 80046e0:	e014      	b.n	800470c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <RCCEx_PLLSAI2_Config+0x1e4>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6892      	ldr	r2, [r2, #8]
 80046ee:	0211      	lsls	r1, r2, #8
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6952      	ldr	r2, [r2, #20]
 80046f4:	0852      	lsrs	r2, r2, #1
 80046f6:	3a01      	subs	r2, #1
 80046f8:	0652      	lsls	r2, r2, #25
 80046fa:	4311      	orrs	r1, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6852      	ldr	r2, [r2, #4]
 8004700:	3a01      	subs	r2, #1
 8004702:	0112      	lsls	r2, r2, #4
 8004704:	430a      	orrs	r2, r1
 8004706:	4916      	ldr	r1, [pc, #88]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004708:	4313      	orrs	r3, r2
 800470a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800470c:	4b14      	ldr	r3, [pc, #80]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004716:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fc fcc6 	bl	80010a8 <HAL_GetTick>
 800471c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800471e:	e009      	b.n	8004734 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004720:	f7fc fcc2 	bl	80010a8 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d902      	bls.n	8004734 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	73fb      	strb	r3, [r7, #15]
          break;
 8004732:	e005      	b.n	8004740 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004734:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ef      	beq.n	8004720 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	4904      	ldr	r1, [pc, #16]	; (8004760 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004750:	4313      	orrs	r3, r2
 8004752:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	07ff800f 	.word	0x07ff800f
 8004768:	ff9f800f 	.word	0xff9f800f
 800476c:	f9ff800f 	.word	0xf9ff800f

08004770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e049      	b.n	8004816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fb46 	bl	8000e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fa74 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e049      	b.n	80048c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f841 	bl	80048cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 fa1d 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0ff      	b.n	8004afe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b14      	cmp	r3, #20
 800490a:	f200 80f0 	bhi.w	8004aee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004969 	.word	0x08004969
 8004918:	08004aef 	.word	0x08004aef
 800491c:	08004aef 	.word	0x08004aef
 8004920:	08004aef 	.word	0x08004aef
 8004924:	080049a9 	.word	0x080049a9
 8004928:	08004aef 	.word	0x08004aef
 800492c:	08004aef 	.word	0x08004aef
 8004930:	08004aef 	.word	0x08004aef
 8004934:	080049eb 	.word	0x080049eb
 8004938:	08004aef 	.word	0x08004aef
 800493c:	08004aef 	.word	0x08004aef
 8004940:	08004aef 	.word	0x08004aef
 8004944:	08004a2b 	.word	0x08004a2b
 8004948:	08004aef 	.word	0x08004aef
 800494c:	08004aef 	.word	0x08004aef
 8004950:	08004aef 	.word	0x08004aef
 8004954:	08004a6d 	.word	0x08004a6d
 8004958:	08004aef 	.word	0x08004aef
 800495c:	08004aef 	.word	0x08004aef
 8004960:	08004aef 	.word	0x08004aef
 8004964:	08004aad 	.word	0x08004aad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fa2e 	bl	8004dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0204 	bic.w	r2, r2, #4
 8004992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	619a      	str	r2, [r3, #24]
      break;
 80049a6:	e0a5      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fa9e 	bl	8004ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	619a      	str	r2, [r3, #24]
      break;
 80049e8:	e084      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fb07 	bl	8005004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0208 	orr.w	r2, r2, #8
 8004a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0204 	bic.w	r2, r2, #4
 8004a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69d9      	ldr	r1, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	61da      	str	r2, [r3, #28]
      break;
 8004a28:	e064      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fb6f 	bl	8005114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69d9      	ldr	r1, [r3, #28]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	021a      	lsls	r2, r3, #8
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	61da      	str	r2, [r3, #28]
      break;
 8004a6a:	e043      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fbb8 	bl	80051e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0208 	orr.w	r2, r2, #8
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0204 	bic.w	r2, r2, #4
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aaa:	e023      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fbfc 	bl	80052b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	021a      	lsls	r2, r3, #8
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aec:	e002      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
      break;
 8004af2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop

08004b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIM_ConfigClockSource+0x1c>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e0b6      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x18a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b60:	d03e      	beq.n	8004be0 <HAL_TIM_ConfigClockSource+0xd8>
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b66:	f200 8087 	bhi.w	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6e:	f000 8086 	beq.w	8004c7e <HAL_TIM_ConfigClockSource+0x176>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	d87f      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b78:	2b70      	cmp	r3, #112	; 0x70
 8004b7a:	d01a      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0xaa>
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d87b      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b80:	2b60      	cmp	r3, #96	; 0x60
 8004b82:	d050      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x11e>
 8004b84:	2b60      	cmp	r3, #96	; 0x60
 8004b86:	d877      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b88:	2b50      	cmp	r3, #80	; 0x50
 8004b8a:	d03c      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0xfe>
 8004b8c:	2b50      	cmp	r3, #80	; 0x50
 8004b8e:	d873      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d058      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x13e>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d86f      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004b98:	2b30      	cmp	r3, #48	; 0x30
 8004b9a:	d064      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15e>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d86b      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d060      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15e>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d867      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d05c      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15e>
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d05a      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15e>
 8004bb0:	e062      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6899      	ldr	r1, [r3, #8]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f000 fc55 	bl	8005470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	609a      	str	r2, [r3, #8]
      break;
 8004bde:	e04f      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f000 fc3e 	bl	8005470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c02:	609a      	str	r2, [r3, #8]
      break;
 8004c04:	e03c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 fbb2 	bl	800537c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2150      	movs	r1, #80	; 0x50
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fc0b 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004c24:	e02c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fbd1 	bl	80053da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2160      	movs	r1, #96	; 0x60
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fbfb 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004c44:	e01c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fb92 	bl	800537c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2140      	movs	r1, #64	; 0x40
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fbeb 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004c64:	e00c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f000 fbe2 	bl	800543a <TIM_ITRx_SetConfig>
      break;
 8004c76:	e003      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e000      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a40      	ldr	r2, [pc, #256]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d00f      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3d      	ldr	r2, [pc, #244]	; (8004db4 <TIM_Base_SetConfig+0x118>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	; (8004db8 <TIM_Base_SetConfig+0x11c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <TIM_Base_SetConfig+0x120>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3a      	ldr	r2, [pc, #232]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d108      	bne.n	8004cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2f      	ldr	r2, [pc, #188]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01f      	beq.n	8004d36 <TIM_Base_SetConfig+0x9a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d01b      	beq.n	8004d36 <TIM_Base_SetConfig+0x9a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	; (8004db4 <TIM_Base_SetConfig+0x118>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d017      	beq.n	8004d36 <TIM_Base_SetConfig+0x9a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2b      	ldr	r2, [pc, #172]	; (8004db8 <TIM_Base_SetConfig+0x11c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <TIM_Base_SetConfig+0x9a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <TIM_Base_SetConfig+0x120>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00f      	beq.n	8004d36 <TIM_Base_SetConfig+0x9a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00b      	beq.n	8004d36 <TIM_Base_SetConfig+0x9a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <TIM_Base_SetConfig+0x128>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d007      	beq.n	8004d36 <TIM_Base_SetConfig+0x9a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <TIM_Base_SetConfig+0x12c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_Base_SetConfig+0x9a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <TIM_Base_SetConfig+0x130>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a10      	ldr	r2, [pc, #64]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00f      	beq.n	8004d94 <TIM_Base_SetConfig+0xf8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0xf8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <TIM_Base_SetConfig+0x128>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0xf8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <TIM_Base_SetConfig+0x12c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0xf8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <TIM_Base_SetConfig+0x130>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40013400 	.word	0x40013400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800

08004dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f023 0201 	bic.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0302 	bic.w	r3, r3, #2
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <TIM_OC1_SetConfig+0x10c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00f      	beq.n	8004e50 <TIM_OC1_SetConfig+0x80>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <TIM_OC1_SetConfig+0x110>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <TIM_OC1_SetConfig+0x80>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <TIM_OC1_SetConfig+0x114>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_OC1_SetConfig+0x80>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <TIM_OC1_SetConfig+0x118>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_OC1_SetConfig+0x80>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a28      	ldr	r2, [pc, #160]	; (8004eec <TIM_OC1_SetConfig+0x11c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10c      	bne.n	8004e6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0308 	bic.w	r3, r3, #8
 8004e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 0304 	bic.w	r3, r3, #4
 8004e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <TIM_OC1_SetConfig+0x10c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00f      	beq.n	8004e92 <TIM_OC1_SetConfig+0xc2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <TIM_OC1_SetConfig+0x110>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <TIM_OC1_SetConfig+0xc2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <TIM_OC1_SetConfig+0x114>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_OC1_SetConfig+0xc2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <TIM_OC1_SetConfig+0x118>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_OC1_SetConfig+0xc2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a17      	ldr	r2, [pc, #92]	; (8004eec <TIM_OC1_SetConfig+0x11c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d111      	bne.n	8004eb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800

08004ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0210 	bic.w	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0320 	bic.w	r3, r3, #32
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a28      	ldr	r2, [pc, #160]	; (8004ff0 <TIM_OC2_SetConfig+0x100>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC2_SetConfig+0x6c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <TIM_OC2_SetConfig+0x104>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10d      	bne.n	8004f78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <TIM_OC2_SetConfig+0x100>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_OC2_SetConfig+0xb0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <TIM_OC2_SetConfig+0x104>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_OC2_SetConfig+0xb0>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a1b      	ldr	r2, [pc, #108]	; (8004ff8 <TIM_OC2_SetConfig+0x108>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_OC2_SetConfig+0xb0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a1a      	ldr	r2, [pc, #104]	; (8004ffc <TIM_OC2_SetConfig+0x10c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC2_SetConfig+0xb0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a19      	ldr	r2, [pc, #100]	; (8005000 <TIM_OC2_SetConfig+0x110>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d113      	bne.n	8004fc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40013400 	.word	0x40013400
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40014400 	.word	0x40014400
 8005000:	40014800 	.word	0x40014800

08005004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a27      	ldr	r2, [pc, #156]	; (8005100 <TIM_OC3_SetConfig+0xfc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC3_SetConfig+0x6a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a26      	ldr	r2, [pc, #152]	; (8005104 <TIM_OC3_SetConfig+0x100>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10d      	bne.n	800508a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <TIM_OC3_SetConfig+0xfc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00f      	beq.n	80050b2 <TIM_OC3_SetConfig+0xae>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <TIM_OC3_SetConfig+0x100>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00b      	beq.n	80050b2 <TIM_OC3_SetConfig+0xae>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <TIM_OC3_SetConfig+0x104>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <TIM_OC3_SetConfig+0xae>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <TIM_OC3_SetConfig+0x108>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_OC3_SetConfig+0xae>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a18      	ldr	r2, [pc, #96]	; (8005110 <TIM_OC3_SetConfig+0x10c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d113      	bne.n	80050da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40013400 	.word	0x40013400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800

08005114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <TIM_OC4_SetConfig+0xc0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_OC4_SetConfig+0x84>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <TIM_OC4_SetConfig+0xc4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00b      	beq.n	8005198 <TIM_OC4_SetConfig+0x84>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a16      	ldr	r2, [pc, #88]	; (80051dc <TIM_OC4_SetConfig+0xc8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_OC4_SetConfig+0x84>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <TIM_OC4_SetConfig+0xcc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC4_SetConfig+0x84>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <TIM_OC4_SetConfig+0xd0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d109      	bne.n	80051ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800

080051e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800522c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	041b      	lsls	r3, r3, #16
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a17      	ldr	r2, [pc, #92]	; (800529c <TIM_OC5_SetConfig+0xb4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00f      	beq.n	8005262 <TIM_OC5_SetConfig+0x7a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <TIM_OC5_SetConfig+0xb8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_OC5_SetConfig+0x7a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <TIM_OC5_SetConfig+0xbc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <TIM_OC5_SetConfig+0x7a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <TIM_OC5_SetConfig+0xc0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_OC5_SetConfig+0x7a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <TIM_OC5_SetConfig+0xc4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d109      	bne.n	8005276 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	621a      	str	r2, [r3, #32]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800

080052b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	051b      	lsls	r3, r3, #20
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <TIM_OC6_SetConfig+0xb8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_OC6_SetConfig+0x7c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <TIM_OC6_SetConfig+0xbc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00b      	beq.n	800532c <TIM_OC6_SetConfig+0x7c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a16      	ldr	r2, [pc, #88]	; (8005370 <TIM_OC6_SetConfig+0xc0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_OC6_SetConfig+0x7c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a15      	ldr	r2, [pc, #84]	; (8005374 <TIM_OC6_SetConfig+0xc4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC6_SetConfig+0x7c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a14      	ldr	r2, [pc, #80]	; (8005378 <TIM_OC6_SetConfig+0xc8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d109      	bne.n	8005340 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	029b      	lsls	r3, r3, #10
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40013400 	.word	0x40013400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f023 030a 	bic.w	r3, r3, #10
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053da:	b480      	push	{r7}
 80053dc:	b087      	sub	sp, #28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0210 	bic.w	r2, r3, #16
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	031b      	lsls	r3, r3, #12
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	f043 0307 	orr.w	r3, r3, #7
 800545c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	021a      	lsls	r2, r3, #8
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	431a      	orrs	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e068      	b.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2e      	ldr	r2, [pc, #184]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2d      	ldr	r2, [pc, #180]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d108      	bne.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005502:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01d      	beq.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553a:	d018      	beq.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d013      	beq.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00e      	beq.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d009      	beq.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a14      	ldr	r2, [pc, #80]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d10c      	bne.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	4313      	orrs	r3, r2
 800557e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40012c00 	.word	0x40012c00
 80055ac:	40013400 	.word	0x40013400
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40014000 	.word	0x40014000

080055c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e042      	b.n	8005658 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fb fbbf 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2224      	movs	r2, #36	; 0x24
 80055ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0201 	bic.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8c4 	bl	8005790 <UART_SetConfig>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e022      	b.n	8005658 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fbb4 	bl	8005d88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800562e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fc3b 	bl	8005ecc <UART_CheckIdleState>
 8005656:	4603      	mov	r3, r0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005676:	2b20      	cmp	r3, #32
 8005678:	f040 8084 	bne.w	8005784 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_UART_Transmit+0x28>
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e07c      	b.n	8005786 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_UART_Transmit+0x3a>
 8005696:	2302      	movs	r3, #2
 8005698:	e075      	b.n	8005786 <HAL_UART_Transmit+0x126>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2221      	movs	r2, #33	; 0x21
 80056ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b2:	f7fb fcf9 	bl	80010a8 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d108      	bne.n	80056e4 <HAL_UART_Transmit+0x84>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e003      	b.n	80056ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80056f4:	e02d      	b.n	8005752 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fc2e 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e03a      	b.n	8005786 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	881a      	ldrh	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005722:	b292      	uxth	r2, r2
 8005724:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	3302      	adds	r3, #2
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e008      	b.n	8005740 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b292      	uxth	r2, r2
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1cb      	bne.n	80056f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2140      	movs	r1, #64	; 0x40
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fbfa 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e006      	b.n	8005786 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b08c      	sub	sp, #48	; 0x30
 8005796:	af00      	add	r7, sp, #0
 8005798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4baa      	ldr	r3, [pc, #680]	; (8005a68 <UART_SetConfig+0x2d8>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a9f      	ldr	r2, [pc, #636]	; (8005a6c <UART_SetConfig+0x2dc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005806:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005810:	430b      	orrs	r3, r1
 8005812:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	f023 010f 	bic.w	r1, r3, #15
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a90      	ldr	r2, [pc, #576]	; (8005a70 <UART_SetConfig+0x2e0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d125      	bne.n	8005880 <UART_SetConfig+0xf0>
 8005834:	4b8f      	ldr	r3, [pc, #572]	; (8005a74 <UART_SetConfig+0x2e4>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d81a      	bhi.n	8005878 <UART_SetConfig+0xe8>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0xb8>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005859 	.word	0x08005859
 800584c:	08005869 	.word	0x08005869
 8005850:	08005861 	.word	0x08005861
 8005854:	08005871 	.word	0x08005871
 8005858:	2301      	movs	r3, #1
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585e:	e116      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005860:	2302      	movs	r3, #2
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005866:	e112      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586e:	e10e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005876:	e10a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800587e:	e106      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a7c      	ldr	r2, [pc, #496]	; (8005a78 <UART_SetConfig+0x2e8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d138      	bne.n	80058fc <UART_SetConfig+0x16c>
 800588a:	4b7a      	ldr	r3, [pc, #488]	; (8005a74 <UART_SetConfig+0x2e4>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f003 030c 	and.w	r3, r3, #12
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d82d      	bhi.n	80058f4 <UART_SetConfig+0x164>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <UART_SetConfig+0x110>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058f5 	.word	0x080058f5
 80058ac:	080058f5 	.word	0x080058f5
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	080058f5 	.word	0x080058f5
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	080058dd 	.word	0x080058dd
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	080058f5 	.word	0x080058f5
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	2300      	movs	r3, #0
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058da:	e0d8      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058dc:	2302      	movs	r3, #2
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e2:	e0d4      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ea:	e0d0      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f2:	e0cc      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fa:	e0c8      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5e      	ldr	r2, [pc, #376]	; (8005a7c <UART_SetConfig+0x2ec>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d125      	bne.n	8005952 <UART_SetConfig+0x1c2>
 8005906:	4b5b      	ldr	r3, [pc, #364]	; (8005a74 <UART_SetConfig+0x2e4>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d016      	beq.n	8005942 <UART_SetConfig+0x1b2>
 8005914:	2b30      	cmp	r3, #48	; 0x30
 8005916:	d818      	bhi.n	800594a <UART_SetConfig+0x1ba>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d00a      	beq.n	8005932 <UART_SetConfig+0x1a2>
 800591c:	2b20      	cmp	r3, #32
 800591e:	d814      	bhi.n	800594a <UART_SetConfig+0x1ba>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <UART_SetConfig+0x19a>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d008      	beq.n	800593a <UART_SetConfig+0x1aa>
 8005928:	e00f      	b.n	800594a <UART_SetConfig+0x1ba>
 800592a:	2300      	movs	r3, #0
 800592c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005930:	e0ad      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005932:	2302      	movs	r3, #2
 8005934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005938:	e0a9      	b.n	8005a8e <UART_SetConfig+0x2fe>
 800593a:	2304      	movs	r3, #4
 800593c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005940:	e0a5      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005942:	2308      	movs	r3, #8
 8005944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005948:	e0a1      	b.n	8005a8e <UART_SetConfig+0x2fe>
 800594a:	2310      	movs	r3, #16
 800594c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005950:	e09d      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a4a      	ldr	r2, [pc, #296]	; (8005a80 <UART_SetConfig+0x2f0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d125      	bne.n	80059a8 <UART_SetConfig+0x218>
 800595c:	4b45      	ldr	r3, [pc, #276]	; (8005a74 <UART_SetConfig+0x2e4>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005966:	2bc0      	cmp	r3, #192	; 0xc0
 8005968:	d016      	beq.n	8005998 <UART_SetConfig+0x208>
 800596a:	2bc0      	cmp	r3, #192	; 0xc0
 800596c:	d818      	bhi.n	80059a0 <UART_SetConfig+0x210>
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d00a      	beq.n	8005988 <UART_SetConfig+0x1f8>
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d814      	bhi.n	80059a0 <UART_SetConfig+0x210>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <UART_SetConfig+0x1f0>
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d008      	beq.n	8005990 <UART_SetConfig+0x200>
 800597e:	e00f      	b.n	80059a0 <UART_SetConfig+0x210>
 8005980:	2300      	movs	r3, #0
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005986:	e082      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005988:	2302      	movs	r3, #2
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e07e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005990:	2304      	movs	r3, #4
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e07a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005998:	2308      	movs	r3, #8
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599e:	e076      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059a0:	2310      	movs	r3, #16
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a6:	e072      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a35      	ldr	r2, [pc, #212]	; (8005a84 <UART_SetConfig+0x2f4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d12a      	bne.n	8005a08 <UART_SetConfig+0x278>
 80059b2:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <UART_SetConfig+0x2e4>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c0:	d01a      	beq.n	80059f8 <UART_SetConfig+0x268>
 80059c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c6:	d81b      	bhi.n	8005a00 <UART_SetConfig+0x270>
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059cc:	d00c      	beq.n	80059e8 <UART_SetConfig+0x258>
 80059ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d2:	d815      	bhi.n	8005a00 <UART_SetConfig+0x270>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <UART_SetConfig+0x250>
 80059d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059dc:	d008      	beq.n	80059f0 <UART_SetConfig+0x260>
 80059de:	e00f      	b.n	8005a00 <UART_SetConfig+0x270>
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e6:	e052      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059e8:	2302      	movs	r3, #2
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ee:	e04e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f6:	e04a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fe:	e046      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a06:	e042      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <UART_SetConfig+0x2dc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d13a      	bne.n	8005a88 <UART_SetConfig+0x2f8>
 8005a12:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <UART_SetConfig+0x2e4>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a20:	d01a      	beq.n	8005a58 <UART_SetConfig+0x2c8>
 8005a22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a26:	d81b      	bhi.n	8005a60 <UART_SetConfig+0x2d0>
 8005a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2c:	d00c      	beq.n	8005a48 <UART_SetConfig+0x2b8>
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a32:	d815      	bhi.n	8005a60 <UART_SetConfig+0x2d0>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <UART_SetConfig+0x2b0>
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d008      	beq.n	8005a50 <UART_SetConfig+0x2c0>
 8005a3e:	e00f      	b.n	8005a60 <UART_SetConfig+0x2d0>
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a46:	e022      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e01e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a50:	2304      	movs	r3, #4
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a56:	e01a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a58:	2308      	movs	r3, #8
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5e:	e016      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a60:	2310      	movs	r3, #16
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a66:	e012      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a68:	cfff69f3 	.word	0xcfff69f3
 8005a6c:	40008000 	.word	0x40008000
 8005a70:	40013800 	.word	0x40013800
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40004400 	.word	0x40004400
 8005a7c:	40004800 	.word	0x40004800
 8005a80:	40004c00 	.word	0x40004c00
 8005a84:	40005000 	.word	0x40005000
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4aae      	ldr	r2, [pc, #696]	; (8005d4c <UART_SetConfig+0x5bc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	f040 8097 	bne.w	8005bc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d823      	bhi.n	8005aea <UART_SetConfig+0x35a>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x318>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005adb 	.word	0x08005adb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005aeb 	.word	0x08005aeb
 8005ac4:	08005aeb 	.word	0x08005aeb
 8005ac8:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fe f84c 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b9e      	ldr	r3, [pc, #632]	; (8005d50 <UART_SetConfig+0x5c0>)
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ad8:	e00d      	b.n	8005af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fd ffad 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 8005ade:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ae0:	e009      	b.n	8005af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ae8:	e005      	b.n	8005af6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8130 	beq.w	8005d5e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	4a94      	ldr	r2, [pc, #592]	; (8005d54 <UART_SetConfig+0x5c4>)
 8005b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	4413      	add	r3, r2
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d305      	bcc.n	8005b2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d903      	bls.n	8005b36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b34:	e113      	b.n	8005d5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	2200      	movs	r2, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	60fa      	str	r2, [r7, #12]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	4a84      	ldr	r2, [pc, #528]	; (8005d54 <UART_SetConfig+0x5c4>)
 8005b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b58:	f7fa fba2 	bl	80002a0 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4610      	mov	r0, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	020b      	lsls	r3, r1, #8
 8005b6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b72:	0202      	lsls	r2, r0, #8
 8005b74:	6979      	ldr	r1, [r7, #20]
 8005b76:	6849      	ldr	r1, [r1, #4]
 8005b78:	0849      	lsrs	r1, r1, #1
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	4605      	mov	r5, r0
 8005b80:	eb12 0804 	adds.w	r8, r2, r4
 8005b84:	eb43 0905 	adc.w	r9, r3, r5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	469a      	mov	sl, r3
 8005b90:	4693      	mov	fp, r2
 8005b92:	4652      	mov	r2, sl
 8005b94:	465b      	mov	r3, fp
 8005b96:	4640      	mov	r0, r8
 8005b98:	4649      	mov	r1, r9
 8005b9a:	f7fa fb81 	bl	80002a0 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bac:	d308      	bcc.n	8005bc0 <UART_SetConfig+0x430>
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb4:	d204      	bcs.n	8005bc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	e0ce      	b.n	8005d5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bc6:	e0ca      	b.n	8005d5e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd0:	d166      	bne.n	8005ca0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d827      	bhi.n	8005c2a <UART_SetConfig+0x49a>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x450>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c2b 	.word	0x08005c2b
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c2b 	.word	0x08005c2b
 8005bf8:	08005c2b 	.word	0x08005c2b
 8005bfc:	08005c2b 	.word	0x08005c2b
 8005c00:	08005c23 	.word	0x08005c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fd ffb0 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 8005c08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c0a:	e014      	b.n	8005c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0c:	f7fd ffc2 	bl	8003b94 <HAL_RCC_GetPCLK2Freq>
 8005c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c12:	e010      	b.n	8005c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c14:	4b4e      	ldr	r3, [pc, #312]	; (8005d50 <UART_SetConfig+0x5c0>)
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c18:	e00d      	b.n	8005c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7fd ff0d 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 8005c1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c20:	e009      	b.n	8005c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c28:	e005      	b.n	8005c36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8090 	beq.w	8005d5e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	4a44      	ldr	r2, [pc, #272]	; (8005d54 <UART_SetConfig+0x5c4>)
 8005c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c50:	005a      	lsls	r2, r3, #1
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	441a      	add	r2, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c62:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d916      	bls.n	8005c98 <UART_SetConfig+0x508>
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d212      	bcs.n	8005c98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f023 030f 	bic.w	r3, r3, #15
 8005c7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	8bfb      	ldrh	r3, [r7, #30]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	8bfa      	ldrh	r2, [r7, #30]
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	e062      	b.n	8005d5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c9e:	e05e      	b.n	8005d5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d828      	bhi.n	8005cfa <UART_SetConfig+0x56a>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0x520>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005cfb 	.word	0x08005cfb
 8005cc0:	08005ceb 	.word	0x08005ceb
 8005cc4:	08005cfb 	.word	0x08005cfb
 8005cc8:	08005cfb 	.word	0x08005cfb
 8005ccc:	08005cfb 	.word	0x08005cfb
 8005cd0:	08005cf3 	.word	0x08005cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd4:	f7fd ff48 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 8005cd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cda:	e014      	b.n	8005d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7fd ff5a 	bl	8003b94 <HAL_RCC_GetPCLK2Freq>
 8005ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ce2:	e010      	b.n	8005d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce4:	4b1a      	ldr	r3, [pc, #104]	; (8005d50 <UART_SetConfig+0x5c0>)
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ce8:	e00d      	b.n	8005d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cea:	f7fd fea5 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 8005cee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cf0:	e009      	b.n	8005d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cf8:	e005      	b.n	8005d06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d04:	bf00      	nop
    }

    if (pclk != 0U)
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d028      	beq.n	8005d5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <UART_SetConfig+0x5c4>)
 8005d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	441a      	add	r2, r3
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	d910      	bls.n	8005d58 <UART_SetConfig+0x5c8>
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3c:	d20c      	bcs.n	8005d58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e009      	b.n	8005d5e <UART_SetConfig+0x5ce>
 8005d4a:	bf00      	nop
 8005d4c:	40008000 	.word	0x40008000
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	08006ce0 	.word	0x08006ce0
      }
      else
      {
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2200      	movs	r2, #0
 8005d72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2200      	movs	r2, #0
 8005d78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3730      	adds	r7, #48	; 0x30
 8005d82:	46bd      	mov	sp, r7
 8005d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e86:	d10a      	bne.n	8005e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005edc:	f7fb f8e4 	bl	80010a8 <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d10e      	bne.n	8005f0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f82f 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e025      	b.n	8005f5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d10e      	bne.n	8005f3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f819 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e00f      	b.n	8005f5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b09c      	sub	sp, #112	; 0x70
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	e0a9      	b.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	f000 80a5 	beq.w	80060c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7fb f893 	bl	80010a8 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d140      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e069      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d051      	beq.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006032:	d149      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
 800605e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	613b      	str	r3, [r7, #16]
   return(result);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	66bb      	str	r3, [r7, #104]	; 0x68
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006090:	623a      	str	r2, [r7, #32]
 8006092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	69f9      	ldr	r1, [r7, #28]
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	61bb      	str	r3, [r7, #24]
   return(result);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e010      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69da      	ldr	r2, [r3, #28]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4013      	ands	r3, r2
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	bf0c      	ite	eq
 80060d8:	2301      	moveq	r3, #1
 80060da:	2300      	movne	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	f43f af46 	beq.w	8005f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3770      	adds	r7, #112	; 0x70
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_UARTEx_DisableFifoMode+0x16>
 8006104:	2302      	movs	r3, #2
 8006106:	e027      	b.n	8006158 <HAL_UARTEx_DisableFifoMode+0x66>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2224      	movs	r2, #36	; 0x24
 8006114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0201 	bic.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006136:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006178:	2302      	movs	r3, #2
 800617a:	e02d      	b.n	80061d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f84f 	bl	800625c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e02d      	b.n	8006254 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2224      	movs	r2, #36	; 0x24
 8006204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f811 	bl	800625c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006268:	2b00      	cmp	r3, #0
 800626a:	d108      	bne.n	800627e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800627c:	e031      	b.n	80062e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800627e:	2308      	movs	r3, #8
 8006280:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006282:	2308      	movs	r3, #8
 8006284:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	0e5b      	lsrs	r3, r3, #25
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	0f5b      	lsrs	r3, r3, #29
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	7b3a      	ldrb	r2, [r7, #12]
 80062aa:	4911      	ldr	r1, [pc, #68]	; (80062f0 <UARTEx_SetNbDataToProcess+0x94>)
 80062ac:	5c8a      	ldrb	r2, [r1, r2]
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062b2:	7b3a      	ldrb	r2, [r7, #12]
 80062b4:	490f      	ldr	r1, [pc, #60]	; (80062f4 <UARTEx_SetNbDataToProcess+0x98>)
 80062b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062bc:	b29a      	uxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	7b7a      	ldrb	r2, [r7, #13]
 80062c8:	4909      	ldr	r1, [pc, #36]	; (80062f0 <UARTEx_SetNbDataToProcess+0x94>)
 80062ca:	5c8a      	ldrb	r2, [r1, r2]
 80062cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062d0:	7b7a      	ldrb	r2, [r7, #13]
 80062d2:	4908      	ldr	r1, [pc, #32]	; (80062f4 <UARTEx_SetNbDataToProcess+0x98>)
 80062d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	08006cf8 	.word	0x08006cf8
 80062f4:	08006d00 	.word	0x08006d00

080062f8 <__errno>:
 80062f8:	4b01      	ldr	r3, [pc, #4]	; (8006300 <__errno+0x8>)
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	2000000c 	.word	0x2000000c

08006304 <__libc_init_array>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	4d0d      	ldr	r5, [pc, #52]	; (800633c <__libc_init_array+0x38>)
 8006308:	4c0d      	ldr	r4, [pc, #52]	; (8006340 <__libc_init_array+0x3c>)
 800630a:	1b64      	subs	r4, r4, r5
 800630c:	10a4      	asrs	r4, r4, #2
 800630e:	2600      	movs	r6, #0
 8006310:	42a6      	cmp	r6, r4
 8006312:	d109      	bne.n	8006328 <__libc_init_array+0x24>
 8006314:	4d0b      	ldr	r5, [pc, #44]	; (8006344 <__libc_init_array+0x40>)
 8006316:	4c0c      	ldr	r4, [pc, #48]	; (8006348 <__libc_init_array+0x44>)
 8006318:	f000 fc8e 	bl	8006c38 <_init>
 800631c:	1b64      	subs	r4, r4, r5
 800631e:	10a4      	asrs	r4, r4, #2
 8006320:	2600      	movs	r6, #0
 8006322:	42a6      	cmp	r6, r4
 8006324:	d105      	bne.n	8006332 <__libc_init_array+0x2e>
 8006326:	bd70      	pop	{r4, r5, r6, pc}
 8006328:	f855 3b04 	ldr.w	r3, [r5], #4
 800632c:	4798      	blx	r3
 800632e:	3601      	adds	r6, #1
 8006330:	e7ee      	b.n	8006310 <__libc_init_array+0xc>
 8006332:	f855 3b04 	ldr.w	r3, [r5], #4
 8006336:	4798      	blx	r3
 8006338:	3601      	adds	r6, #1
 800633a:	e7f2      	b.n	8006322 <__libc_init_array+0x1e>
 800633c:	08006d44 	.word	0x08006d44
 8006340:	08006d44 	.word	0x08006d44
 8006344:	08006d44 	.word	0x08006d44
 8006348:	08006d48 	.word	0x08006d48

0800634c <memset>:
 800634c:	4402      	add	r2, r0
 800634e:	4603      	mov	r3, r0
 8006350:	4293      	cmp	r3, r2
 8006352:	d100      	bne.n	8006356 <memset+0xa>
 8006354:	4770      	bx	lr
 8006356:	f803 1b01 	strb.w	r1, [r3], #1
 800635a:	e7f9      	b.n	8006350 <memset+0x4>

0800635c <siprintf>:
 800635c:	b40e      	push	{r1, r2, r3}
 800635e:	b500      	push	{lr}
 8006360:	b09c      	sub	sp, #112	; 0x70
 8006362:	ab1d      	add	r3, sp, #116	; 0x74
 8006364:	9002      	str	r0, [sp, #8]
 8006366:	9006      	str	r0, [sp, #24]
 8006368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800636c:	4809      	ldr	r0, [pc, #36]	; (8006394 <siprintf+0x38>)
 800636e:	9107      	str	r1, [sp, #28]
 8006370:	9104      	str	r1, [sp, #16]
 8006372:	4909      	ldr	r1, [pc, #36]	; (8006398 <siprintf+0x3c>)
 8006374:	f853 2b04 	ldr.w	r2, [r3], #4
 8006378:	9105      	str	r1, [sp, #20]
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	a902      	add	r1, sp, #8
 8006380:	f000 f868 	bl	8006454 <_svfiprintf_r>
 8006384:	9b02      	ldr	r3, [sp, #8]
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	b01c      	add	sp, #112	; 0x70
 800638c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006390:	b003      	add	sp, #12
 8006392:	4770      	bx	lr
 8006394:	2000000c 	.word	0x2000000c
 8006398:	ffff0208 	.word	0xffff0208

0800639c <__ssputs_r>:
 800639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a0:	688e      	ldr	r6, [r1, #8]
 80063a2:	429e      	cmp	r6, r3
 80063a4:	4682      	mov	sl, r0
 80063a6:	460c      	mov	r4, r1
 80063a8:	4690      	mov	r8, r2
 80063aa:	461f      	mov	r7, r3
 80063ac:	d838      	bhi.n	8006420 <__ssputs_r+0x84>
 80063ae:	898a      	ldrh	r2, [r1, #12]
 80063b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063b4:	d032      	beq.n	800641c <__ssputs_r+0x80>
 80063b6:	6825      	ldr	r5, [r4, #0]
 80063b8:	6909      	ldr	r1, [r1, #16]
 80063ba:	eba5 0901 	sub.w	r9, r5, r1
 80063be:	6965      	ldr	r5, [r4, #20]
 80063c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063c8:	3301      	adds	r3, #1
 80063ca:	444b      	add	r3, r9
 80063cc:	106d      	asrs	r5, r5, #1
 80063ce:	429d      	cmp	r5, r3
 80063d0:	bf38      	it	cc
 80063d2:	461d      	movcc	r5, r3
 80063d4:	0553      	lsls	r3, r2, #21
 80063d6:	d531      	bpl.n	800643c <__ssputs_r+0xa0>
 80063d8:	4629      	mov	r1, r5
 80063da:	f000 fb63 	bl	8006aa4 <_malloc_r>
 80063de:	4606      	mov	r6, r0
 80063e0:	b950      	cbnz	r0, 80063f8 <__ssputs_r+0x5c>
 80063e2:	230c      	movs	r3, #12
 80063e4:	f8ca 3000 	str.w	r3, [sl]
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f8:	6921      	ldr	r1, [r4, #16]
 80063fa:	464a      	mov	r2, r9
 80063fc:	f000 fabe 	bl	800697c <memcpy>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	6126      	str	r6, [r4, #16]
 800640e:	6165      	str	r5, [r4, #20]
 8006410:	444e      	add	r6, r9
 8006412:	eba5 0509 	sub.w	r5, r5, r9
 8006416:	6026      	str	r6, [r4, #0]
 8006418:	60a5      	str	r5, [r4, #8]
 800641a:	463e      	mov	r6, r7
 800641c:	42be      	cmp	r6, r7
 800641e:	d900      	bls.n	8006422 <__ssputs_r+0x86>
 8006420:	463e      	mov	r6, r7
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	4632      	mov	r2, r6
 8006426:	4641      	mov	r1, r8
 8006428:	f000 fab6 	bl	8006998 <memmove>
 800642c:	68a3      	ldr	r3, [r4, #8]
 800642e:	1b9b      	subs	r3, r3, r6
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	4433      	add	r3, r6
 8006436:	6023      	str	r3, [r4, #0]
 8006438:	2000      	movs	r0, #0
 800643a:	e7db      	b.n	80063f4 <__ssputs_r+0x58>
 800643c:	462a      	mov	r2, r5
 800643e:	f000 fba5 	bl	8006b8c <_realloc_r>
 8006442:	4606      	mov	r6, r0
 8006444:	2800      	cmp	r0, #0
 8006446:	d1e1      	bne.n	800640c <__ssputs_r+0x70>
 8006448:	6921      	ldr	r1, [r4, #16]
 800644a:	4650      	mov	r0, sl
 800644c:	f000 fabe 	bl	80069cc <_free_r>
 8006450:	e7c7      	b.n	80063e2 <__ssputs_r+0x46>
	...

08006454 <_svfiprintf_r>:
 8006454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	4698      	mov	r8, r3
 800645a:	898b      	ldrh	r3, [r1, #12]
 800645c:	061b      	lsls	r3, r3, #24
 800645e:	b09d      	sub	sp, #116	; 0x74
 8006460:	4607      	mov	r7, r0
 8006462:	460d      	mov	r5, r1
 8006464:	4614      	mov	r4, r2
 8006466:	d50e      	bpl.n	8006486 <_svfiprintf_r+0x32>
 8006468:	690b      	ldr	r3, [r1, #16]
 800646a:	b963      	cbnz	r3, 8006486 <_svfiprintf_r+0x32>
 800646c:	2140      	movs	r1, #64	; 0x40
 800646e:	f000 fb19 	bl	8006aa4 <_malloc_r>
 8006472:	6028      	str	r0, [r5, #0]
 8006474:	6128      	str	r0, [r5, #16]
 8006476:	b920      	cbnz	r0, 8006482 <_svfiprintf_r+0x2e>
 8006478:	230c      	movs	r3, #12
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	f04f 30ff 	mov.w	r0, #4294967295
 8006480:	e0d1      	b.n	8006626 <_svfiprintf_r+0x1d2>
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	616b      	str	r3, [r5, #20]
 8006486:	2300      	movs	r3, #0
 8006488:	9309      	str	r3, [sp, #36]	; 0x24
 800648a:	2320      	movs	r3, #32
 800648c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006490:	f8cd 800c 	str.w	r8, [sp, #12]
 8006494:	2330      	movs	r3, #48	; 0x30
 8006496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006640 <_svfiprintf_r+0x1ec>
 800649a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800649e:	f04f 0901 	mov.w	r9, #1
 80064a2:	4623      	mov	r3, r4
 80064a4:	469a      	mov	sl, r3
 80064a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064aa:	b10a      	cbz	r2, 80064b0 <_svfiprintf_r+0x5c>
 80064ac:	2a25      	cmp	r2, #37	; 0x25
 80064ae:	d1f9      	bne.n	80064a4 <_svfiprintf_r+0x50>
 80064b0:	ebba 0b04 	subs.w	fp, sl, r4
 80064b4:	d00b      	beq.n	80064ce <_svfiprintf_r+0x7a>
 80064b6:	465b      	mov	r3, fp
 80064b8:	4622      	mov	r2, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	4638      	mov	r0, r7
 80064be:	f7ff ff6d 	bl	800639c <__ssputs_r>
 80064c2:	3001      	adds	r0, #1
 80064c4:	f000 80aa 	beq.w	800661c <_svfiprintf_r+0x1c8>
 80064c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ca:	445a      	add	r2, fp
 80064cc:	9209      	str	r2, [sp, #36]	; 0x24
 80064ce:	f89a 3000 	ldrb.w	r3, [sl]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80a2 	beq.w	800661c <_svfiprintf_r+0x1c8>
 80064d8:	2300      	movs	r3, #0
 80064da:	f04f 32ff 	mov.w	r2, #4294967295
 80064de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e2:	f10a 0a01 	add.w	sl, sl, #1
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	9307      	str	r3, [sp, #28]
 80064ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ee:	931a      	str	r3, [sp, #104]	; 0x68
 80064f0:	4654      	mov	r4, sl
 80064f2:	2205      	movs	r2, #5
 80064f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f8:	4851      	ldr	r0, [pc, #324]	; (8006640 <_svfiprintf_r+0x1ec>)
 80064fa:	f7f9 fe81 	bl	8000200 <memchr>
 80064fe:	9a04      	ldr	r2, [sp, #16]
 8006500:	b9d8      	cbnz	r0, 800653a <_svfiprintf_r+0xe6>
 8006502:	06d0      	lsls	r0, r2, #27
 8006504:	bf44      	itt	mi
 8006506:	2320      	movmi	r3, #32
 8006508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800650c:	0711      	lsls	r1, r2, #28
 800650e:	bf44      	itt	mi
 8006510:	232b      	movmi	r3, #43	; 0x2b
 8006512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006516:	f89a 3000 	ldrb.w	r3, [sl]
 800651a:	2b2a      	cmp	r3, #42	; 0x2a
 800651c:	d015      	beq.n	800654a <_svfiprintf_r+0xf6>
 800651e:	9a07      	ldr	r2, [sp, #28]
 8006520:	4654      	mov	r4, sl
 8006522:	2000      	movs	r0, #0
 8006524:	f04f 0c0a 	mov.w	ip, #10
 8006528:	4621      	mov	r1, r4
 800652a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800652e:	3b30      	subs	r3, #48	; 0x30
 8006530:	2b09      	cmp	r3, #9
 8006532:	d94e      	bls.n	80065d2 <_svfiprintf_r+0x17e>
 8006534:	b1b0      	cbz	r0, 8006564 <_svfiprintf_r+0x110>
 8006536:	9207      	str	r2, [sp, #28]
 8006538:	e014      	b.n	8006564 <_svfiprintf_r+0x110>
 800653a:	eba0 0308 	sub.w	r3, r0, r8
 800653e:	fa09 f303 	lsl.w	r3, r9, r3
 8006542:	4313      	orrs	r3, r2
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	46a2      	mov	sl, r4
 8006548:	e7d2      	b.n	80064f0 <_svfiprintf_r+0x9c>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	1d19      	adds	r1, r3, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	9103      	str	r1, [sp, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfbb      	ittet	lt
 8006556:	425b      	neglt	r3, r3
 8006558:	f042 0202 	orrlt.w	r2, r2, #2
 800655c:	9307      	strge	r3, [sp, #28]
 800655e:	9307      	strlt	r3, [sp, #28]
 8006560:	bfb8      	it	lt
 8006562:	9204      	strlt	r2, [sp, #16]
 8006564:	7823      	ldrb	r3, [r4, #0]
 8006566:	2b2e      	cmp	r3, #46	; 0x2e
 8006568:	d10c      	bne.n	8006584 <_svfiprintf_r+0x130>
 800656a:	7863      	ldrb	r3, [r4, #1]
 800656c:	2b2a      	cmp	r3, #42	; 0x2a
 800656e:	d135      	bne.n	80065dc <_svfiprintf_r+0x188>
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	1d1a      	adds	r2, r3, #4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	9203      	str	r2, [sp, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	bfb8      	it	lt
 800657c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006580:	3402      	adds	r4, #2
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006650 <_svfiprintf_r+0x1fc>
 8006588:	7821      	ldrb	r1, [r4, #0]
 800658a:	2203      	movs	r2, #3
 800658c:	4650      	mov	r0, sl
 800658e:	f7f9 fe37 	bl	8000200 <memchr>
 8006592:	b140      	cbz	r0, 80065a6 <_svfiprintf_r+0x152>
 8006594:	2340      	movs	r3, #64	; 0x40
 8006596:	eba0 000a 	sub.w	r0, r0, sl
 800659a:	fa03 f000 	lsl.w	r0, r3, r0
 800659e:	9b04      	ldr	r3, [sp, #16]
 80065a0:	4303      	orrs	r3, r0
 80065a2:	3401      	adds	r4, #1
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065aa:	4826      	ldr	r0, [pc, #152]	; (8006644 <_svfiprintf_r+0x1f0>)
 80065ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065b0:	2206      	movs	r2, #6
 80065b2:	f7f9 fe25 	bl	8000200 <memchr>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d038      	beq.n	800662c <_svfiprintf_r+0x1d8>
 80065ba:	4b23      	ldr	r3, [pc, #140]	; (8006648 <_svfiprintf_r+0x1f4>)
 80065bc:	bb1b      	cbnz	r3, 8006606 <_svfiprintf_r+0x1b2>
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	3307      	adds	r3, #7
 80065c2:	f023 0307 	bic.w	r3, r3, #7
 80065c6:	3308      	adds	r3, #8
 80065c8:	9303      	str	r3, [sp, #12]
 80065ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065cc:	4433      	add	r3, r6
 80065ce:	9309      	str	r3, [sp, #36]	; 0x24
 80065d0:	e767      	b.n	80064a2 <_svfiprintf_r+0x4e>
 80065d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d6:	460c      	mov	r4, r1
 80065d8:	2001      	movs	r0, #1
 80065da:	e7a5      	b.n	8006528 <_svfiprintf_r+0xd4>
 80065dc:	2300      	movs	r3, #0
 80065de:	3401      	adds	r4, #1
 80065e0:	9305      	str	r3, [sp, #20]
 80065e2:	4619      	mov	r1, r3
 80065e4:	f04f 0c0a 	mov.w	ip, #10
 80065e8:	4620      	mov	r0, r4
 80065ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ee:	3a30      	subs	r2, #48	; 0x30
 80065f0:	2a09      	cmp	r2, #9
 80065f2:	d903      	bls.n	80065fc <_svfiprintf_r+0x1a8>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0c5      	beq.n	8006584 <_svfiprintf_r+0x130>
 80065f8:	9105      	str	r1, [sp, #20]
 80065fa:	e7c3      	b.n	8006584 <_svfiprintf_r+0x130>
 80065fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006600:	4604      	mov	r4, r0
 8006602:	2301      	movs	r3, #1
 8006604:	e7f0      	b.n	80065e8 <_svfiprintf_r+0x194>
 8006606:	ab03      	add	r3, sp, #12
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	462a      	mov	r2, r5
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <_svfiprintf_r+0x1f8>)
 800660e:	a904      	add	r1, sp, #16
 8006610:	4638      	mov	r0, r7
 8006612:	f3af 8000 	nop.w
 8006616:	1c42      	adds	r2, r0, #1
 8006618:	4606      	mov	r6, r0
 800661a:	d1d6      	bne.n	80065ca <_svfiprintf_r+0x176>
 800661c:	89ab      	ldrh	r3, [r5, #12]
 800661e:	065b      	lsls	r3, r3, #25
 8006620:	f53f af2c 	bmi.w	800647c <_svfiprintf_r+0x28>
 8006624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006626:	b01d      	add	sp, #116	; 0x74
 8006628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662c:	ab03      	add	r3, sp, #12
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	462a      	mov	r2, r5
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <_svfiprintf_r+0x1f8>)
 8006634:	a904      	add	r1, sp, #16
 8006636:	4638      	mov	r0, r7
 8006638:	f000 f87a 	bl	8006730 <_printf_i>
 800663c:	e7eb      	b.n	8006616 <_svfiprintf_r+0x1c2>
 800663e:	bf00      	nop
 8006640:	08006d08 	.word	0x08006d08
 8006644:	08006d12 	.word	0x08006d12
 8006648:	00000000 	.word	0x00000000
 800664c:	0800639d 	.word	0x0800639d
 8006650:	08006d0e 	.word	0x08006d0e

08006654 <_printf_common>:
 8006654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006658:	4616      	mov	r6, r2
 800665a:	4699      	mov	r9, r3
 800665c:	688a      	ldr	r2, [r1, #8]
 800665e:	690b      	ldr	r3, [r1, #16]
 8006660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006664:	4293      	cmp	r3, r2
 8006666:	bfb8      	it	lt
 8006668:	4613      	movlt	r3, r2
 800666a:	6033      	str	r3, [r6, #0]
 800666c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006670:	4607      	mov	r7, r0
 8006672:	460c      	mov	r4, r1
 8006674:	b10a      	cbz	r2, 800667a <_printf_common+0x26>
 8006676:	3301      	adds	r3, #1
 8006678:	6033      	str	r3, [r6, #0]
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	0699      	lsls	r1, r3, #26
 800667e:	bf42      	ittt	mi
 8006680:	6833      	ldrmi	r3, [r6, #0]
 8006682:	3302      	addmi	r3, #2
 8006684:	6033      	strmi	r3, [r6, #0]
 8006686:	6825      	ldr	r5, [r4, #0]
 8006688:	f015 0506 	ands.w	r5, r5, #6
 800668c:	d106      	bne.n	800669c <_printf_common+0x48>
 800668e:	f104 0a19 	add.w	sl, r4, #25
 8006692:	68e3      	ldr	r3, [r4, #12]
 8006694:	6832      	ldr	r2, [r6, #0]
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	42ab      	cmp	r3, r5
 800669a:	dc26      	bgt.n	80066ea <_printf_common+0x96>
 800669c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066a0:	1e13      	subs	r3, r2, #0
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	bf18      	it	ne
 80066a6:	2301      	movne	r3, #1
 80066a8:	0692      	lsls	r2, r2, #26
 80066aa:	d42b      	bmi.n	8006704 <_printf_common+0xb0>
 80066ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066b0:	4649      	mov	r1, r9
 80066b2:	4638      	mov	r0, r7
 80066b4:	47c0      	blx	r8
 80066b6:	3001      	adds	r0, #1
 80066b8:	d01e      	beq.n	80066f8 <_printf_common+0xa4>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	68e5      	ldr	r5, [r4, #12]
 80066be:	6832      	ldr	r2, [r6, #0]
 80066c0:	f003 0306 	and.w	r3, r3, #6
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	bf08      	it	eq
 80066c8:	1aad      	subeq	r5, r5, r2
 80066ca:	68a3      	ldr	r3, [r4, #8]
 80066cc:	6922      	ldr	r2, [r4, #16]
 80066ce:	bf0c      	ite	eq
 80066d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066d4:	2500      	movne	r5, #0
 80066d6:	4293      	cmp	r3, r2
 80066d8:	bfc4      	itt	gt
 80066da:	1a9b      	subgt	r3, r3, r2
 80066dc:	18ed      	addgt	r5, r5, r3
 80066de:	2600      	movs	r6, #0
 80066e0:	341a      	adds	r4, #26
 80066e2:	42b5      	cmp	r5, r6
 80066e4:	d11a      	bne.n	800671c <_printf_common+0xc8>
 80066e6:	2000      	movs	r0, #0
 80066e8:	e008      	b.n	80066fc <_printf_common+0xa8>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4652      	mov	r2, sl
 80066ee:	4649      	mov	r1, r9
 80066f0:	4638      	mov	r0, r7
 80066f2:	47c0      	blx	r8
 80066f4:	3001      	adds	r0, #1
 80066f6:	d103      	bne.n	8006700 <_printf_common+0xac>
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006700:	3501      	adds	r5, #1
 8006702:	e7c6      	b.n	8006692 <_printf_common+0x3e>
 8006704:	18e1      	adds	r1, r4, r3
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	2030      	movs	r0, #48	; 0x30
 800670a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800670e:	4422      	add	r2, r4
 8006710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006718:	3302      	adds	r3, #2
 800671a:	e7c7      	b.n	80066ac <_printf_common+0x58>
 800671c:	2301      	movs	r3, #1
 800671e:	4622      	mov	r2, r4
 8006720:	4649      	mov	r1, r9
 8006722:	4638      	mov	r0, r7
 8006724:	47c0      	blx	r8
 8006726:	3001      	adds	r0, #1
 8006728:	d0e6      	beq.n	80066f8 <_printf_common+0xa4>
 800672a:	3601      	adds	r6, #1
 800672c:	e7d9      	b.n	80066e2 <_printf_common+0x8e>
	...

08006730 <_printf_i>:
 8006730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	7e0f      	ldrb	r7, [r1, #24]
 8006736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006738:	2f78      	cmp	r7, #120	; 0x78
 800673a:	4691      	mov	r9, r2
 800673c:	4680      	mov	r8, r0
 800673e:	460c      	mov	r4, r1
 8006740:	469a      	mov	sl, r3
 8006742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006746:	d807      	bhi.n	8006758 <_printf_i+0x28>
 8006748:	2f62      	cmp	r7, #98	; 0x62
 800674a:	d80a      	bhi.n	8006762 <_printf_i+0x32>
 800674c:	2f00      	cmp	r7, #0
 800674e:	f000 80d8 	beq.w	8006902 <_printf_i+0x1d2>
 8006752:	2f58      	cmp	r7, #88	; 0x58
 8006754:	f000 80a3 	beq.w	800689e <_printf_i+0x16e>
 8006758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800675c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006760:	e03a      	b.n	80067d8 <_printf_i+0xa8>
 8006762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006766:	2b15      	cmp	r3, #21
 8006768:	d8f6      	bhi.n	8006758 <_printf_i+0x28>
 800676a:	a101      	add	r1, pc, #4	; (adr r1, 8006770 <_printf_i+0x40>)
 800676c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006770:	080067c9 	.word	0x080067c9
 8006774:	080067dd 	.word	0x080067dd
 8006778:	08006759 	.word	0x08006759
 800677c:	08006759 	.word	0x08006759
 8006780:	08006759 	.word	0x08006759
 8006784:	08006759 	.word	0x08006759
 8006788:	080067dd 	.word	0x080067dd
 800678c:	08006759 	.word	0x08006759
 8006790:	08006759 	.word	0x08006759
 8006794:	08006759 	.word	0x08006759
 8006798:	08006759 	.word	0x08006759
 800679c:	080068e9 	.word	0x080068e9
 80067a0:	0800680d 	.word	0x0800680d
 80067a4:	080068cb 	.word	0x080068cb
 80067a8:	08006759 	.word	0x08006759
 80067ac:	08006759 	.word	0x08006759
 80067b0:	0800690b 	.word	0x0800690b
 80067b4:	08006759 	.word	0x08006759
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	08006759 	.word	0x08006759
 80067c0:	08006759 	.word	0x08006759
 80067c4:	080068d3 	.word	0x080068d3
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	1d1a      	adds	r2, r3, #4
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	602a      	str	r2, [r5, #0]
 80067d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067d8:	2301      	movs	r3, #1
 80067da:	e0a3      	b.n	8006924 <_printf_i+0x1f4>
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	6829      	ldr	r1, [r5, #0]
 80067e0:	0606      	lsls	r6, r0, #24
 80067e2:	f101 0304 	add.w	r3, r1, #4
 80067e6:	d50a      	bpl.n	80067fe <_printf_i+0xce>
 80067e8:	680e      	ldr	r6, [r1, #0]
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	2e00      	cmp	r6, #0
 80067ee:	da03      	bge.n	80067f8 <_printf_i+0xc8>
 80067f0:	232d      	movs	r3, #45	; 0x2d
 80067f2:	4276      	negs	r6, r6
 80067f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f8:	485e      	ldr	r0, [pc, #376]	; (8006974 <_printf_i+0x244>)
 80067fa:	230a      	movs	r3, #10
 80067fc:	e019      	b.n	8006832 <_printf_i+0x102>
 80067fe:	680e      	ldr	r6, [r1, #0]
 8006800:	602b      	str	r3, [r5, #0]
 8006802:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006806:	bf18      	it	ne
 8006808:	b236      	sxthne	r6, r6
 800680a:	e7ef      	b.n	80067ec <_printf_i+0xbc>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	1d19      	adds	r1, r3, #4
 8006812:	6029      	str	r1, [r5, #0]
 8006814:	0601      	lsls	r1, r0, #24
 8006816:	d501      	bpl.n	800681c <_printf_i+0xec>
 8006818:	681e      	ldr	r6, [r3, #0]
 800681a:	e002      	b.n	8006822 <_printf_i+0xf2>
 800681c:	0646      	lsls	r6, r0, #25
 800681e:	d5fb      	bpl.n	8006818 <_printf_i+0xe8>
 8006820:	881e      	ldrh	r6, [r3, #0]
 8006822:	4854      	ldr	r0, [pc, #336]	; (8006974 <_printf_i+0x244>)
 8006824:	2f6f      	cmp	r7, #111	; 0x6f
 8006826:	bf0c      	ite	eq
 8006828:	2308      	moveq	r3, #8
 800682a:	230a      	movne	r3, #10
 800682c:	2100      	movs	r1, #0
 800682e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006832:	6865      	ldr	r5, [r4, #4]
 8006834:	60a5      	str	r5, [r4, #8]
 8006836:	2d00      	cmp	r5, #0
 8006838:	bfa2      	ittt	ge
 800683a:	6821      	ldrge	r1, [r4, #0]
 800683c:	f021 0104 	bicge.w	r1, r1, #4
 8006840:	6021      	strge	r1, [r4, #0]
 8006842:	b90e      	cbnz	r6, 8006848 <_printf_i+0x118>
 8006844:	2d00      	cmp	r5, #0
 8006846:	d04d      	beq.n	80068e4 <_printf_i+0x1b4>
 8006848:	4615      	mov	r5, r2
 800684a:	fbb6 f1f3 	udiv	r1, r6, r3
 800684e:	fb03 6711 	mls	r7, r3, r1, r6
 8006852:	5dc7      	ldrb	r7, [r0, r7]
 8006854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006858:	4637      	mov	r7, r6
 800685a:	42bb      	cmp	r3, r7
 800685c:	460e      	mov	r6, r1
 800685e:	d9f4      	bls.n	800684a <_printf_i+0x11a>
 8006860:	2b08      	cmp	r3, #8
 8006862:	d10b      	bne.n	800687c <_printf_i+0x14c>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	07de      	lsls	r6, r3, #31
 8006868:	d508      	bpl.n	800687c <_printf_i+0x14c>
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	6861      	ldr	r1, [r4, #4]
 800686e:	4299      	cmp	r1, r3
 8006870:	bfde      	ittt	le
 8006872:	2330      	movle	r3, #48	; 0x30
 8006874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800687c:	1b52      	subs	r2, r2, r5
 800687e:	6122      	str	r2, [r4, #16]
 8006880:	f8cd a000 	str.w	sl, [sp]
 8006884:	464b      	mov	r3, r9
 8006886:	aa03      	add	r2, sp, #12
 8006888:	4621      	mov	r1, r4
 800688a:	4640      	mov	r0, r8
 800688c:	f7ff fee2 	bl	8006654 <_printf_common>
 8006890:	3001      	adds	r0, #1
 8006892:	d14c      	bne.n	800692e <_printf_i+0x1fe>
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	b004      	add	sp, #16
 800689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800689e:	4835      	ldr	r0, [pc, #212]	; (8006974 <_printf_i+0x244>)
 80068a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068a4:	6829      	ldr	r1, [r5, #0]
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068ac:	6029      	str	r1, [r5, #0]
 80068ae:	061d      	lsls	r5, r3, #24
 80068b0:	d514      	bpl.n	80068dc <_printf_i+0x1ac>
 80068b2:	07df      	lsls	r7, r3, #31
 80068b4:	bf44      	itt	mi
 80068b6:	f043 0320 	orrmi.w	r3, r3, #32
 80068ba:	6023      	strmi	r3, [r4, #0]
 80068bc:	b91e      	cbnz	r6, 80068c6 <_printf_i+0x196>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	f023 0320 	bic.w	r3, r3, #32
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	2310      	movs	r3, #16
 80068c8:	e7b0      	b.n	800682c <_printf_i+0xfc>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	f043 0320 	orr.w	r3, r3, #32
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	2378      	movs	r3, #120	; 0x78
 80068d4:	4828      	ldr	r0, [pc, #160]	; (8006978 <_printf_i+0x248>)
 80068d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068da:	e7e3      	b.n	80068a4 <_printf_i+0x174>
 80068dc:	0659      	lsls	r1, r3, #25
 80068de:	bf48      	it	mi
 80068e0:	b2b6      	uxthmi	r6, r6
 80068e2:	e7e6      	b.n	80068b2 <_printf_i+0x182>
 80068e4:	4615      	mov	r5, r2
 80068e6:	e7bb      	b.n	8006860 <_printf_i+0x130>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	6826      	ldr	r6, [r4, #0]
 80068ec:	6961      	ldr	r1, [r4, #20]
 80068ee:	1d18      	adds	r0, r3, #4
 80068f0:	6028      	str	r0, [r5, #0]
 80068f2:	0635      	lsls	r5, r6, #24
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	d501      	bpl.n	80068fc <_printf_i+0x1cc>
 80068f8:	6019      	str	r1, [r3, #0]
 80068fa:	e002      	b.n	8006902 <_printf_i+0x1d2>
 80068fc:	0670      	lsls	r0, r6, #25
 80068fe:	d5fb      	bpl.n	80068f8 <_printf_i+0x1c8>
 8006900:	8019      	strh	r1, [r3, #0]
 8006902:	2300      	movs	r3, #0
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	4615      	mov	r5, r2
 8006908:	e7ba      	b.n	8006880 <_printf_i+0x150>
 800690a:	682b      	ldr	r3, [r5, #0]
 800690c:	1d1a      	adds	r2, r3, #4
 800690e:	602a      	str	r2, [r5, #0]
 8006910:	681d      	ldr	r5, [r3, #0]
 8006912:	6862      	ldr	r2, [r4, #4]
 8006914:	2100      	movs	r1, #0
 8006916:	4628      	mov	r0, r5
 8006918:	f7f9 fc72 	bl	8000200 <memchr>
 800691c:	b108      	cbz	r0, 8006922 <_printf_i+0x1f2>
 800691e:	1b40      	subs	r0, r0, r5
 8006920:	6060      	str	r0, [r4, #4]
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	6123      	str	r3, [r4, #16]
 8006926:	2300      	movs	r3, #0
 8006928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692c:	e7a8      	b.n	8006880 <_printf_i+0x150>
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	462a      	mov	r2, r5
 8006932:	4649      	mov	r1, r9
 8006934:	4640      	mov	r0, r8
 8006936:	47d0      	blx	sl
 8006938:	3001      	adds	r0, #1
 800693a:	d0ab      	beq.n	8006894 <_printf_i+0x164>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	079b      	lsls	r3, r3, #30
 8006940:	d413      	bmi.n	800696a <_printf_i+0x23a>
 8006942:	68e0      	ldr	r0, [r4, #12]
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	4298      	cmp	r0, r3
 8006948:	bfb8      	it	lt
 800694a:	4618      	movlt	r0, r3
 800694c:	e7a4      	b.n	8006898 <_printf_i+0x168>
 800694e:	2301      	movs	r3, #1
 8006950:	4632      	mov	r2, r6
 8006952:	4649      	mov	r1, r9
 8006954:	4640      	mov	r0, r8
 8006956:	47d0      	blx	sl
 8006958:	3001      	adds	r0, #1
 800695a:	d09b      	beq.n	8006894 <_printf_i+0x164>
 800695c:	3501      	adds	r5, #1
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	9903      	ldr	r1, [sp, #12]
 8006962:	1a5b      	subs	r3, r3, r1
 8006964:	42ab      	cmp	r3, r5
 8006966:	dcf2      	bgt.n	800694e <_printf_i+0x21e>
 8006968:	e7eb      	b.n	8006942 <_printf_i+0x212>
 800696a:	2500      	movs	r5, #0
 800696c:	f104 0619 	add.w	r6, r4, #25
 8006970:	e7f5      	b.n	800695e <_printf_i+0x22e>
 8006972:	bf00      	nop
 8006974:	08006d19 	.word	0x08006d19
 8006978:	08006d2a 	.word	0x08006d2a

0800697c <memcpy>:
 800697c:	440a      	add	r2, r1
 800697e:	4291      	cmp	r1, r2
 8006980:	f100 33ff 	add.w	r3, r0, #4294967295
 8006984:	d100      	bne.n	8006988 <memcpy+0xc>
 8006986:	4770      	bx	lr
 8006988:	b510      	push	{r4, lr}
 800698a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006992:	4291      	cmp	r1, r2
 8006994:	d1f9      	bne.n	800698a <memcpy+0xe>
 8006996:	bd10      	pop	{r4, pc}

08006998 <memmove>:
 8006998:	4288      	cmp	r0, r1
 800699a:	b510      	push	{r4, lr}
 800699c:	eb01 0402 	add.w	r4, r1, r2
 80069a0:	d902      	bls.n	80069a8 <memmove+0x10>
 80069a2:	4284      	cmp	r4, r0
 80069a4:	4623      	mov	r3, r4
 80069a6:	d807      	bhi.n	80069b8 <memmove+0x20>
 80069a8:	1e43      	subs	r3, r0, #1
 80069aa:	42a1      	cmp	r1, r4
 80069ac:	d008      	beq.n	80069c0 <memmove+0x28>
 80069ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069b6:	e7f8      	b.n	80069aa <memmove+0x12>
 80069b8:	4402      	add	r2, r0
 80069ba:	4601      	mov	r1, r0
 80069bc:	428a      	cmp	r2, r1
 80069be:	d100      	bne.n	80069c2 <memmove+0x2a>
 80069c0:	bd10      	pop	{r4, pc}
 80069c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069ca:	e7f7      	b.n	80069bc <memmove+0x24>

080069cc <_free_r>:
 80069cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ce:	2900      	cmp	r1, #0
 80069d0:	d044      	beq.n	8006a5c <_free_r+0x90>
 80069d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d6:	9001      	str	r0, [sp, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f1a1 0404 	sub.w	r4, r1, #4
 80069de:	bfb8      	it	lt
 80069e0:	18e4      	addlt	r4, r4, r3
 80069e2:	f000 f913 	bl	8006c0c <__malloc_lock>
 80069e6:	4a1e      	ldr	r2, [pc, #120]	; (8006a60 <_free_r+0x94>)
 80069e8:	9801      	ldr	r0, [sp, #4]
 80069ea:	6813      	ldr	r3, [r2, #0]
 80069ec:	b933      	cbnz	r3, 80069fc <_free_r+0x30>
 80069ee:	6063      	str	r3, [r4, #4]
 80069f0:	6014      	str	r4, [r2, #0]
 80069f2:	b003      	add	sp, #12
 80069f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069f8:	f000 b90e 	b.w	8006c18 <__malloc_unlock>
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	d908      	bls.n	8006a12 <_free_r+0x46>
 8006a00:	6825      	ldr	r5, [r4, #0]
 8006a02:	1961      	adds	r1, r4, r5
 8006a04:	428b      	cmp	r3, r1
 8006a06:	bf01      	itttt	eq
 8006a08:	6819      	ldreq	r1, [r3, #0]
 8006a0a:	685b      	ldreq	r3, [r3, #4]
 8006a0c:	1949      	addeq	r1, r1, r5
 8006a0e:	6021      	streq	r1, [r4, #0]
 8006a10:	e7ed      	b.n	80069ee <_free_r+0x22>
 8006a12:	461a      	mov	r2, r3
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	b10b      	cbz	r3, 8006a1c <_free_r+0x50>
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	d9fa      	bls.n	8006a12 <_free_r+0x46>
 8006a1c:	6811      	ldr	r1, [r2, #0]
 8006a1e:	1855      	adds	r5, r2, r1
 8006a20:	42a5      	cmp	r5, r4
 8006a22:	d10b      	bne.n	8006a3c <_free_r+0x70>
 8006a24:	6824      	ldr	r4, [r4, #0]
 8006a26:	4421      	add	r1, r4
 8006a28:	1854      	adds	r4, r2, r1
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	6011      	str	r1, [r2, #0]
 8006a2e:	d1e0      	bne.n	80069f2 <_free_r+0x26>
 8006a30:	681c      	ldr	r4, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	6053      	str	r3, [r2, #4]
 8006a36:	4421      	add	r1, r4
 8006a38:	6011      	str	r1, [r2, #0]
 8006a3a:	e7da      	b.n	80069f2 <_free_r+0x26>
 8006a3c:	d902      	bls.n	8006a44 <_free_r+0x78>
 8006a3e:	230c      	movs	r3, #12
 8006a40:	6003      	str	r3, [r0, #0]
 8006a42:	e7d6      	b.n	80069f2 <_free_r+0x26>
 8006a44:	6825      	ldr	r5, [r4, #0]
 8006a46:	1961      	adds	r1, r4, r5
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	bf04      	itt	eq
 8006a4c:	6819      	ldreq	r1, [r3, #0]
 8006a4e:	685b      	ldreq	r3, [r3, #4]
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	bf04      	itt	eq
 8006a54:	1949      	addeq	r1, r1, r5
 8006a56:	6021      	streq	r1, [r4, #0]
 8006a58:	6054      	str	r4, [r2, #4]
 8006a5a:	e7ca      	b.n	80069f2 <_free_r+0x26>
 8006a5c:	b003      	add	sp, #12
 8006a5e:	bd30      	pop	{r4, r5, pc}
 8006a60:	20000238 	.word	0x20000238

08006a64 <sbrk_aligned>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	4e0e      	ldr	r6, [pc, #56]	; (8006aa0 <sbrk_aligned+0x3c>)
 8006a68:	460c      	mov	r4, r1
 8006a6a:	6831      	ldr	r1, [r6, #0]
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	b911      	cbnz	r1, 8006a76 <sbrk_aligned+0x12>
 8006a70:	f000 f8bc 	bl	8006bec <_sbrk_r>
 8006a74:	6030      	str	r0, [r6, #0]
 8006a76:	4621      	mov	r1, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 f8b7 	bl	8006bec <_sbrk_r>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	d00a      	beq.n	8006a98 <sbrk_aligned+0x34>
 8006a82:	1cc4      	adds	r4, r0, #3
 8006a84:	f024 0403 	bic.w	r4, r4, #3
 8006a88:	42a0      	cmp	r0, r4
 8006a8a:	d007      	beq.n	8006a9c <sbrk_aligned+0x38>
 8006a8c:	1a21      	subs	r1, r4, r0
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f8ac 	bl	8006bec <_sbrk_r>
 8006a94:	3001      	adds	r0, #1
 8006a96:	d101      	bne.n	8006a9c <sbrk_aligned+0x38>
 8006a98:	f04f 34ff 	mov.w	r4, #4294967295
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	2000023c 	.word	0x2000023c

08006aa4 <_malloc_r>:
 8006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	1ccd      	adds	r5, r1, #3
 8006aaa:	f025 0503 	bic.w	r5, r5, #3
 8006aae:	3508      	adds	r5, #8
 8006ab0:	2d0c      	cmp	r5, #12
 8006ab2:	bf38      	it	cc
 8006ab4:	250c      	movcc	r5, #12
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	4607      	mov	r7, r0
 8006aba:	db01      	blt.n	8006ac0 <_malloc_r+0x1c>
 8006abc:	42a9      	cmp	r1, r5
 8006abe:	d905      	bls.n	8006acc <_malloc_r+0x28>
 8006ac0:	230c      	movs	r3, #12
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006acc:	4e2e      	ldr	r6, [pc, #184]	; (8006b88 <_malloc_r+0xe4>)
 8006ace:	f000 f89d 	bl	8006c0c <__malloc_lock>
 8006ad2:	6833      	ldr	r3, [r6, #0]
 8006ad4:	461c      	mov	r4, r3
 8006ad6:	bb34      	cbnz	r4, 8006b26 <_malloc_r+0x82>
 8006ad8:	4629      	mov	r1, r5
 8006ada:	4638      	mov	r0, r7
 8006adc:	f7ff ffc2 	bl	8006a64 <sbrk_aligned>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	d14d      	bne.n	8006b82 <_malloc_r+0xde>
 8006ae6:	6834      	ldr	r4, [r6, #0]
 8006ae8:	4626      	mov	r6, r4
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	d140      	bne.n	8006b70 <_malloc_r+0xcc>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	4631      	mov	r1, r6
 8006af2:	4638      	mov	r0, r7
 8006af4:	eb04 0803 	add.w	r8, r4, r3
 8006af8:	f000 f878 	bl	8006bec <_sbrk_r>
 8006afc:	4580      	cmp	r8, r0
 8006afe:	d13a      	bne.n	8006b76 <_malloc_r+0xd2>
 8006b00:	6821      	ldr	r1, [r4, #0]
 8006b02:	3503      	adds	r5, #3
 8006b04:	1a6d      	subs	r5, r5, r1
 8006b06:	f025 0503 	bic.w	r5, r5, #3
 8006b0a:	3508      	adds	r5, #8
 8006b0c:	2d0c      	cmp	r5, #12
 8006b0e:	bf38      	it	cc
 8006b10:	250c      	movcc	r5, #12
 8006b12:	4629      	mov	r1, r5
 8006b14:	4638      	mov	r0, r7
 8006b16:	f7ff ffa5 	bl	8006a64 <sbrk_aligned>
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d02b      	beq.n	8006b76 <_malloc_r+0xd2>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	442b      	add	r3, r5
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	e00e      	b.n	8006b44 <_malloc_r+0xa0>
 8006b26:	6822      	ldr	r2, [r4, #0]
 8006b28:	1b52      	subs	r2, r2, r5
 8006b2a:	d41e      	bmi.n	8006b6a <_malloc_r+0xc6>
 8006b2c:	2a0b      	cmp	r2, #11
 8006b2e:	d916      	bls.n	8006b5e <_malloc_r+0xba>
 8006b30:	1961      	adds	r1, r4, r5
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	6025      	str	r5, [r4, #0]
 8006b36:	bf18      	it	ne
 8006b38:	6059      	strne	r1, [r3, #4]
 8006b3a:	6863      	ldr	r3, [r4, #4]
 8006b3c:	bf08      	it	eq
 8006b3e:	6031      	streq	r1, [r6, #0]
 8006b40:	5162      	str	r2, [r4, r5]
 8006b42:	604b      	str	r3, [r1, #4]
 8006b44:	4638      	mov	r0, r7
 8006b46:	f104 060b 	add.w	r6, r4, #11
 8006b4a:	f000 f865 	bl	8006c18 <__malloc_unlock>
 8006b4e:	f026 0607 	bic.w	r6, r6, #7
 8006b52:	1d23      	adds	r3, r4, #4
 8006b54:	1af2      	subs	r2, r6, r3
 8006b56:	d0b6      	beq.n	8006ac6 <_malloc_r+0x22>
 8006b58:	1b9b      	subs	r3, r3, r6
 8006b5a:	50a3      	str	r3, [r4, r2]
 8006b5c:	e7b3      	b.n	8006ac6 <_malloc_r+0x22>
 8006b5e:	6862      	ldr	r2, [r4, #4]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	bf0c      	ite	eq
 8006b64:	6032      	streq	r2, [r6, #0]
 8006b66:	605a      	strne	r2, [r3, #4]
 8006b68:	e7ec      	b.n	8006b44 <_malloc_r+0xa0>
 8006b6a:	4623      	mov	r3, r4
 8006b6c:	6864      	ldr	r4, [r4, #4]
 8006b6e:	e7b2      	b.n	8006ad6 <_malloc_r+0x32>
 8006b70:	4634      	mov	r4, r6
 8006b72:	6876      	ldr	r6, [r6, #4]
 8006b74:	e7b9      	b.n	8006aea <_malloc_r+0x46>
 8006b76:	230c      	movs	r3, #12
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	f000 f84c 	bl	8006c18 <__malloc_unlock>
 8006b80:	e7a1      	b.n	8006ac6 <_malloc_r+0x22>
 8006b82:	6025      	str	r5, [r4, #0]
 8006b84:	e7de      	b.n	8006b44 <_malloc_r+0xa0>
 8006b86:	bf00      	nop
 8006b88:	20000238 	.word	0x20000238

08006b8c <_realloc_r>:
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	4680      	mov	r8, r0
 8006b92:	4614      	mov	r4, r2
 8006b94:	460e      	mov	r6, r1
 8006b96:	b921      	cbnz	r1, 8006ba2 <_realloc_r+0x16>
 8006b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	f7ff bf81 	b.w	8006aa4 <_malloc_r>
 8006ba2:	b92a      	cbnz	r2, 8006bb0 <_realloc_r+0x24>
 8006ba4:	f7ff ff12 	bl	80069cc <_free_r>
 8006ba8:	4625      	mov	r5, r4
 8006baa:	4628      	mov	r0, r5
 8006bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb0:	f000 f838 	bl	8006c24 <_malloc_usable_size_r>
 8006bb4:	4284      	cmp	r4, r0
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	d802      	bhi.n	8006bc0 <_realloc_r+0x34>
 8006bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bbe:	d812      	bhi.n	8006be6 <_realloc_r+0x5a>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff ff6e 	bl	8006aa4 <_malloc_r>
 8006bc8:	4605      	mov	r5, r0
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0ed      	beq.n	8006baa <_realloc_r+0x1e>
 8006bce:	42bc      	cmp	r4, r7
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	bf28      	it	cs
 8006bd6:	463a      	movcs	r2, r7
 8006bd8:	f7ff fed0 	bl	800697c <memcpy>
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4640      	mov	r0, r8
 8006be0:	f7ff fef4 	bl	80069cc <_free_r>
 8006be4:	e7e1      	b.n	8006baa <_realloc_r+0x1e>
 8006be6:	4635      	mov	r5, r6
 8006be8:	e7df      	b.n	8006baa <_realloc_r+0x1e>
	...

08006bec <_sbrk_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d06      	ldr	r5, [pc, #24]	; (8006c08 <_sbrk_r+0x1c>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fa f96a 	bl	8000ed0 <_sbrk>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_sbrk_r+0x1a>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_sbrk_r+0x1a>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20000240 	.word	0x20000240

08006c0c <__malloc_lock>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	; (8006c14 <__malloc_lock+0x8>)
 8006c0e:	f000 b811 	b.w	8006c34 <__retarget_lock_acquire_recursive>
 8006c12:	bf00      	nop
 8006c14:	20000244 	.word	0x20000244

08006c18 <__malloc_unlock>:
 8006c18:	4801      	ldr	r0, [pc, #4]	; (8006c20 <__malloc_unlock+0x8>)
 8006c1a:	f000 b80c 	b.w	8006c36 <__retarget_lock_release_recursive>
 8006c1e:	bf00      	nop
 8006c20:	20000244 	.word	0x20000244

08006c24 <_malloc_usable_size_r>:
 8006c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c28:	1f18      	subs	r0, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bfbc      	itt	lt
 8006c2e:	580b      	ldrlt	r3, [r1, r0]
 8006c30:	18c0      	addlt	r0, r0, r3
 8006c32:	4770      	bx	lr

08006c34 <__retarget_lock_acquire_recursive>:
 8006c34:	4770      	bx	lr

08006c36 <__retarget_lock_release_recursive>:
 8006c36:	4770      	bx	lr

08006c38 <_init>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr

08006c44 <_fini>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr
