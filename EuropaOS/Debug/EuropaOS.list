
EuropaOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08009e88  08009e88  00019e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a324  0800a324  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a32c  0800a32c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a32c  0800a32c  0001a32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a330  0800a330  0001a330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001dc  0800a510  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800a510  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193c6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2c  00000000  00000000  000395d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e253  00000000  00000000  0003eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189ba  00000000  00000000  0006cdfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e05c  00000000  00000000  000857b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a3811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b08  00000000  00000000  001a3864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009e70 	.word	0x08009e70

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08009e70 	.word	0x08009e70

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <start_va_sensors>:

#include "VASensors.h"

ADC_ChannelConfTypeDef sConfig = {0};

void start_va_sensors(ADC_HandleTypeDef* adc_handle, UART_HandleTypeDef* uart, uint32_t *buff){
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b0a0      	sub	sp, #128	; 0x80
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
	uint32_t vernier_values[3];

	char str[50] = "Vernier Sensor Collection Started\r\n";
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <start_va_sensors+0xb4>)
 8000eea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000eee:	461d      	mov	r5, r3
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	6023      	str	r3, [r4, #0]
 8000efc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	819a      	strh	r2, [r3, #12]
	char reading[30];
	double volts;
	print(uart, str, sizeof(str));
 8000f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0e:	2232      	movs	r2, #50	; 0x32
 8000f10:	4619      	mov	r1, r3
 8000f12:	68b8      	ldr	r0, [r7, #8]
 8000f14:	f000 fd98 	bl	8001a48 <print>

	// Select pH Channel
	adc_select_pH(adc_handle);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 f83d 	bl	8000f98 <adc_select_pH>
//	// Start the collection of Values from the ADC
//	if ( HAL_ADC_Start(adc_handle) != HAL_OK) {
//		Error_Handler();
//	}
	HAL_ADCEx_Calibration_Start(adc_handle, ADC_SINGLE_ENDED);
 8000f1e:	217f      	movs	r1, #127	; 0x7f
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f002 f8d5 	bl	80030d0 <HAL_ADCEx_Calibration_Start>

	//HAL_ADC_Start_DMA(adc_handle, buff, 1);
	adc_handle->Instance->DIFSEL = 0;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	while(1) {
		// Poll for a conversion
		HAL_ADC_Start(adc_handle);
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f001 f9d1 	bl	80022d8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(adc_handle, 1000);
 8000f36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f001 fa62 	bl	8002404 <HAL_ADC_PollForConversion>
		buff[0] = HAL_ADC_GetValue(adc_handle);
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f001 faee 	bl	8002522 <HAL_ADC_GetValue>
 8000f46:	4602      	mov	r2, r0
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(adc_handle);
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f001 fa26 	bl	800239e <HAL_ADC_Stop>
		volts = conv_adc_volt(buff[0]);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f842 	bl	8000fe0 <conv_adc_volt>
 8000f5c:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
		sprintf(reading, "ADC VALUE: %ld, Volts: %0.1f\r\n", buff[0], volts);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	f107 0010 	add.w	r0, r7, #16
 8000f68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000f6c:	e9cd 2300 	strd	r2, r3, [sp]
 8000f70:	460a      	mov	r2, r1
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <start_va_sensors+0xb8>)
 8000f74:	f006 fd02 	bl	800797c <siprintf>
		print(uart, reading, sizeof(reading));
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	221e      	movs	r2, #30
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68b8      	ldr	r0, [r7, #8]
 8000f82:	f000 fd61 	bl	8001a48 <print>
		HAL_Delay(500);
 8000f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8a:	f000 fe0d 	bl	8001ba8 <HAL_Delay>
		HAL_ADC_Start(adc_handle);
 8000f8e:	e7cf      	b.n	8000f30 <start_va_sensors+0x54>
 8000f90:	08009ea8 	.word	0x08009ea8
 8000f94:	08009e88 	.word	0x08009e88

08000f98 <adc_select_pH>:
	}

}

void adc_select_pH(ADC_HandleTypeDef* adc_handle){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	// Create the ADC channel configuration
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]

	// Populate the configuration to select channel 3 (pH Sensor)
	sConfig.Channel = ADC_CHANNEL_4;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <adc_select_pH+0x44>)
 8000fb4:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	613b      	str	r3, [r7, #16]

    // Configure the adc to select channel 3
    if (HAL_ADC_ConfigChannel(adc_handle, &sConfig) != HAL_OK){
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f001 fab9 	bl	800253c <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <adc_select_pH+0x3c>
    	Error_Handler();
 8000fd0:	f000 fae6 	bl	80015a0 <Error_Handler>
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	10c00010 	.word	0x10c00010

08000fe0 <conv_adc_volt>:
	else {
		HAL_GPIO_WritePin(MUX_SEL1_GPIO_Port, MUX_SEL1_Pin, GPIO_PIN_RESET);
	}
}

double conv_adc_volt(uint32_t adc_reading){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	return (double)(((((double)adc_reading - (double)MIN_ADC_READ) * (MAX_VOLT - MIN_VOLT)) / ((double)MAX_ADC_READ - (double)MIN_ADC_READ)) + MIN_VOLT);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff faa3 	bl	8000534 <__aeabi_ui2d>
 8000fee:	a312      	add	r3, pc, #72	; (adr r3, 8001038 <conv_adc_volt+0x58>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fb18 	bl	8000628 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	a30f      	add	r3, pc, #60	; (adr r3, 8001040 <conv_adc_volt+0x60>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff fc39 	bl	800087c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	f7ff f94f 	bl	80002bc <__adddf3>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	ec43 2b17 	vmov	d7, r2, r3
}
 8001026:	eeb0 0a47 	vmov.f32	s0, s14
 800102a:	eef0 0a67 	vmov.f32	s1, s15
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	f3af 8000 	nop.w
 8001038:	66666666 	.word	0x66666666
 800103c:	400a6666 	.word	0x400a6666
 8001040:	00000000 	.word	0x00000000
 8001044:	40affe00 	.word	0x40affe00

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 fd36 	bl	8001abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f821 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 f9d9 	bl	800140c <MX_GPIO_Init>
  MX_ADC1_Init();
 800105a:	f000 f86f 	bl	800113c <MX_ADC1_Init>
  MX_TIM3_Init();
 800105e:	f000 f95d 	bl	800131c <MX_TIM3_Init>
  MX_LPUART1_UART_Init();
 8001062:	f000 f903 	bl	800126c <MX_LPUART1_UART_Init>
  MX_DAC1_Init();
 8001066:	f000 f8cd 	bl	8001204 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Vernier Sensor Collection Function
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800106a:	2110      	movs	r1, #16
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <main+0x44>)
 800106e:	f002 f996 	bl	800339e <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001072:	2300      	movs	r3, #0
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <main+0x44>)
 800107a:	f002 f9e2 	bl	8003442 <HAL_DAC_SetValue>
  start_va_sensors(&hadc1, &hlpuart1, adc_buff);
 800107e:	463b      	mov	r3, r7
 8001080:	461a      	mov	r2, r3
 8001082:	4903      	ldr	r1, [pc, #12]	; (8001090 <main+0x48>)
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <main+0x4c>)
 8001086:	f7ff ff29 	bl	8000edc <start_va_sensors>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108a:	e7fe      	b.n	800108a <main+0x42>
 800108c:	20000260 	.word	0x20000260
 8001090:	20000274 	.word	0x20000274
 8001094:	200001f8 	.word	0x200001f8

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b096      	sub	sp, #88	; 0x58
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2244      	movs	r2, #68	; 0x44
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fff6 	bl	8007098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010ba:	2000      	movs	r0, #0
 80010bc:	f002 fcf0 	bl	8003aa0 <HAL_PWREx_ControlVoltageScaling>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010c6:	f000 fa6b 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ca:	2302      	movs	r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d4:	2340      	movs	r3, #64	; 0x40
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80010e4:	231e      	movs	r3, #30
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 fd85 	bl	8003c08 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001104:	f000 fa4c 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2303      	movs	r3, #3
 800110e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001118:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2105      	movs	r1, #5
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f98a 	bl	800443c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800112e:	f000 fa37 	bl	80015a0 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3758      	adds	r7, #88	; 0x58
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001154:	4a29      	ldr	r2, [pc, #164]	; (80011fc <MX_ADC1_Init+0xc0>)
 8001156:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001172:	2204      	movs	r2, #4
 8001174:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800117e:	2201      	movs	r2, #1
 8001180:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001184:	2201      	movs	r2, #1
 8001186:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC1_Init+0xbc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_ADC1_Init+0xbc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_ADC1_Init+0xbc>)
 80011b4:	f000 ff44 	bl	8002040 <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011be:	f000 f9ef 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC1_Init+0xc4>)
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80011ca:	2305      	movs	r3, #5
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	; 0x7f
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_ADC1_Init+0xbc>)
 80011e0:	f001 f9ac 	bl	800253c <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011ea:	f000 f9d9 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f8 	.word	0x200001f8
 80011fc:	50040000 	.word	0x50040000
 8001200:	10c00010 	.word	0x10c00010

08001204 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	2228      	movs	r2, #40	; 0x28
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f005 ff41 	bl	8007098 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_DAC1_Init+0x60>)
 8001218:	4a13      	ldr	r2, [pc, #76]	; (8001268 <MX_DAC1_Init+0x64>)
 800121a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_DAC1_Init+0x60>)
 800121e:	f002 f89c 	bl	800335a <HAL_DAC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001228:	f000 f9ba 	bl	80015a0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	2210      	movs	r2, #16
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_DAC1_Init+0x60>)
 800124c:	f002 f91e 	bl	800348c <HAL_DAC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8001256:	f000 f9a3 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000260 	.word	0x20000260
 8001268:	40007400 	.word	0x40007400

0800126c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 8001272:	4a28      	ldr	r2, [pc, #160]	; (8001314 <MX_LPUART1_UART_Init+0xa8>)
 8001274:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <MX_LPUART1_UART_Init+0xac>)
 800127a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 8001290:	220c      	movs	r2, #12
 8001292:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012b2:	4817      	ldr	r0, [pc, #92]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 80012b4:	f005 f82a 	bl	800630c <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80012be:	f000 f96f 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 80012c6:	f005 fdf3 	bl	8006eb0 <HAL_UARTEx_SetTxFifoThreshold>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80012d0:	f000 f966 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 80012d8:	f005 fe28 	bl	8006f2c <HAL_UARTEx_SetRxFifoThreshold>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80012e2:	f000 f95d 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012e6:	480a      	ldr	r0, [pc, #40]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 80012e8:	f005 fda9 	bl	8006e3e <HAL_UARTEx_DisableFifoMode>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80012f2:	f000 f955 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 80012f8:	f005 f808 	bl	800630c <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_LPUART1_UART_Init+0x9a>
	  Error_Handler();
 8001302:	f000 f94d 	bl	80015a0 <Error_Handler>
  }
  HAL_UART_MspInit(&hlpuart1);
 8001306:	4802      	ldr	r0, [pc, #8]	; (8001310 <MX_LPUART1_UART_Init+0xa4>)
 8001308:	f000 fa1c 	bl	8001744 <HAL_UART_MspInit>
  /* USER CODE END LPUART1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000274 	.word	0x20000274
 8001314:	40008000 	.word	0x40008000
 8001318:	00033324 	.word	0x00033324

0800131c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001350:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <MX_TIM3_Init+0xec>)
 8001352:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11999;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001356:	f642 62df 	movw	r2, #11999	; 0x2edf
 800135a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_TIM3_Init+0xe8>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_TIM3_Init+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001378:	f004 f836 	bl	80053e8 <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001382:	f000 f90d 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800138c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001390:	4619      	mov	r1, r3
 8001392:	481c      	ldr	r0, [pc, #112]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001394:	f004 fa5e 	bl	8005854 <HAL_TIM_ConfigClockSource>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800139e:	f000 f8ff 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <MX_TIM3_Init+0xe8>)
 80013a4:	f004 f8e0 	bl	8005568 <HAL_TIM_PWM_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013ae:	f000 f8f7 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <MX_TIM3_Init+0xe8>)
 80013c2:	f004 ff1b 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80013cc:	f000 f8e8 	bl	80015a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d0:	2360      	movs	r3, #96	; 0x60
 80013d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM3_Init+0xe8>)
 80013e8:	f004 f920 	bl	800562c <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80013f2:	f000 f8d5 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM3_Init+0xe8>)
 80013f8:	f004 f84e 	bl	8005498 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000304 	.word	0x20000304
 8001408:	40000400 	.word	0x40000400

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <MX_GPIO_Init+0x180>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a59      	ldr	r2, [pc, #356]	; (800158c <MX_GPIO_Init+0x180>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <MX_GPIO_Init+0x180>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <MX_GPIO_Init+0x180>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a53      	ldr	r2, [pc, #332]	; (800158c <MX_GPIO_Init+0x180>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <MX_GPIO_Init+0x180>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b4e      	ldr	r3, [pc, #312]	; (800158c <MX_GPIO_Init+0x180>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <MX_GPIO_Init+0x180>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b4b      	ldr	r3, [pc, #300]	; (800158c <MX_GPIO_Init+0x180>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b48      	ldr	r3, [pc, #288]	; (800158c <MX_GPIO_Init+0x180>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a47      	ldr	r2, [pc, #284]	; (800158c <MX_GPIO_Init+0x180>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b45      	ldr	r3, [pc, #276]	; (800158c <MX_GPIO_Init+0x180>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <MX_GPIO_Init+0x180>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a41      	ldr	r2, [pc, #260]	; (800158c <MX_GPIO_Init+0x180>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <MX_GPIO_Init+0x180>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800149a:	4b3c      	ldr	r3, [pc, #240]	; (800158c <MX_GPIO_Init+0x180>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a3b      	ldr	r2, [pc, #236]	; (800158c <MX_GPIO_Init+0x180>)
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <MX_GPIO_Init+0x180>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80014b2:	f002 fb99 	bl	8003be8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80014bc:	4834      	ldr	r0, [pc, #208]	; (8001590 <MX_GPIO_Init+0x184>)
 80014be:	f002 fab7 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_SEL0_Pin|USB_PowerSwitchOn_Pin|MUX_SEL1_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2170      	movs	r1, #112	; 0x70
 80014c6:	4833      	ldr	r0, [pc, #204]	; (8001594 <MX_GPIO_Init+0x188>)
 80014c8:	f002 fab2 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	482d      	ldr	r0, [pc, #180]	; (8001598 <MX_GPIO_Init+0x18c>)
 80014e4:	f002 f912 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80014e8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4823      	ldr	r0, [pc, #140]	; (8001590 <MX_GPIO_Init+0x184>)
 8001502:	f002 f903 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001518:	2307      	movs	r3, #7
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	481e      	ldr	r0, [pc, #120]	; (800159c <MX_GPIO_Init+0x190>)
 8001524:	f002 f8f2 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SEL0_Pin USB_PowerSwitchOn_Pin MUX_SEL1_Pin */
  GPIO_InitStruct.Pin = MUX_SEL0_Pin|USB_PowerSwitchOn_Pin|MUX_SEL1_Pin;
 8001528:	2370      	movs	r3, #112	; 0x70
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4815      	ldr	r0, [pc, #84]	; (8001594 <MX_GPIO_Init+0x188>)
 8001540:	f002 f8e4 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001544:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001556:	230a      	movs	r3, #10
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001564:	f002 f8d2 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f002 f8c4 	bl	800370c <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	; 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	48000400 	.word	0x48000400
 8001594:	48001800 	.word	0x48001800
 8001598:	48000800 	.word	0x48000800
 800159c:	48000c00 	.word	0x48000c00

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x44>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_MspInit+0x44>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6613      	str	r3, [r2, #96]	; 0x60
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x44>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_MspInit+0x44>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6593      	str	r3, [r2, #88]	; 0x58
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0ae      	sub	sp, #184	; 0xb8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2294      	movs	r2, #148	; 0x94
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fd3f 	bl	8007098 <memset>
  if(hadc->Instance==ADC1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a27      	ldr	r2, [pc, #156]	; (80016bc <HAL_ADC_MspInit+0xc8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d146      	bne.n	80016b2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001624:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001628:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800162a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800162e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800163a:	230c      	movs	r3, #12
 800163c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800164a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4618      	mov	r0, r3
 8001656:	f003 f9af 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001660:	f7ff ff9e 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_ADC_MspInit+0xcc>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_ADC_MspInit+0xcc>)
 800166a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_ADC_MspInit+0xcc>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_ADC_MspInit+0xcc>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <HAL_ADC_MspInit+0xcc>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_ADC_MspInit+0xcc>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001694:	230a      	movs	r3, #10
 8001696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800169a:	230b      	movs	r3, #11
 800169c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <HAL_ADC_MspInit+0xd0>)
 80016ae:	f002 f82d 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	37b8      	adds	r7, #184	; 0xb8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	50040000 	.word	0x50040000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000800 	.word	0x48000800

080016c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a15      	ldr	r2, [pc, #84]	; (800173c <HAL_DAC_MspInit+0x74>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d124      	bne.n	8001734 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_DAC_MspInit+0x78>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_DAC_MspInit+0x78>)
 80016f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_DAC_MspInit+0x78>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_DAC_MspInit+0x78>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_DAC_MspInit+0x78>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_DAC_MspInit+0x78>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800171a:	2320      	movs	r3, #32
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171e:	2303      	movs	r3, #3
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f001 ffec 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40007400 	.word	0x40007400
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0ae      	sub	sp, #184	; 0xb8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2294      	movs	r2, #148	; 0x94
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f005 fc97 	bl	8007098 <memset>
  if(huart->Instance==LPUART1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <HAL_UART_MspInit+0xb4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d13d      	bne.n	80017f0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001774:	2320      	movs	r3, #32
 8001776:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001778:	2300      	movs	r3, #0
 800177a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4618      	mov	r0, r3
 8001782:	f003 f919 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800178c:	f7ff ff08 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_UART_MspInit+0xb8>)
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_UART_MspInit+0xb8>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_UART_MspInit+0xb8>)
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_UART_MspInit+0xb8>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <HAL_UART_MspInit+0xb8>)
 80017ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_UART_MspInit+0xb8>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80017c0:	f002 fa12 	bl	8003be8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|GPIO_PIN_8;
 80017c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017de:	2308      	movs	r3, #8
 80017e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <HAL_UART_MspInit+0xbc>)
 80017ec:	f001 ff8e 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	37b8      	adds	r7, #184	; 0xb8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40008000 	.word	0x40008000
 80017fc:	40021000 	.word	0x40021000
 8001800:	48001800 	.word	0x48001800

08001804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_TIM_Base_MspInit+0x38>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10b      	bne.n	800182e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40000400 	.word	0x40000400
 8001840:	40021000 	.word	0x40021000

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f96a 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
	return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_kill>:

int _kill(int pid, int sig)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018b2:	f005 fbc7 	bl	8007044 <__errno>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2216      	movs	r2, #22
 80018ba:	601a      	str	r2, [r3, #0]
	return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_exit>:

void _exit (int status)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffe7 	bl	80018a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018da:	e7fe      	b.n	80018da <_exit+0x12>

080018dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e00a      	b.n	8001904 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ee:	f3af 8000 	nop.w
 80018f2:	4601      	mov	r1, r0
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	b2ca      	uxtb	r2, r1
 80018fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf0      	blt.n	80018ee <_read+0x12>
	}

return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e009      	b.n	800193c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbf1      	blt.n	8001928 <_write+0x12>
	}
	return len;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_close>:

int _close(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return -1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001976:	605a      	str	r2, [r3, #4]
	return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_isatty>:

int _isatty(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
	return 1;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
	return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f005 fb2c 	bl	8007044 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200a0000 	.word	0x200a0000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	20000350 	.word	0x20000350
 8001a20:	20000368 	.word	0x20000368

08001a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <print>:
 *      Author: Liam Sullivan
 */

#include "uart.h"

void print(UART_HandleTypeDef *uart, char *msg, int size) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, (uint8_t *)msg, size, transmit_timeout);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	2364      	movs	r3, #100	; 0x64
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f004 fca5 	bl	80063ac <HAL_UART_Transmit>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff ffd8 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	; (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f005 fad9 	bl	8007050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff fad3 	bl	8001048 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ab0:	0800a334 	.word	0x0800a334
  ldr r2, =_sbss
 8001ab4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ab8:	20000368 	.word	0x20000368

08001abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_IRQHandler>

08001abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f001 fc13 	bl	80032f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f80e 	bl	8001af0 <HAL_InitTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e001      	b.n	8001ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae0:	f7ff fd64 	bl	80015ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_InitTick+0x6c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d023      	beq.n	8001b4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_InitTick+0x70>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_InitTick+0x6c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fc11 	bl	8003342 <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d809      	bhi.n	8001b40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f001 fbe9 	bl	800330a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_InitTick+0x74>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e004      	b.n	8001b50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e001      	b.n	8001b50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000354 	.word	0x20000354

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000354 	.word	0x20000354

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008

08001bf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	609a      	str	r2, [r3, #8]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3360      	adds	r3, #96	; 0x60
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <LL_ADC_SetOffset+0x44>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	03fff000 	.word	0x03fff000

08001ca0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3360      	adds	r3, #96	; 0x60
 8001cae:	461a      	mov	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3360      	adds	r3, #96	; 0x60
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	615a      	str	r2, [r3, #20]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b087      	sub	sp, #28
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3330      	adds	r3, #48	; 0x30
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	211f      	movs	r1, #31
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	401a      	ands	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0e9b      	lsrs	r3, r3, #26
 8001d86:	f003 011f 	and.w	r1, r3, #31
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d9a:	bf00      	nop
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3314      	adds	r3, #20
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	0e5b      	lsrs	r3, r3, #25
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	0d1b      	lsrs	r3, r3, #20
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2107      	movs	r1, #7
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0d1b      	lsrs	r3, r3, #20
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	431a      	orrs	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0318 	and.w	r3, r3, #24
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e20:	40d9      	lsrs	r1, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	400b      	ands	r3, r1
 8001e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	0007ffff 	.word	0x0007ffff

08001e44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6093      	str	r3, [r2, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ea4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ecc:	d101      	bne.n	8001ed2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ef0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f1c:	f043 0202 	orr.w	r2, r3, #2
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <LL_ADC_IsEnabled+0x18>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <LL_ADC_IsEnabled+0x1a>
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d101      	bne.n	8001f6e <LL_ADC_IsDisableOngoing+0x18>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <LL_ADC_IsDisableOngoing+0x1a>
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f90:	f043 0204 	orr.w	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb8:	f043 0210 	orr.w	r2, r3, #16
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d101      	bne.n	8001fe4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002002:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b08      	cmp	r3, #8
 800202c:	d101      	bne.n	8002032 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e12f      	b.n	80022ba <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fac3 	bl	80015f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fef1 	bl	8001e68 <LL_ADC_IsDeepPowerDownEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fed7 	bl	8001e44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff0c 	bl	8001eb8 <LL_ADC_IsInternalRegulatorEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d115      	bne.n	80020d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fef0 	bl	8001e90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b0:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <HAL_ADC_Init+0x284>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	4a84      	ldr	r2, [pc, #528]	; (80022c8 <HAL_ADC_Init+0x288>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	3301      	adds	r3, #1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c4:	e002      	b.n	80020cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f9      	bne.n	80020c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff feee 	bl	8001eb8 <LL_ADC_IsInternalRegulatorEnabled>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10d      	bne.n	80020fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff62 	bl	8001fcc <LL_ADC_REG_IsConversionOngoing>
 8002108:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80c8 	bne.w	80022a8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80c4 	bne.w	80022a8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fefb 	bl	8001f30 <LL_ADC_IsEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002140:	4862      	ldr	r0, [pc, #392]	; (80022cc <HAL_ADC_Init+0x28c>)
 8002142:	f7ff fef5 	bl	8001f30 <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4619      	mov	r1, r3
 8002152:	485f      	ldr	r0, [pc, #380]	; (80022d0 <HAL_ADC_Init+0x290>)
 8002154:	f7ff fd4c 	bl	8001bf0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e5b      	ldrb	r3, [r3, #25]
 800215c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002162:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002168:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800216e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002176:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d106      	bne.n	8002194 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	3b01      	subs	r3, #1
 800218c:	045b      	lsls	r3, r3, #17
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_ADC_Init+0x294>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff feff 	bl	8001fcc <LL_ADC_REG_IsConversionOngoing>
 80021ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff20 	bl	800201a <LL_ADC_INJ_IsConversionOngoing>
 80021da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d140      	bne.n	8002264 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13d      	bne.n	8002264 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7e1b      	ldrb	r3, [r3, #24]
 80021f0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021fa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800220a:	f023 0306 	bic.w	r3, r3, #6
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	430b      	orrs	r3, r1
 8002216:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800221e:	2b01      	cmp	r3, #1
 8002220:	d118      	bne.n	8002254 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002244:	430a      	orrs	r2, r1
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	611a      	str	r2, [r3, #16]
 8002252:	e007      	b.n	8002264 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10c      	bne.n	8002286 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f023 010f 	bic.w	r1, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
 8002284:	e007      	b.n	8002296 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020f 	bic.w	r2, r2, #15
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	659a      	str	r2, [r3, #88]	; 0x58
 80022a6:	e007      	b.n	80022b8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f043 0210 	orr.w	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000
 80022c8:	053e2d63 	.word	0x053e2d63
 80022cc:	50040000 	.word	0x50040000
 80022d0:	50040300 	.word	0x50040300
 80022d4:	fff0c007 	.word	0xfff0c007

080022d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fe71 	bl	8001fcc <LL_ADC_REG_IsConversionOngoing>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d14f      	bne.n	8002390 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Start+0x26>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e04b      	b.n	8002396 <HAL_ADC_Start+0xbe>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fdd0 	bl	8002eac <ADC_Enable>
 800230c:	4603      	mov	r3, r0
 800230e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d137      	bne.n	8002386 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002336:	d106      	bne.n	8002346 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	f023 0206 	bic.w	r2, r3, #6
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
 8002344:	e002      	b.n	800234c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	221c      	movs	r2, #28
 8002352:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002372:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fdfc 	bl	8001f7c <LL_ADC_REG_StartConversion>
 8002384:	e006      	b.n	8002394 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800238e:	e001      	b.n	8002394 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002390:	2302      	movs	r3, #2
 8002392:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_Stop+0x16>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e023      	b.n	80023fc <HAL_ADC_Stop+0x5e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80023bc:	2103      	movs	r1, #3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fcb8 	bl	8002d34 <ADC_ConversionStop>
 80023c4:	4603      	mov	r3, r0
 80023c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d111      	bne.n	80023f2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fdf2 	bl	8002fb8 <ADC_Disable>
 80023d4:	4603      	mov	r3, r0
 80023d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b08      	cmp	r3, #8
 8002414:	d102      	bne.n	800241c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002416:	2308      	movs	r3, #8
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e010      	b.n	800243e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06f      	b.n	800251a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800243a:	2304      	movs	r3, #4
 800243c:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800243e:	f7ff fba7 	bl	8001b90 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002444:	e021      	b.n	800248a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d01d      	beq.n	800248a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800244e:	f7ff fb9f 	bl	8001b90 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d302      	bcc.n	8002464 <HAL_ADC_PollForConversion+0x60>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d112      	bne.n	800248a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e047      	b.n	800251a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0d6      	beq.n	8002446 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fc3d 	bl	8001d28 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7e5b      	ldrb	r3, [r3, #25]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d118      	bne.n	80024ee <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d111      	bne.n	80024ee <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d104      	bne.n	8002506 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2208      	movs	r2, #8
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e008      	b.n	8002518 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	220c      	movs	r2, #12
 8002516:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0b6      	sub	sp, #216	; 0xd8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x22>
 800255a:	2302      	movs	r3, #2
 800255c:	e3d5      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x7ce>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fd2e 	bl	8001fcc <LL_ADC_REG_IsConversionOngoing>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 83ba 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d824      	bhi.n	80025ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	3b02      	subs	r3, #2
 8002586:	2b03      	cmp	r3, #3
 8002588:	d81b      	bhi.n	80025c2 <HAL_ADC_ConfigChannel+0x86>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <HAL_ADC_ConfigChannel+0x54>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025a9 	.word	0x080025a9
 8002598:	080025b1 	.word	0x080025b1
 800259c:	080025b9 	.word	0x080025b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	220c      	movs	r2, #12
 80025a4:	605a      	str	r2, [r3, #4]
          break;
 80025a6:	e011      	b.n	80025cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2212      	movs	r2, #18
 80025ac:	605a      	str	r2, [r3, #4]
          break;
 80025ae:	e00d      	b.n	80025cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2218      	movs	r2, #24
 80025b4:	605a      	str	r2, [r3, #4]
          break;
 80025b6:	e009      	b.n	80025cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025be:	605a      	str	r2, [r3, #4]
          break;
 80025c0:	e004      	b.n	80025cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2206      	movs	r2, #6
 80025c6:	605a      	str	r2, [r3, #4]
          break;
 80025c8:	e000      	b.n	80025cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80025ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	f7ff fbb8 	bl	8001d4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fcf2 	bl	8001fcc <LL_ADC_REG_IsConversionOngoing>
 80025e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fd12 	bl	800201a <LL_ADC_INJ_IsConversionOngoing>
 80025f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 81c1 	bne.w	8002986 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 81bc 	bne.w	8002986 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002616:	d10f      	bne.n	8002638 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	4619      	mov	r1, r3
 8002624:	f7ff fbbf 	bl	8001da6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fb66 	bl	8001d02 <LL_ADC_SetSamplingTimeCommonConfig>
 8002636:	e00e      	b.n	8002656 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	461a      	mov	r2, r3
 8002646:	f7ff fbae 	bl	8001da6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fb56 	bl	8001d02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	08db      	lsrs	r3, r3, #3
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00a      	beq.n	800268e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002688:	f7ff fae6 	bl	8001c58 <LL_ADC_SetOffset>
 800268c:	e17b      	b.n	8002986 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fb03 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x17e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff faf8 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	e01e      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x1bc>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff faed 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e004      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80026ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1d4>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	e018      	b.n	8002742 <HAL_ADC_ConfigChannel+0x206>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800272c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e004      	b.n	8002742 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002742:	429a      	cmp	r2, r3
 8002744:	d106      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fabc 	bl	8001ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff faa0 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x244>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fa95 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	0e9b      	lsrs	r3, r3, #26
 800277a:	f003 021f 	and.w	r2, r3, #31
 800277e:	e01e      	b.n	80027be <HAL_ADC_ConfigChannel+0x282>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fa8a 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800279e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e004      	b.n	80027bc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80027b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x29a>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	e018      	b.n	8002808 <HAL_ADC_ConfigChannel+0x2cc>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e004      	b.n	8002808 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80027fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002808:	429a      	cmp	r2, r3
 800280a:	d106      	bne.n	800281a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	2101      	movs	r1, #1
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fa59 	bl	8001ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2102      	movs	r1, #2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fa3d 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x30a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2102      	movs	r1, #2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fa32 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	e01e      	b.n	8002884 <HAL_ADC_ConfigChannel+0x348>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fa27 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800286c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e004      	b.n	8002882 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_ConfigChannel+0x360>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	e016      	b.n	80028ca <HAL_ADC_ConfigChannel+0x38e>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e004      	b.n	80028ca <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80028c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d106      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2102      	movs	r1, #2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f9f8 	bl	8001ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2103      	movs	r1, #3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f9dc 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x3cc>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2103      	movs	r1, #3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f9d1 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	f003 021f 	and.w	r2, r3, #31
 8002906:	e017      	b.n	8002938 <HAL_ADC_ConfigChannel+0x3fc>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2103      	movs	r1, #3
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f9c6 	bl	8001ca0 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002922:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800292e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x414>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	e011      	b.n	8002974 <HAL_ADC_ConfigChannel+0x438>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800295e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002960:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002974:	429a      	cmp	r2, r3
 8002976:	d106      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2200      	movs	r2, #0
 800297e:	2103      	movs	r1, #3
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f9a3 	bl	8001ccc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fad0 	bl	8001f30 <LL_ADC_IsEnabled>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 8140 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6819      	ldr	r1, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f7ff fa29 	bl	8001dfc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	4a8f      	ldr	r2, [pc, #572]	; (8002bec <HAL_ADC_ConfigChannel+0x6b0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	f040 8131 	bne.w	8002c18 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10b      	bne.n	80029de <HAL_ADC_ConfigChannel+0x4a2>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	3301      	adds	r3, #1
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2b09      	cmp	r3, #9
 80029d4:	bf94      	ite	ls
 80029d6:	2301      	movls	r3, #1
 80029d8:	2300      	movhi	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	e019      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x4d6>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e003      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80029fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d079      	beq.n	8002b0a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x4f6>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	0e9b      	lsrs	r3, r3, #26
 8002a28:	3301      	adds	r3, #1
 8002a2a:	069b      	lsls	r3, r3, #26
 8002a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a30:	e015      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x522>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a42:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e003      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	069b      	lsls	r3, r3, #26
 8002a5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x542>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0e9b      	lsrs	r3, r3, #26
 8002a70:	3301      	adds	r3, #1
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	2101      	movs	r1, #1
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	e017      	b.n	8002aae <HAL_ADC_ConfigChannel+0x572>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002a96:	2320      	movs	r3, #32
 8002a98:	e003      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	ea42 0103 	orr.w	r1, r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x598>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 021f 	and.w	r2, r3, #31
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	051b      	lsls	r3, r3, #20
 8002ad2:	e018      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5ca>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e003      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f003 021f 	and.w	r2, r3, #31
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b06:	430b      	orrs	r3, r1
 8002b08:	e081      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d107      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x5ea>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0e9b      	lsrs	r3, r3, #26
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	069b      	lsls	r3, r3, #26
 8002b20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b24:	e015      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x616>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e003      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	069b      	lsls	r3, r3, #26
 8002b4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x636>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	3301      	adds	r3, #1
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	e017      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x666>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	61fb      	str	r3, [r7, #28]
  return result;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e003      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	ea42 0103 	orr.w	r1, r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x692>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0e9b      	lsrs	r3, r3, #26
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b1e      	subs	r3, #30
 8002bc6:	051b      	lsls	r3, r3, #20
 8002bc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	e01e      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x6d0>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	613b      	str	r3, [r7, #16]
  return result;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e006      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x6bc>
 8002bea:	bf00      	nop
 8002bec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 021f 	and.w	r2, r3, #31
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	3b1e      	subs	r3, #30
 8002c06:	051b      	lsls	r3, r3, #20
 8002c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7ff f8c7 	bl	8001da6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d06c      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c24:	483c      	ldr	r0, [pc, #240]	; (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c26:	f7ff f809 	bl	8001c3c <LL_ADC_GetCommonPathInternalCh>
 8002c2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3a      	ldr	r2, [pc, #232]	; (8002d1c <HAL_ADC_ConfigChannel+0x7e0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d127      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d121      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a35      	ldr	r2, [pc, #212]	; (8002d20 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d157      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c56:	4619      	mov	r1, r3
 8002c58:	482f      	ldr	r0, [pc, #188]	; (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c5a:	f7fe ffdc 	bl	8001c16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_ADC_ConfigChannel+0x7e8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	4a30      	ldr	r2, [pc, #192]	; (8002d28 <HAL_ADC_ConfigChannel+0x7ec>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c86:	e03a      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <HAL_ADC_ConfigChannel+0x7f0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d113      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x77e>
 8002c92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d12a      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4819      	ldr	r0, [pc, #100]	; (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cb4:	f7fe ffaf 	bl	8001c16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cb8:	e021      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_ADC_ConfigChannel+0x7f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d11c      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d116      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_ADC_ConfigChannel+0x7e4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d111      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ce6:	f7fe ff96 	bl	8001c16 <LL_ADC_SetCommonPathInternalCh>
 8002cea:	e008      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d06:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	37d8      	adds	r7, #216	; 0xd8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	80080000 	.word	0x80080000
 8002d18:	50040300 	.word	0x50040300
 8002d1c:	c7520000 	.word	0xc7520000
 8002d20:	50040000 	.word	0x50040000
 8002d24:	20000000 	.word	0x20000000
 8002d28:	053e2d63 	.word	0x053e2d63
 8002d2c:	cb840000 	.word	0xcb840000
 8002d30:	80000001 	.word	0x80000001

08002d34 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f93e 	bl	8001fcc <LL_ADC_REG_IsConversionOngoing>
 8002d50:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f95f 	bl	800201a <LL_ADC_INJ_IsConversionOngoing>
 8002d5c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8098 	beq.w	8002e9c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02a      	beq.n	8002dd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7e5b      	ldrb	r3, [r3, #25]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d126      	bne.n	8002dd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7e1b      	ldrb	r3, [r3, #24]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d122      	bne.n	8002dd0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d8e:	e014      	b.n	8002dba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4a45      	ldr	r2, [pc, #276]	; (8002ea8 <ADC_ConversionStop+0x174>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d90d      	bls.n	8002db4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f043 0210 	orr.w	r2, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e074      	b.n	8002e9e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	3301      	adds	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d1e3      	bne.n	8002d90 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2240      	movs	r2, #64	; 0x40
 8002dce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d014      	beq.n	8002e00 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f8f6 	bl	8001fcc <LL_ADC_REG_IsConversionOngoing>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f8b3 	bl	8001f56 <LL_ADC_IsDisableOngoing>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f8d2 	bl	8001fa4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d014      	beq.n	8002e30 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f905 	bl	800201a <LL_ADC_INJ_IsConversionOngoing>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f89b 	bl	8001f56 <LL_ADC_IsDisableOngoing>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f8e1 	bl	8001ff2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d005      	beq.n	8002e42 <ADC_ConversionStop+0x10e>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d105      	bne.n	8002e48 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	617b      	str	r3, [r7, #20]
        break;
 8002e40:	e005      	b.n	8002e4e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e42:	2308      	movs	r3, #8
 8002e44:	617b      	str	r3, [r7, #20]
        break;
 8002e46:	e002      	b.n	8002e4e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	617b      	str	r3, [r7, #20]
        break;
 8002e4c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e4e:	f7fe fe9f 	bl	8001b90 <HAL_GetTick>
 8002e52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e54:	e01b      	b.n	8002e8e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e56:	f7fe fe9b 	bl	8001b90 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d914      	bls.n	8002e8e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e007      	b.n	8002e9e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1dc      	bne.n	8002e56 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	a33fffff 	.word	0xa33fffff

08002eac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff f837 	bl	8001f30 <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d169      	bne.n	8002f9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <ADC_Enable+0xfc>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e055      	b.n	8002f9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fff2 	bl	8001ee0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002efc:	482b      	ldr	r0, [pc, #172]	; (8002fac <ADC_Enable+0x100>)
 8002efe:	f7fe fe9d 	bl	8001c3c <LL_ADC_GetCommonPathInternalCh>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <ADC_Enable+0x104>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <ADC_Enable+0x108>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f26:	e002      	b.n	8002f2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f9      	bne.n	8002f28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f34:	f7fe fe2c 	bl	8001b90 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f3a:	e028      	b.n	8002f8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fff5 	bl	8001f30 <LL_ADC_IsEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe ffc5 	bl	8001ee0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f56:	f7fe fe1b 	bl	8001b90 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d914      	bls.n	8002f8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d00d      	beq.n	8002f8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d1cf      	bne.n	8002f3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	8000003f 	.word	0x8000003f
 8002fac:	50040300 	.word	0x50040300
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	053e2d63 	.word	0x053e2d63

08002fb8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe ffc6 	bl	8001f56 <LL_ADC_IsDisableOngoing>
 8002fca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe ffad 	bl	8001f30 <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d047      	beq.n	800306c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d144      	bne.n	800306c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030d 	and.w	r3, r3, #13
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d10c      	bne.n	800300a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe ff87 	bl	8001f08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2203      	movs	r2, #3
 8003000:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003002:	f7fe fdc5 	bl	8001b90 <HAL_GetTick>
 8003006:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003008:	e029      	b.n	800305e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e023      	b.n	800306e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003026:	f7fe fdb3 	bl	8001b90 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d914      	bls.n	800305e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e007      	b.n	800306e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1dc      	bne.n	8003026 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <LL_ADC_StartCalibration>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003092:	4313      	orrs	r3, r2
 8003094:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_ADCEx_Calibration_Start+0x1c>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e04d      	b.n	8003188 <HAL_ADCEx_Calibration_Start+0xb8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff5f 	bl	8002fb8 <ADC_Disable>
 80030fa:	4603      	mov	r3, r0
 80030fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d136      	bne.n	8003172 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800310c:	f023 0302 	bic.w	r3, r3, #2
 8003110:	f043 0202 	orr.w	r2, r3, #2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ffa9 	bl	8003076 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003124:	e014      	b.n	8003150 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3301      	adds	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003132:	d30d      	bcc.n	8003150 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	f023 0312 	bic.w	r3, r3, #18
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e01b      	b.n	8003188 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ffa7 	bl	80030a8 <LL_ADC_IsCalibrationOnGoing>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e2      	bne.n	8003126 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f023 0303 	bic.w	r3, r3, #3
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	659a      	str	r2, [r3, #88]	; 0x58
 8003170:	e005      	b.n	800317e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031ac:	4013      	ands	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031c2:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	60d3      	str	r3, [r2, #12]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <__NVIC_GetPriorityGrouping+0x18>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 0307 	and.w	r3, r3, #7
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	6039      	str	r1, [r7, #0]
 80031fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003204:	2b00      	cmp	r3, #0
 8003206:	db0a      	blt.n	800321e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	490c      	ldr	r1, [pc, #48]	; (8003240 <__NVIC_SetPriority+0x4c>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	0112      	lsls	r2, r2, #4
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	440b      	add	r3, r1
 8003218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800321c:	e00a      	b.n	8003234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4908      	ldr	r1, [pc, #32]	; (8003244 <__NVIC_SetPriority+0x50>)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	3b04      	subs	r3, #4
 800322c:	0112      	lsls	r2, r2, #4
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	440b      	add	r3, r1
 8003232:	761a      	strb	r2, [r3, #24]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003248:	b480      	push	{r7}
 800324a:	b089      	sub	sp, #36	; 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f1c3 0307 	rsb	r3, r3, #7
 8003262:	2b04      	cmp	r3, #4
 8003264:	bf28      	it	cs
 8003266:	2304      	movcs	r3, #4
 8003268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3304      	adds	r3, #4
 800326e:	2b06      	cmp	r3, #6
 8003270:	d902      	bls.n	8003278 <NVIC_EncodePriority+0x30>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3b03      	subs	r3, #3
 8003276:	e000      	b.n	800327a <NVIC_EncodePriority+0x32>
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43da      	mvns	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	401a      	ands	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003290:	f04f 31ff 	mov.w	r1, #4294967295
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43d9      	mvns	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	4313      	orrs	r3, r2
         );
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c0:	d301      	bcc.n	80032c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00f      	b.n	80032e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <SysTick_Config+0x40>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ce:	210f      	movs	r1, #15
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f7ff ff8e 	bl	80031f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <SysTick_Config+0x40>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <SysTick_Config+0x40>)
 80032e0:	2207      	movs	r2, #7
 80032e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	e000e010 	.word	0xe000e010

080032f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff47 	bl	8003190 <__NVIC_SetPriorityGrouping>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800331c:	f7ff ff5c 	bl	80031d8 <__NVIC_GetPriorityGrouping>
 8003320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	6978      	ldr	r0, [r7, #20]
 8003328:	f7ff ff8e 	bl	8003248 <NVIC_EncodePriority>
 800332c:	4602      	mov	r2, r0
 800332e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff5d 	bl	80031f4 <__NVIC_SetPriority>
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ffb0 	bl	80032b0 <SysTick_Config>
 8003350:	4603      	mov	r3, r0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e014      	b.n	8003396 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	791b      	ldrb	r3, [r3, #4]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fe f9a3 	bl	80016c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	795b      	ldrb	r3, [r3, #5]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_DAC_Start+0x16>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e040      	b.n	8003436 <HAL_DAC_Start+0x98>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2201      	movs	r2, #1
 80033ce:	409a      	lsls	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d11d      	bne.n	8003428 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	e014      	b.n	8003428 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2102      	movs	r1, #2
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	429a      	cmp	r2, r3
 8003416:	d107      	bne.n	8003428 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0202 	orr.w	r2, r2, #2
 8003426:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003442:	b480      	push	{r7}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	3308      	adds	r3, #8
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e004      	b.n	8003476 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	3314      	adds	r3, #20
 8003474:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	461a      	mov	r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	795b      	ldrb	r3, [r3, #5]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_DAC_ConfigChannel+0x1c>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e12a      	b.n	80036fe <HAL_DAC_ConfigChannel+0x272>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2202      	movs	r2, #2
 80034b2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d174      	bne.n	80035a6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034bc:	f7fe fb68 	bl	8001b90 <HAL_GetTick>
 80034c0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d134      	bne.n	8003532 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034c8:	e011      	b.n	80034ee <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034ca:	f7fe fb61 	bl	8001b90 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d90a      	bls.n	80034ee <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f043 0208 	orr.w	r2, r3, #8
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2203      	movs	r2, #3
 80034e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e107      	b.n	80036fe <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e6      	bne.n	80034ca <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f7fe fb53 	bl	8001ba8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	69d2      	ldr	r2, [r2, #28]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
 800350c:	e01e      	b.n	800354c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800350e:	f7fe fb3f 	bl	8001b90 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d90a      	bls.n	8003532 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f043 0208 	orr.w	r2, r3, #8
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2203      	movs	r2, #3
 800352c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0e5      	b.n	80036fe <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	dbe8      	blt.n	800350e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800353c:	2001      	movs	r0, #1
 800353e:	f7fe fb33 	bl	8001ba8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	69d2      	ldr	r2, [r2, #28]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	ea02 0103 	and.w	r1, r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	409a      	lsls	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	21ff      	movs	r1, #255	; 0xff
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	ea02 0103 	and.w	r1, r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	409a      	lsls	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d11d      	bne.n	80035ea <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	221f      	movs	r2, #31
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2207      	movs	r2, #7
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	4013      	ands	r3, r2
 8003604:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	431a      	orrs	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	4313      	orrs	r3, r2
 8003628:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	4013      	ands	r3, r2
 800366c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	4313      	orrs	r3, r2
 8003684:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368e:	d104      	bne.n	800369a <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e018      	b.n	80036cc <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e00f      	b.n	80036cc <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80036ac:	f001 f88c 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80036b0:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <HAL_DAC_ConfigChannel+0x27c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d904      	bls.n	80036c4 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e003      	b.n	80036cc <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036ca:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	22c0      	movs	r2, #192	; 0xc0
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	400a      	ands	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	04c4b400 	.word	0x04c4b400

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371a:	e166      	b.n	80039ea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8158 	beq.w	80039e4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d005      	beq.n	800374c <HAL_GPIO_Init+0x40>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d130      	bne.n	80037ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003782:	2201      	movs	r2, #1
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 0201 	and.w	r2, r3, #1
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d017      	beq.n	80037ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	2203      	movs	r2, #3
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d123      	bne.n	800383e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	6939      	ldr	r1, [r7, #16]
 800383a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80b2 	beq.w	80039e4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <HAL_GPIO_Init+0x2fc>)
 8003882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003884:	4a60      	ldr	r2, [pc, #384]	; (8003a08 <HAL_GPIO_Init+0x2fc>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6613      	str	r3, [r2, #96]	; 0x60
 800388c:	4b5e      	ldr	r3, [pc, #376]	; (8003a08 <HAL_GPIO_Init+0x2fc>)
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003898:	4a5c      	ldr	r2, [pc, #368]	; (8003a0c <HAL_GPIO_Init+0x300>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	220f      	movs	r2, #15
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038c2:	d02b      	beq.n	800391c <HAL_GPIO_Init+0x210>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_GPIO_Init+0x304>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d025      	beq.n	8003918 <HAL_GPIO_Init+0x20c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a51      	ldr	r2, [pc, #324]	; (8003a14 <HAL_GPIO_Init+0x308>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d01f      	beq.n	8003914 <HAL_GPIO_Init+0x208>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a50      	ldr	r2, [pc, #320]	; (8003a18 <HAL_GPIO_Init+0x30c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d019      	beq.n	8003910 <HAL_GPIO_Init+0x204>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a4f      	ldr	r2, [pc, #316]	; (8003a1c <HAL_GPIO_Init+0x310>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_GPIO_Init+0x200>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a4e      	ldr	r2, [pc, #312]	; (8003a20 <HAL_GPIO_Init+0x314>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00d      	beq.n	8003908 <HAL_GPIO_Init+0x1fc>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a4d      	ldr	r2, [pc, #308]	; (8003a24 <HAL_GPIO_Init+0x318>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <HAL_GPIO_Init+0x1f8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a4c      	ldr	r2, [pc, #304]	; (8003a28 <HAL_GPIO_Init+0x31c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_GPIO_Init+0x1f4>
 80038fc:	2307      	movs	r3, #7
 80038fe:	e00e      	b.n	800391e <HAL_GPIO_Init+0x212>
 8003900:	2308      	movs	r3, #8
 8003902:	e00c      	b.n	800391e <HAL_GPIO_Init+0x212>
 8003904:	2306      	movs	r3, #6
 8003906:	e00a      	b.n	800391e <HAL_GPIO_Init+0x212>
 8003908:	2305      	movs	r3, #5
 800390a:	e008      	b.n	800391e <HAL_GPIO_Init+0x212>
 800390c:	2304      	movs	r3, #4
 800390e:	e006      	b.n	800391e <HAL_GPIO_Init+0x212>
 8003910:	2303      	movs	r3, #3
 8003912:	e004      	b.n	800391e <HAL_GPIO_Init+0x212>
 8003914:	2302      	movs	r3, #2
 8003916:	e002      	b.n	800391e <HAL_GPIO_Init+0x212>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_GPIO_Init+0x212>
 800391c:	2300      	movs	r3, #0
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	f002 0203 	and.w	r2, r2, #3
 8003924:	0092      	lsls	r2, r2, #2
 8003926:	4093      	lsls	r3, r2
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800392e:	4937      	ldr	r1, [pc, #220]	; (8003a0c <HAL_GPIO_Init+0x300>)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3302      	adds	r3, #2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800393c:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_GPIO_Init+0x320>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003960:	4a32      	ldr	r2, [pc, #200]	; (8003a2c <HAL_GPIO_Init+0x320>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003966:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <HAL_GPIO_Init+0x320>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800398a:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <HAL_GPIO_Init+0x320>)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003990:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <HAL_GPIO_Init+0x320>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <HAL_GPIO_Init+0x320>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <HAL_GPIO_Init+0x320>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039de:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <HAL_GPIO_Init+0x320>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	3301      	adds	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f ae91 	bne.w	800371c <HAL_GPIO_Init+0x10>
  }
}
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	48000400 	.word	0x48000400
 8003a14:	48000800 	.word	0x48000800
 8003a18:	48000c00 	.word	0x48000c00
 8003a1c:	48001000 	.word	0x48001000
 8003a20:	48001400 	.word	0x48001400
 8003a24:	48001800 	.word	0x48001800
 8003a28:	48001c00 	.word	0x48001c00
 8003a2c:	40010400 	.word	0x40010400

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d102      	bne.n	8003a78 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a76:	e00b      	b.n	8003a90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a86:	d102      	bne.n	8003a8e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a8c:	e000      	b.n	8003a90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a8e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40007000 	.word	0x40007000

08003aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d141      	bne.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aae:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aba:	d131      	bne.n	8003b20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003abc:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac2:	4a46      	ldr	r2, [pc, #280]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003acc:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad4:	4a41      	ldr	r2, [pc, #260]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003adc:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2232      	movs	r2, #50	; 0x32
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	4a3f      	ldr	r2, [pc, #252]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	0c9b      	lsrs	r3, r3, #18
 8003aee:	3301      	adds	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af2:	e002      	b.n	8003afa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b06:	d102      	bne.n	8003b0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f2      	bne.n	8003af4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b0e:	4b33      	ldr	r3, [pc, #204]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d158      	bne.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e057      	b.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b20:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b26:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b30:	e04d      	b.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b38:	d141      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b3a:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d131      	bne.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b48:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4e:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b58:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b60:	4a1e      	ldr	r2, [pc, #120]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2232      	movs	r2, #50	; 0x32
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	4a1c      	ldr	r2, [pc, #112]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	0c9b      	lsrs	r3, r3, #18
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b7e:	e002      	b.n	8003b86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b92:	d102      	bne.n	8003b9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f2      	bne.n	8003b80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba6:	d112      	bne.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e011      	b.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bbc:	e007      	b.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bcc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	20000000 	.word	0x20000000
 8003be4:	431bde83 	.word	0x431bde83

08003be8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bf6:	6053      	str	r3, [r2, #4]
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40007000 	.word	0x40007000

08003c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f000 bc08 	b.w	800442c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1c:	4b96      	ldr	r3, [pc, #600]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c26:	4b94      	ldr	r3, [pc, #592]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80e4 	beq.w	8003e06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4c>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	f040 808b 	bne.w	8003d62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	f040 8087 	bne.w	8003d62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c54:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x64>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e3df      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1a      	ldr	r2, [r3, #32]
 8003c70:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <HAL_RCC_OscConfig+0x7e>
 8003c7c:	4b7e      	ldr	r3, [pc, #504]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c84:	e005      	b.n	8003c92 <HAL_RCC_OscConfig+0x8a>
 8003c86:	4b7c      	ldr	r3, [pc, #496]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d223      	bcs.n	8003cde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fdcc 	bl	8004838 <RCC_SetFlashLatencyFromMSIRange>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e3c0      	b.n	800442c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003caa:	4b73      	ldr	r3, [pc, #460]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a72      	ldr	r2, [pc, #456]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	f043 0308 	orr.w	r3, r3, #8
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	496d      	ldr	r1, [pc, #436]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cc8:	4b6b      	ldr	r3, [pc, #428]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	4968      	ldr	r1, [pc, #416]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	e025      	b.n	8003d2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cde:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4960      	ldr	r1, [pc, #384]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cfc:	4b5e      	ldr	r3, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	495b      	ldr	r1, [pc, #364]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fd8c 	bl	8004838 <RCC_SetFlashLatencyFromMSIRange>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e380      	b.n	800442c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d2a:	f000 fcc1 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	4b51      	ldr	r3, [pc, #324]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	4950      	ldr	r1, [pc, #320]	; (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d3c:	5ccb      	ldrb	r3, [r1, r3]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	4a4e      	ldr	r2, [pc, #312]	; (8003e80 <HAL_RCC_OscConfig+0x278>)
 8003d48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d4a:	4b4e      	ldr	r3, [pc, #312]	; (8003e84 <HAL_RCC_OscConfig+0x27c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd fece 	bl	8001af0 <HAL_InitTick>
 8003d54:	4603      	mov	r3, r0
 8003d56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d052      	beq.n	8003e04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	e364      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d032      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d6a:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a42      	ldr	r2, [pc, #264]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d76:	f7fd ff0b 	bl	8001b90 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d7e:	f7fd ff07 	bl	8001b90 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e34d      	b.n	800442c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d90:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a35      	ldr	r2, [pc, #212]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003da2:	f043 0308 	orr.w	r3, r3, #8
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	4930      	ldr	r1, [pc, #192]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dba:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	492b      	ldr	r1, [pc, #172]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
 8003dce:	e01a      	b.n	8003e06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fed8 	bl	8001b90 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de4:	f7fd fed4 	bl	8001b90 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e31a      	b.n	800442c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x1dc>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d073      	beq.n	8003efa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_OscConfig+0x21c>
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d10e      	bne.n	8003e3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d063      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x2f0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d15f      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e2f7      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x24c>
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e025      	b.n	8003ea0 <HAL_RCC_OscConfig+0x298>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5c:	d114      	bne.n	8003e88 <HAL_RCC_OscConfig+0x280>
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a02      	ldr	r2, [pc, #8]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e013      	b.n	8003ea0 <HAL_RCC_OscConfig+0x298>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	08009edc 	.word	0x08009edc
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20000004 	.word	0x20000004
 8003e88:	4ba0      	ldr	r3, [pc, #640]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a9f      	ldr	r2, [pc, #636]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b9d      	ldr	r3, [pc, #628]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a9c      	ldr	r2, [pc, #624]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d013      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd fe72 	bl	8001b90 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fd fe6e 	bl	8001b90 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e2b4      	b.n	800442c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec2:	4b92      	ldr	r3, [pc, #584]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x2a8>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd fe5e 	bl	8001b90 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fd fe5a 	bl	8001b90 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e2a0      	b.n	800442c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eea:	4b88      	ldr	r3, [pc, #544]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2d0>
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d060      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_OscConfig+0x310>
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d116      	bne.n	8003f46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f18:	4b7c      	ldr	r3, [pc, #496]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_OscConfig+0x328>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e27d      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	4973      	ldr	r1, [pc, #460]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f44:	e040      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d023      	beq.n	8003f96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4e:	4b6f      	ldr	r3, [pc, #444]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6e      	ldr	r2, [pc, #440]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fe19 	bl	8001b90 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fd fe15 	bl	8001b90 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e25b      	b.n	800442c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f74:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b62      	ldr	r3, [pc, #392]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	495f      	ldr	r1, [pc, #380]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
 8003f94:	e018      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b5d      	ldr	r3, [pc, #372]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5c      	ldr	r2, [pc, #368]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fd fdf5 	bl	8001b90 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003faa:	f7fd fdf1 	bl	8001b90 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e237      	b.n	800442c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d03c      	beq.n	800404e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01c      	beq.n	8004016 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe2:	4a4a      	ldr	r2, [pc, #296]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd fdd0 	bl	8001b90 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff4:	f7fd fdcc 	bl	8001b90 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e212      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ef      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x3ec>
 8004014:	e01b      	b.n	800404e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401c:	4a3b      	ldr	r2, [pc, #236]	; (800410c <HAL_RCC_OscConfig+0x504>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fd fdb3 	bl	8001b90 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402e:	f7fd fdaf 	bl	8001b90 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1f5      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1ef      	bne.n	800402e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80a6 	beq.w	80041a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405c:	2300      	movs	r3, #0
 800405e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	4b27      	ldr	r3, [pc, #156]	; (800410c <HAL_RCC_OscConfig+0x504>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	4a26      	ldr	r2, [pc, #152]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	6593      	str	r3, [r2, #88]	; 0x58
 8004078:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCC_OscConfig+0x504>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004084:	2301      	movs	r3, #1
 8004086:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <HAL_RCC_OscConfig+0x508>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d118      	bne.n	80040c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004094:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <HAL_RCC_OscConfig+0x508>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_RCC_OscConfig+0x508>)
 800409a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a0:	f7fd fd76 	bl	8001b90 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a8:	f7fd fd72 	bl	8001b90 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1b8      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ba:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_RCC_OscConfig+0x508>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d108      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4d8>
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	4a0d      	ldr	r2, [pc, #52]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040de:	e029      	b.n	8004134 <HAL_RCC_OscConfig+0x52c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d115      	bne.n	8004114 <HAL_RCC_OscConfig+0x50c>
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040f0:	f043 0304 	orr.w	r3, r3, #4
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	4a03      	ldr	r2, [pc, #12]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004108:	e014      	b.n	8004134 <HAL_RCC_OscConfig+0x52c>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	40007000 	.word	0x40007000
 8004114:	4b9d      	ldr	r3, [pc, #628]	; (800438c <HAL_RCC_OscConfig+0x784>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a9c      	ldr	r2, [pc, #624]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004124:	4b99      	ldr	r3, [pc, #612]	; (800438c <HAL_RCC_OscConfig+0x784>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	4a98      	ldr	r2, [pc, #608]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800412c:	f023 0304 	bic.w	r3, r3, #4
 8004130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d016      	beq.n	800416a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fd fd28 	bl	8001b90 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004142:	e00a      	b.n	800415a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fd fd24 	bl	8001b90 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e168      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415a:	4b8c      	ldr	r3, [pc, #560]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ed      	beq.n	8004144 <HAL_RCC_OscConfig+0x53c>
 8004168:	e015      	b.n	8004196 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fd fd11 	bl	8001b90 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fd fd0d 	bl	8001b90 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e151      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004188:	4b80      	ldr	r3, [pc, #512]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ed      	bne.n	8004172 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004196:	7ffb      	ldrb	r3, [r7, #31]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419c:	4b7b      	ldr	r3, [pc, #492]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	4a7a      	ldr	r2, [pc, #488]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80041a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d03c      	beq.n	800422e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01c      	beq.n	80041f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041bc:	4b73      	ldr	r3, [pc, #460]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80041be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c2:	4a72      	ldr	r2, [pc, #456]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd fce0 	bl	8001b90 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041d4:	f7fd fcdc 	bl	8001b90 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e122      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041e6:	4b69      	ldr	r3, [pc, #420]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80041e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0ef      	beq.n	80041d4 <HAL_RCC_OscConfig+0x5cc>
 80041f4:	e01b      	b.n	800422e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041f6:	4b65      	ldr	r3, [pc, #404]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80041f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041fc:	4a63      	ldr	r2, [pc, #396]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004206:	f7fd fcc3 	bl	8001b90 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800420e:	f7fd fcbf 	bl	8001b90 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e105      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004220:	4b5a      	ldr	r3, [pc, #360]	; (800438c <HAL_RCC_OscConfig+0x784>)
 8004222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1ef      	bne.n	800420e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80f9 	beq.w	800442a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	2b02      	cmp	r3, #2
 800423e:	f040 80cf 	bne.w	80043e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004242:	4b52      	ldr	r3, [pc, #328]	; (800438c <HAL_RCC_OscConfig+0x784>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 0203 	and.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	429a      	cmp	r2, r3
 8004254:	d12c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	3b01      	subs	r3, #1
 8004262:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d123      	bne.n	80042b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004272:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d11b      	bne.n	80042b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d113      	bne.n	80042b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	3b01      	subs	r3, #1
 8004296:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d109      	bne.n	80042b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d071      	beq.n	8004394 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d068      	beq.n	8004388 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042b6:	4b35      	ldr	r3, [pc, #212]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042c2:	4b32      	ldr	r3, [pc, #200]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0ac      	b.n	800442c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042d2:	4b2e      	ldr	r3, [pc, #184]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2d      	ldr	r2, [pc, #180]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80042d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042de:	f7fd fc57 	bl	8001b90 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fd fc53 	bl	8001b90 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e099      	b.n	800442c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_OscConfig+0x784>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f0      	bne.n	80042e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004304:	4b21      	ldr	r3, [pc, #132]	; (800438c <HAL_RCC_OscConfig+0x784>)
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <HAL_RCC_OscConfig+0x788>)
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004314:	3a01      	subs	r2, #1
 8004316:	0112      	lsls	r2, r2, #4
 8004318:	4311      	orrs	r1, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800431e:	0212      	lsls	r2, r2, #8
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004326:	0852      	lsrs	r2, r2, #1
 8004328:	3a01      	subs	r2, #1
 800432a:	0552      	lsls	r2, r2, #21
 800432c:	4311      	orrs	r1, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004332:	0852      	lsrs	r2, r2, #1
 8004334:	3a01      	subs	r2, #1
 8004336:	0652      	lsls	r2, r2, #25
 8004338:	4311      	orrs	r1, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800433e:	06d2      	lsls	r2, r2, #27
 8004340:	430a      	orrs	r2, r1
 8004342:	4912      	ldr	r1, [pc, #72]	; (800438c <HAL_RCC_OscConfig+0x784>)
 8004344:	4313      	orrs	r3, r2
 8004346:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0f      	ldr	r2, [pc, #60]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800434e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004352:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <HAL_RCC_OscConfig+0x784>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a0c      	ldr	r2, [pc, #48]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800435a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800435e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004360:	f7fd fc16 	bl	8001b90 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004368:	f7fd fc12 	bl	8001b90 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e058      	b.n	800442c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437a:	4b04      	ldr	r3, [pc, #16]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004386:	e050      	b.n	800442a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e04f      	b.n	800442c <HAL_RCC_OscConfig+0x824>
 800438c:	40021000 	.word	0x40021000
 8004390:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004394:	4b27      	ldr	r3, [pc, #156]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d144      	bne.n	800442a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a23      	ldr	r2, [pc, #140]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 80043a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043ac:	4b21      	ldr	r3, [pc, #132]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a20      	ldr	r2, [pc, #128]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043b8:	f7fd fbea 	bl	8001b90 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fbe6 	bl	8001b90 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e02c      	b.n	800442c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x7b8>
 80043de:	e024      	b.n	800442a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d01f      	beq.n	8004426 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b13      	ldr	r3, [pc, #76]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a12      	ldr	r2, [pc, #72]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 80043ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fd fbcd 	bl	8001b90 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fd fbc9 	bl	8001b90 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e00f      	b.n	800442c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	4905      	ldr	r1, [pc, #20]	; (8004434 <HAL_RCC_OscConfig+0x82c>)
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCC_OscConfig+0x830>)
 8004420:	4013      	ands	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
 8004424:	e001      	b.n	800442a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	feeefffc 	.word	0xfeeefffc

0800443c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e11d      	b.n	8004690 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b90      	ldr	r3, [pc, #576]	; (8004698 <HAL_RCC_ClockConfig+0x25c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d910      	bls.n	8004484 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <HAL_RCC_ClockConfig+0x25c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 020f 	bic.w	r2, r3, #15
 800446a:	498b      	ldr	r1, [pc, #556]	; (8004698 <HAL_RCC_ClockConfig+0x25c>)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b89      	ldr	r3, [pc, #548]	; (8004698 <HAL_RCC_ClockConfig+0x25c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e105      	b.n	8004690 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	4b81      	ldr	r3, [pc, #516]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800449c:	429a      	cmp	r2, r3
 800449e:	d908      	bls.n	80044b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a0:	4b7e      	ldr	r3, [pc, #504]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	497b      	ldr	r1, [pc, #492]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d079      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d11e      	bne.n	8004504 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c6:	4b75      	ldr	r3, [pc, #468]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e0dc      	b.n	8004690 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80044d6:	f000 fa09 	bl	80048ec <RCC_GetSysClockFreqFromPLLSource>
 80044da:	4603      	mov	r3, r0
 80044dc:	4a70      	ldr	r2, [pc, #448]	; (80046a0 <HAL_RCC_ClockConfig+0x264>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d946      	bls.n	8004570 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044e2:	4b6e      	ldr	r3, [pc, #440]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d140      	bne.n	8004570 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044ee:	4b6b      	ldr	r3, [pc, #428]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f6:	4a69      	ldr	r2, [pc, #420]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80044f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e035      	b.n	8004570 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d107      	bne.n	800451c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450c:	4b63      	ldr	r3, [pc, #396]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d115      	bne.n	8004544 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0b9      	b.n	8004690 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004524:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0ad      	b.n	8004690 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004534:	4b59      	ldr	r3, [pc, #356]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0a5      	b.n	8004690 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004544:	f000 f8b4 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8004548:	4603      	mov	r3, r0
 800454a:	4a55      	ldr	r2, [pc, #340]	; (80046a0 <HAL_RCC_ClockConfig+0x264>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d90f      	bls.n	8004570 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004550:	4b52      	ldr	r3, [pc, #328]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004564:	4a4d      	ldr	r2, [pc, #308]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 8004566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004570:	4b4a      	ldr	r3, [pc, #296]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f023 0203 	bic.w	r2, r3, #3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4947      	ldr	r1, [pc, #284]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004582:	f7fd fb05 	bl	8001b90 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458a:	f7fd fb01 	bl	8001b90 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	; 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e077      	b.n	8004690 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a0:	4b3e      	ldr	r3, [pc, #248]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 020c 	and.w	r2, r3, #12
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d1eb      	bne.n	800458a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d105      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045b8:	4b38      	ldr	r3, [pc, #224]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a37      	ldr	r2, [pc, #220]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80045be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	4b31      	ldr	r3, [pc, #196]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045dc:	429a      	cmp	r2, r3
 80045de:	d208      	bcs.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b2e      	ldr	r3, [pc, #184]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	492b      	ldr	r1, [pc, #172]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045f2:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_RCC_ClockConfig+0x25c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d210      	bcs.n	8004622 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004600:	4b25      	ldr	r3, [pc, #148]	; (8004698 <HAL_RCC_ClockConfig+0x25c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 020f 	bic.w	r2, r3, #15
 8004608:	4923      	ldr	r1, [pc, #140]	; (8004698 <HAL_RCC_ClockConfig+0x25c>)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004610:	4b21      	ldr	r3, [pc, #132]	; (8004698 <HAL_RCC_ClockConfig+0x25c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d001      	beq.n	8004622 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e036      	b.n	8004690 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800462e:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4918      	ldr	r1, [pc, #96]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4910      	ldr	r1, [pc, #64]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004660:	f000 f826 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_RCC_ClockConfig+0x260>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	490c      	ldr	r1, [pc, #48]	; (80046a4 <HAL_RCC_ClockConfig+0x268>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
 800467c:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <HAL_RCC_ClockConfig+0x26c>)
 800467e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_RCC_ClockConfig+0x270>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7fd fa33 	bl	8001af0 <HAL_InitTick>
 800468a:	4603      	mov	r3, r0
 800468c:	73fb      	strb	r3, [r7, #15]

  return status;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40022000 	.word	0x40022000
 800469c:	40021000 	.word	0x40021000
 80046a0:	04c4b400 	.word	0x04c4b400
 80046a4:	08009edc 	.word	0x08009edc
 80046a8:	20000000 	.word	0x20000000
 80046ac:	20000004 	.word	0x20000004

080046b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046be:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046c8:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x34>
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d121      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d11e      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046e4:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046f0:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	e005      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004700:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800470c:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004714:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10d      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b04      	cmp	r3, #4
 8004726:	d102      	bne.n	800472e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	e004      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d101      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004736:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d134      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800473e:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d003      	beq.n	8004756 <HAL_RCC_GetSysClockFreq+0xa6>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d003      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0xac>
 8004754:	e005      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004758:	617b      	str	r3, [r7, #20]
      break;
 800475a:	e005      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800475e:	617b      	str	r3, [r7, #20]
      break;
 8004760:	e002      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	617b      	str	r3, [r7, #20]
      break;
 8004766:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004768:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	3301      	adds	r3, #1
 8004774:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	fb03 f202 	mul.w	r2, r3, r2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	0e5b      	lsrs	r3, r3, #25
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	3301      	adds	r3, #1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047a8:	69bb      	ldr	r3, [r7, #24]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000
 80047bc:	08009ef4 	.word	0x08009ef4
 80047c0:	00f42400 	.word	0x00f42400
 80047c4:	007a1200 	.word	0x007a1200

080047c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000000 	.word	0x20000000

080047e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047e4:	f7ff fff0 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4904      	ldr	r1, [pc, #16]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	08009eec 	.word	0x08009eec

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004810:	f7ff ffda 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0adb      	lsrs	r3, r3, #11
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4904      	ldr	r1, [pc, #16]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	08009eec 	.word	0x08009eec

08004838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004850:	f7ff f906 	bl	8003a60 <HAL_PWREx_GetVoltageRange>
 8004854:	6178      	str	r0, [r7, #20]
 8004856:	e014      	b.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	; 0x58
 8004864:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004870:	f7ff f8f6 	bl	8003a60 <HAL_PWREx_GetVoltageRange>
 8004874:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004880:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d10b      	bne.n	80048a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b80      	cmp	r3, #128	; 0x80
 800488e:	d913      	bls.n	80048b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2ba0      	cmp	r3, #160	; 0xa0
 8004894:	d902      	bls.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004896:	2302      	movs	r3, #2
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e00d      	b.n	80048b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800489c:	2301      	movs	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	e00a      	b.n	80048b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b7f      	cmp	r3, #127	; 0x7f
 80048a6:	d902      	bls.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048a8:	2302      	movs	r3, #2
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	e004      	b.n	80048b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b70      	cmp	r3, #112	; 0x70
 80048b2:	d101      	bne.n	80048b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048b4:	2301      	movs	r3, #1
 80048b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 020f 	bic.w	r2, r3, #15
 80048c0:	4909      	ldr	r1, [pc, #36]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048c8:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d001      	beq.n	80048da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40022000 	.word	0x40022000

080048ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048f2:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d00b      	beq.n	800491a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d825      	bhi.n	8004954 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d008      	beq.n	8004920 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d11f      	bne.n	8004954 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004916:	613b      	str	r3, [r7, #16]
    break;
 8004918:	e01f      	b.n	800495a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800491a:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800491c:	613b      	str	r3, [r7, #16]
    break;
 800491e:	e01c      	b.n	800495a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004920:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d107      	bne.n	800493c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800492e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e005      	b.n	8004948 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800493c:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004948:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004950:	613b      	str	r3, [r7, #16]
    break;
 8004952:	e002      	b.n	800495a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]
    break;
 8004958:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	3301      	adds	r3, #1
 8004966:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	fb03 f202 	mul.w	r2, r3, r2
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	fbb2 f3f3 	udiv	r3, r2, r3
 800497e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	0e5b      	lsrs	r3, r3, #25
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800499a:	683b      	ldr	r3, [r7, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40021000 	.word	0x40021000
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	007a1200 	.word	0x007a1200
 80049b4:	08009ef4 	.word	0x08009ef4

080049b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c0:	2300      	movs	r3, #0
 80049c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c4:	2300      	movs	r3, #0
 80049c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d040      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d8:	2b80      	cmp	r3, #128	; 0x80
 80049da:	d02a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d825      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049e0:	2b60      	cmp	r3, #96	; 0x60
 80049e2:	d026      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d821      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d006      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d81d      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d010      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049f8:	e018      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049fa:	4b89      	ldr	r3, [pc, #548]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4a88      	ldr	r2, [pc, #544]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a06:	e015      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fb02 	bl	8005018 <RCCEx_PLLSAI1_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a18:	e00c      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3320      	adds	r3, #32
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fbed 	bl	8005200 <RCCEx_PLLSAI2_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a2a:	e003      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	74fb      	strb	r3, [r7, #19]
      break;
 8004a30:	e000      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a3a:	4b79      	ldr	r3, [pc, #484]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a40:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a48:	4975      	ldr	r1, [pc, #468]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a50:	e001      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d047      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6a:	d030      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d82a      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a76:	d02a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7c:	d824      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a82:	d008      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a88:	d81e      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a92:	d010      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a94:	e018      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a96:	4b62      	ldr	r3, [pc, #392]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a61      	ldr	r2, [pc, #388]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa2:	e015      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fab4 	bl	8005018 <RCCEx_PLLSAI1_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ab4:	e00c      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3320      	adds	r3, #32
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fb9f 	bl	8005200 <RCCEx_PLLSAI2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	74fb      	strb	r3, [r7, #19]
      break;
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ad6:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	494e      	ldr	r1, [pc, #312]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004aec:	e001      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 809f 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b00:	2300      	movs	r3, #0
 8004b02:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b04:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	4b41      	ldr	r3, [pc, #260]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	4a40      	ldr	r2, [pc, #256]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6593      	str	r3, [r2, #88]	; 0x58
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b32:	2301      	movs	r3, #1
 8004b34:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b36:	4b3b      	ldr	r3, [pc, #236]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3a      	ldr	r2, [pc, #232]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b42:	f7fd f825 	bl	8001b90 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b48:	e009      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4a:	f7fd f821 	bl	8001b90 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d902      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b5c:	e005      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b5e:	4b31      	ldr	r3, [pc, #196]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0ef      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d15b      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b70:	4b2b      	ldr	r3, [pc, #172]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01f      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d019      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b9a:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bba:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d016      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fc ffe0 	bl	8001b90 <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd2:	e00b      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7fc ffdc 	bl	8001b90 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d902      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	74fb      	strb	r3, [r7, #19]
            break;
 8004bea:	e006      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0ec      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10c      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	4903      	ldr	r1, [pc, #12]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c18:	e008      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	74bb      	strb	r3, [r7, #18]
 8004c1e:	e005      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c2c:	7c7b      	ldrb	r3, [r7, #17]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d105      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c32:	4ba0      	ldr	r3, [pc, #640]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	4a9f      	ldr	r2, [pc, #636]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c4a:	4b9a      	ldr	r3, [pc, #616]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f023 0203 	bic.w	r2, r3, #3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	4996      	ldr	r1, [pc, #600]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c6c:	4b91      	ldr	r3, [pc, #580]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 020c 	bic.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	498e      	ldr	r1, [pc, #568]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c8e:	4b89      	ldr	r3, [pc, #548]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9c:	4985      	ldr	r1, [pc, #532]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb0:	4b80      	ldr	r3, [pc, #512]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	497d      	ldr	r1, [pc, #500]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd2:	4b78      	ldr	r3, [pc, #480]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	4974      	ldr	r1, [pc, #464]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cf4:	4b6f      	ldr	r3, [pc, #444]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d02:	496c      	ldr	r1, [pc, #432]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d16:	4b67      	ldr	r3, [pc, #412]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d24:	4963      	ldr	r1, [pc, #396]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d38:	4b5e      	ldr	r3, [pc, #376]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d46:	495b      	ldr	r1, [pc, #364]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d5a:	4b56      	ldr	r3, [pc, #344]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	4952      	ldr	r1, [pc, #328]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d7c:	4b4d      	ldr	r3, [pc, #308]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	494a      	ldr	r1, [pc, #296]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d9e:	4b45      	ldr	r3, [pc, #276]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	4941      	ldr	r1, [pc, #260]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dc0:	4b3c      	ldr	r3, [pc, #240]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dce:	4939      	ldr	r1, [pc, #228]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d028      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de2:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df0:	4930      	ldr	r1, [pc, #192]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e00:	d106      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e02:	4b2c      	ldr	r3, [pc, #176]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0c:	60d3      	str	r3, [r2, #12]
 8004e0e:	e011      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f8f9 	bl	8005018 <RCCEx_PLLSAI1_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d04d      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e48:	d108      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e50:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e5a:	e012      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e62:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7a:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
 8004e98:	e020      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea2:	d109      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a02      	ldr	r2, [pc, #8]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eae:	60d3      	str	r3, [r2, #12]
 8004eb0:	e014      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f8a5 	bl	8005018 <RCCEx_PLLSAI1_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d028      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ee8:	4b4a      	ldr	r3, [pc, #296]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef6:	4947      	ldr	r1, [pc, #284]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f06:	d106      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f08:	4b42      	ldr	r3, [pc, #264]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a41      	ldr	r2, [pc, #260]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f12:	60d3      	str	r3, [r2, #12]
 8004f14:	e011      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f1e:	d10c      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f876 	bl	8005018 <RCCEx_PLLSAI1_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01e      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f46:	4b33      	ldr	r3, [pc, #204]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f56:	492f      	ldr	r1, [pc, #188]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f851 	bl	8005018 <RCCEx_PLLSAI1_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f90:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f96:	f023 0204 	bic.w	r2, r3, #4
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa0:	491c      	ldr	r1, [pc, #112]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fb4:	4b17      	ldr	r3, [pc, #92]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fba:	f023 0218 	bic.w	r2, r3, #24
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	4913      	ldr	r1, [pc, #76]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d017      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fd8:	4b0e      	ldr	r3, [pc, #56]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe8:	490a      	ldr	r1, [pc, #40]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ffa:	d105      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005006:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005008:	7cbb      	ldrb	r3, [r7, #18]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000

08005018 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005026:	4b72      	ldr	r3, [pc, #456]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00e      	beq.n	8005050 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005032:	4b6f      	ldr	r3, [pc, #444]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0203 	and.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d103      	bne.n	800504a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
       ||
 8005046:	2b00      	cmp	r3, #0
 8005048:	d142      	bne.n	80050d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
 800504e:	e03f      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d018      	beq.n	800508a <RCCEx_PLLSAI1_Config+0x72>
 8005058:	2b03      	cmp	r3, #3
 800505a:	d825      	bhi.n	80050a8 <RCCEx_PLLSAI1_Config+0x90>
 800505c:	2b01      	cmp	r3, #1
 800505e:	d002      	beq.n	8005066 <RCCEx_PLLSAI1_Config+0x4e>
 8005060:	2b02      	cmp	r3, #2
 8005062:	d009      	beq.n	8005078 <RCCEx_PLLSAI1_Config+0x60>
 8005064:	e020      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005066:	4b62      	ldr	r3, [pc, #392]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d11d      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005076:	e01a      	b.n	80050ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005078:	4b5d      	ldr	r3, [pc, #372]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d116      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005088:	e013      	b.n	80050b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800508a:	4b59      	ldr	r3, [pc, #356]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005096:	4b56      	ldr	r3, [pc, #344]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050a6:	e006      	b.n	80050b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      break;
 80050ac:	e004      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050ae:	bf00      	nop
 80050b0:	e002      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d108      	bne.n	80050d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80050be:	4b4c      	ldr	r3, [pc, #304]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 0203 	bic.w	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4949      	ldr	r1, [pc, #292]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f040 8086 	bne.w	80051e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050d8:	4b45      	ldr	r3, [pc, #276]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a44      	ldr	r2, [pc, #272]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e4:	f7fc fd54 	bl	8001b90 <HAL_GetTick>
 80050e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ea:	e009      	b.n	8005100 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ec:	f7fc fd50 	bl	8001b90 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d902      	bls.n	8005100 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	73fb      	strb	r3, [r7, #15]
        break;
 80050fe:	e005      	b.n	800510c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005100:	4b3b      	ldr	r3, [pc, #236]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1ef      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d168      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d113      	bne.n	8005140 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005118:	4b35      	ldr	r3, [pc, #212]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	4b35      	ldr	r3, [pc, #212]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800511e:	4013      	ands	r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	0211      	lsls	r1, r2, #8
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68d2      	ldr	r2, [r2, #12]
 800512a:	06d2      	lsls	r2, r2, #27
 800512c:	4311      	orrs	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6852      	ldr	r2, [r2, #4]
 8005132:	3a01      	subs	r2, #1
 8005134:	0112      	lsls	r2, r2, #4
 8005136:	430a      	orrs	r2, r1
 8005138:	492d      	ldr	r1, [pc, #180]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
 800513e:	e02d      	b.n	800519c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d115      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005146:	4b2a      	ldr	r3, [pc, #168]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514c:	4013      	ands	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6892      	ldr	r2, [r2, #8]
 8005152:	0211      	lsls	r1, r2, #8
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6912      	ldr	r2, [r2, #16]
 8005158:	0852      	lsrs	r2, r2, #1
 800515a:	3a01      	subs	r2, #1
 800515c:	0552      	lsls	r2, r2, #21
 800515e:	4311      	orrs	r1, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6852      	ldr	r2, [r2, #4]
 8005164:	3a01      	subs	r2, #1
 8005166:	0112      	lsls	r2, r2, #4
 8005168:	430a      	orrs	r2, r1
 800516a:	4921      	ldr	r1, [pc, #132]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800516c:	4313      	orrs	r3, r2
 800516e:	610b      	str	r3, [r1, #16]
 8005170:	e014      	b.n	800519c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005172:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	4b21      	ldr	r3, [pc, #132]	; (80051fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6892      	ldr	r2, [r2, #8]
 800517e:	0211      	lsls	r1, r2, #8
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6952      	ldr	r2, [r2, #20]
 8005184:	0852      	lsrs	r2, r2, #1
 8005186:	3a01      	subs	r2, #1
 8005188:	0652      	lsls	r2, r2, #25
 800518a:	4311      	orrs	r1, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6852      	ldr	r2, [r2, #4]
 8005190:	3a01      	subs	r2, #1
 8005192:	0112      	lsls	r2, r2, #4
 8005194:	430a      	orrs	r2, r1
 8005196:	4916      	ldr	r1, [pc, #88]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005198:	4313      	orrs	r3, r2
 800519a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a8:	f7fc fcf2 	bl	8001b90 <HAL_GetTick>
 80051ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ae:	e009      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b0:	f7fc fcee 	bl	8001b90 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d902      	bls.n	80051c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	73fb      	strb	r3, [r7, #15]
          break;
 80051c2:	e005      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ef      	beq.n	80051b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	4904      	ldr	r1, [pc, #16]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
 80051f4:	07ff800f 	.word	0x07ff800f
 80051f8:	ff9f800f 	.word	0xff9f800f
 80051fc:	f9ff800f 	.word	0xf9ff800f

08005200 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800520e:	4b72      	ldr	r3, [pc, #456]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00e      	beq.n	8005238 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800521a:	4b6f      	ldr	r3, [pc, #444]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0203 	and.w	r2, r3, #3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d103      	bne.n	8005232 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
       ||
 800522e:	2b00      	cmp	r3, #0
 8005230:	d142      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	73fb      	strb	r3, [r7, #15]
 8005236:	e03f      	b.n	80052b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d018      	beq.n	8005272 <RCCEx_PLLSAI2_Config+0x72>
 8005240:	2b03      	cmp	r3, #3
 8005242:	d825      	bhi.n	8005290 <RCCEx_PLLSAI2_Config+0x90>
 8005244:	2b01      	cmp	r3, #1
 8005246:	d002      	beq.n	800524e <RCCEx_PLLSAI2_Config+0x4e>
 8005248:	2b02      	cmp	r3, #2
 800524a:	d009      	beq.n	8005260 <RCCEx_PLLSAI2_Config+0x60>
 800524c:	e020      	b.n	8005290 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800524e:	4b62      	ldr	r3, [pc, #392]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d11d      	bne.n	8005296 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800525e:	e01a      	b.n	8005296 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005260:	4b5d      	ldr	r3, [pc, #372]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d116      	bne.n	800529a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005270:	e013      	b.n	800529a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005272:	4b59      	ldr	r3, [pc, #356]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10f      	bne.n	800529e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800527e:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800528e:	e006      	b.n	800529e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      break;
 8005294:	e004      	b.n	80052a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005296:	bf00      	nop
 8005298:	e002      	b.n	80052a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800529e:	bf00      	nop
    }

    if(status == HAL_OK)
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d108      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80052a6:	4b4c      	ldr	r3, [pc, #304]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f023 0203 	bic.w	r2, r3, #3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4949      	ldr	r1, [pc, #292]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 8086 	bne.w	80053cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052c0:	4b45      	ldr	r3, [pc, #276]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a44      	ldr	r2, [pc, #272]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052cc:	f7fc fc60 	bl	8001b90 <HAL_GetTick>
 80052d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052d2:	e009      	b.n	80052e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052d4:	f7fc fc5c 	bl	8001b90 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d902      	bls.n	80052e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	73fb      	strb	r3, [r7, #15]
        break;
 80052e6:	e005      	b.n	80052f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052e8:	4b3b      	ldr	r3, [pc, #236]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1ef      	bne.n	80052d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d168      	bne.n	80053cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d113      	bne.n	8005328 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005300:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	4b35      	ldr	r3, [pc, #212]	; (80053dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8005306:	4013      	ands	r3, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6892      	ldr	r2, [r2, #8]
 800530c:	0211      	lsls	r1, r2, #8
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68d2      	ldr	r2, [r2, #12]
 8005312:	06d2      	lsls	r2, r2, #27
 8005314:	4311      	orrs	r1, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6852      	ldr	r2, [r2, #4]
 800531a:	3a01      	subs	r2, #1
 800531c:	0112      	lsls	r2, r2, #4
 800531e:	430a      	orrs	r2, r1
 8005320:	492d      	ldr	r1, [pc, #180]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005322:	4313      	orrs	r3, r2
 8005324:	614b      	str	r3, [r1, #20]
 8005326:	e02d      	b.n	8005384 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d115      	bne.n	800535a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800532e:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6892      	ldr	r2, [r2, #8]
 800533a:	0211      	lsls	r1, r2, #8
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6912      	ldr	r2, [r2, #16]
 8005340:	0852      	lsrs	r2, r2, #1
 8005342:	3a01      	subs	r2, #1
 8005344:	0552      	lsls	r2, r2, #21
 8005346:	4311      	orrs	r1, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6852      	ldr	r2, [r2, #4]
 800534c:	3a01      	subs	r2, #1
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	430a      	orrs	r2, r1
 8005352:	4921      	ldr	r1, [pc, #132]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005354:	4313      	orrs	r3, r2
 8005356:	614b      	str	r3, [r1, #20]
 8005358:	e014      	b.n	8005384 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800535a:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005360:	4013      	ands	r3, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6892      	ldr	r2, [r2, #8]
 8005366:	0211      	lsls	r1, r2, #8
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6952      	ldr	r2, [r2, #20]
 800536c:	0852      	lsrs	r2, r2, #1
 800536e:	3a01      	subs	r2, #1
 8005370:	0652      	lsls	r2, r2, #25
 8005372:	4311      	orrs	r1, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6852      	ldr	r2, [r2, #4]
 8005378:	3a01      	subs	r2, #1
 800537a:	0112      	lsls	r2, r2, #4
 800537c:	430a      	orrs	r2, r1
 800537e:	4916      	ldr	r1, [pc, #88]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005380:	4313      	orrs	r3, r2
 8005382:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800538a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005390:	f7fc fbfe 	bl	8001b90 <HAL_GetTick>
 8005394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005396:	e009      	b.n	80053ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005398:	f7fc fbfa 	bl	8001b90 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d902      	bls.n	80053ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	73fb      	strb	r3, [r7, #15]
          break;
 80053aa:	e005      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0ef      	beq.n	8005398 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	4904      	ldr	r1, [pc, #16]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	07ff800f 	.word	0x07ff800f
 80053e0:	ff9f800f 	.word	0xff9f800f
 80053e4:	f9ff800f 	.word	0xf9ff800f

080053e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e049      	b.n	800548e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc f9f8 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fade 	bl	80059e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d001      	beq.n	80054b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e047      	b.n	8005540 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <HAL_TIM_Base_Start+0xb4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01d      	beq.n	80054fe <HAL_TIM_Base_Start+0x66>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d018      	beq.n	80054fe <HAL_TIM_Base_Start+0x66>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_TIM_Base_Start+0xb8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <HAL_TIM_Base_Start+0x66>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <HAL_TIM_Base_Start+0xbc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00e      	beq.n	80054fe <HAL_TIM_Base_Start+0x66>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_TIM_Base_Start+0xc0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d009      	beq.n	80054fe <HAL_TIM_Base_Start+0x66>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_TIM_Base_Start+0xc4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d004      	beq.n	80054fe <HAL_TIM_Base_Start+0x66>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_TIM_Base_Start+0xc8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d115      	bne.n	800552a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b17      	ldr	r3, [pc, #92]	; (8005564 <HAL_TIM_Base_Start+0xcc>)
 8005506:	4013      	ands	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b06      	cmp	r3, #6
 800550e:	d015      	beq.n	800553c <HAL_TIM_Base_Start+0xa4>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005516:	d011      	beq.n	800553c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005528:	e008      	b.n	800553c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e000      	b.n	800553e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40013400 	.word	0x40013400
 8005560:	40014000 	.word	0x40014000
 8005564:	00010007 	.word	0x00010007

08005568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e049      	b.n	800560e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f841 	bl	8005616 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 fa1e 	bl	80059e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005646:	2302      	movs	r3, #2
 8005648:	e0ff      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b14      	cmp	r3, #20
 8005656:	f200 80f0 	bhi.w	800583a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	080056b5 	.word	0x080056b5
 8005664:	0800583b 	.word	0x0800583b
 8005668:	0800583b 	.word	0x0800583b
 800566c:	0800583b 	.word	0x0800583b
 8005670:	080056f5 	.word	0x080056f5
 8005674:	0800583b 	.word	0x0800583b
 8005678:	0800583b 	.word	0x0800583b
 800567c:	0800583b 	.word	0x0800583b
 8005680:	08005737 	.word	0x08005737
 8005684:	0800583b 	.word	0x0800583b
 8005688:	0800583b 	.word	0x0800583b
 800568c:	0800583b 	.word	0x0800583b
 8005690:	08005777 	.word	0x08005777
 8005694:	0800583b 	.word	0x0800583b
 8005698:	0800583b 	.word	0x0800583b
 800569c:	0800583b 	.word	0x0800583b
 80056a0:	080057b9 	.word	0x080057b9
 80056a4:	0800583b 	.word	0x0800583b
 80056a8:	0800583b 	.word	0x0800583b
 80056ac:	0800583b 	.word	0x0800583b
 80056b0:	080057f9 	.word	0x080057f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fa2e 	bl	8005b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0208 	orr.w	r2, r2, #8
 80056ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0204 	bic.w	r2, r2, #4
 80056de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6999      	ldr	r1, [r3, #24]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	619a      	str	r2, [r3, #24]
      break;
 80056f2:	e0a5      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fa9e 	bl	8005c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800570e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6999      	ldr	r1, [r3, #24]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	619a      	str	r2, [r3, #24]
      break;
 8005734:	e084      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fb07 	bl	8005d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0208 	orr.w	r2, r2, #8
 8005750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0204 	bic.w	r2, r2, #4
 8005760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69d9      	ldr	r1, [r3, #28]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	61da      	str	r2, [r3, #28]
      break;
 8005774:	e064      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fb6f 	bl	8005e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69d9      	ldr	r1, [r3, #28]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	021a      	lsls	r2, r3, #8
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	61da      	str	r2, [r3, #28]
      break;
 80057b6:	e043      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fbb8 	bl	8005f34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0208 	orr.w	r2, r2, #8
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057f6:	e023      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fbfc 	bl	8005ffc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005838:	e002      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
      break;
 800583e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop

08005854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_TIM_ConfigClockSource+0x1c>
 800586c:	2302      	movs	r3, #2
 800586e:	e0b6      	b.n	80059de <HAL_TIM_ConfigClockSource+0x18a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ac:	d03e      	beq.n	800592c <HAL_TIM_ConfigClockSource+0xd8>
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b2:	f200 8087 	bhi.w	80059c4 <HAL_TIM_ConfigClockSource+0x170>
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ba:	f000 8086 	beq.w	80059ca <HAL_TIM_ConfigClockSource+0x176>
 80058be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c2:	d87f      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x170>
 80058c4:	2b70      	cmp	r3, #112	; 0x70
 80058c6:	d01a      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0xaa>
 80058c8:	2b70      	cmp	r3, #112	; 0x70
 80058ca:	d87b      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x170>
 80058cc:	2b60      	cmp	r3, #96	; 0x60
 80058ce:	d050      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x11e>
 80058d0:	2b60      	cmp	r3, #96	; 0x60
 80058d2:	d877      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x170>
 80058d4:	2b50      	cmp	r3, #80	; 0x50
 80058d6:	d03c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0xfe>
 80058d8:	2b50      	cmp	r3, #80	; 0x50
 80058da:	d873      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x170>
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d058      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x13e>
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d86f      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x170>
 80058e4:	2b30      	cmp	r3, #48	; 0x30
 80058e6:	d064      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x15e>
 80058e8:	2b30      	cmp	r3, #48	; 0x30
 80058ea:	d86b      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x170>
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d060      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x15e>
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d867      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x170>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d05c      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x15e>
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d05a      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x15e>
 80058fc:	e062      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6899      	ldr	r1, [r3, #8]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f000 fc55 	bl	80061bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	609a      	str	r2, [r3, #8]
      break;
 800592a:	e04f      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6899      	ldr	r1, [r3, #8]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f000 fc3e 	bl	80061bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800594e:	609a      	str	r2, [r3, #8]
      break;
 8005950:	e03c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	461a      	mov	r2, r3
 8005960:	f000 fbb2 	bl	80060c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2150      	movs	r1, #80	; 0x50
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fc0b 	bl	8006186 <TIM_ITRx_SetConfig>
      break;
 8005970:	e02c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6859      	ldr	r1, [r3, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	461a      	mov	r2, r3
 8005980:	f000 fbd1 	bl	8006126 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2160      	movs	r1, #96	; 0x60
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fbfb 	bl	8006186 <TIM_ITRx_SetConfig>
      break;
 8005990:	e01c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6859      	ldr	r1, [r3, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	461a      	mov	r2, r3
 80059a0:	f000 fb92 	bl	80060c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2140      	movs	r1, #64	; 0x40
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fbeb 	bl	8006186 <TIM_ITRx_SetConfig>
      break;
 80059b0:	e00c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4619      	mov	r1, r3
 80059bc:	4610      	mov	r0, r2
 80059be:	f000 fbe2 	bl	8006186 <TIM_ITRx_SetConfig>
      break;
 80059c2:	e003      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	e000      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a40      	ldr	r2, [pc, #256]	; (8005afc <TIM_Base_SetConfig+0x114>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d013      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a06:	d00f      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3d      	ldr	r2, [pc, #244]	; (8005b00 <TIM_Base_SetConfig+0x118>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3c      	ldr	r2, [pc, #240]	; (8005b04 <TIM_Base_SetConfig+0x11c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3b      	ldr	r2, [pc, #236]	; (8005b08 <TIM_Base_SetConfig+0x120>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3a      	ldr	r2, [pc, #232]	; (8005b0c <TIM_Base_SetConfig+0x124>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2f      	ldr	r2, [pc, #188]	; (8005afc <TIM_Base_SetConfig+0x114>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01f      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a48:	d01b      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2c      	ldr	r2, [pc, #176]	; (8005b00 <TIM_Base_SetConfig+0x118>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d017      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2b      	ldr	r2, [pc, #172]	; (8005b04 <TIM_Base_SetConfig+0x11c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2a      	ldr	r2, [pc, #168]	; (8005b08 <TIM_Base_SetConfig+0x120>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a29      	ldr	r2, [pc, #164]	; (8005b0c <TIM_Base_SetConfig+0x124>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a28      	ldr	r2, [pc, #160]	; (8005b10 <TIM_Base_SetConfig+0x128>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <TIM_Base_SetConfig+0x12c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0x9a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a26      	ldr	r2, [pc, #152]	; (8005b18 <TIM_Base_SetConfig+0x130>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <TIM_Base_SetConfig+0x114>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00f      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a12      	ldr	r2, [pc, #72]	; (8005b0c <TIM_Base_SetConfig+0x124>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <TIM_Base_SetConfig+0x128>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a10      	ldr	r2, [pc, #64]	; (8005b14 <TIM_Base_SetConfig+0x12c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0f      	ldr	r2, [pc, #60]	; (8005b18 <TIM_Base_SetConfig+0x130>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	615a      	str	r2, [r3, #20]
}
 8005aee:	bf00      	nop
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40000400 	.word	0x40000400
 8005b04:	40000800 	.word	0x40000800
 8005b08:	40000c00 	.word	0x40000c00
 8005b0c:	40013400 	.word	0x40013400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800

08005b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f023 0302 	bic.w	r3, r3, #2
 8005b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a2c      	ldr	r2, [pc, #176]	; (8005c28 <TIM_OC1_SetConfig+0x10c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00f      	beq.n	8005b9c <TIM_OC1_SetConfig+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a2b      	ldr	r2, [pc, #172]	; (8005c2c <TIM_OC1_SetConfig+0x110>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <TIM_OC1_SetConfig+0x80>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <TIM_OC1_SetConfig+0x114>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_OC1_SetConfig+0x80>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a29      	ldr	r2, [pc, #164]	; (8005c34 <TIM_OC1_SetConfig+0x118>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_OC1_SetConfig+0x80>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a28      	ldr	r2, [pc, #160]	; (8005c38 <TIM_OC1_SetConfig+0x11c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10c      	bne.n	8005bb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0308 	bic.w	r3, r3, #8
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f023 0304 	bic.w	r3, r3, #4
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <TIM_OC1_SetConfig+0x10c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00f      	beq.n	8005bde <TIM_OC1_SetConfig+0xc2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <TIM_OC1_SetConfig+0x110>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <TIM_OC1_SetConfig+0xc2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a19      	ldr	r2, [pc, #100]	; (8005c30 <TIM_OC1_SetConfig+0x114>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <TIM_OC1_SetConfig+0xc2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	; (8005c34 <TIM_OC1_SetConfig+0x118>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC1_SetConfig+0xc2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <TIM_OC1_SetConfig+0x11c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d111      	bne.n	8005c02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	621a      	str	r2, [r3, #32]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40013400 	.word	0x40013400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800

08005c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f023 0210 	bic.w	r2, r3, #16
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0320 	bic.w	r3, r3, #32
 8005c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <TIM_OC2_SetConfig+0x100>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_OC2_SetConfig+0x6c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <TIM_OC2_SetConfig+0x104>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d10d      	bne.n	8005cc4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <TIM_OC2_SetConfig+0x100>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00f      	beq.n	8005cec <TIM_OC2_SetConfig+0xb0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <TIM_OC2_SetConfig+0x104>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <TIM_OC2_SetConfig+0xb0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <TIM_OC2_SetConfig+0x108>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_OC2_SetConfig+0xb0>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <TIM_OC2_SetConfig+0x10c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC2_SetConfig+0xb0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <TIM_OC2_SetConfig+0x110>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d113      	bne.n	8005d14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800

08005d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a27      	ldr	r2, [pc, #156]	; (8005e4c <TIM_OC3_SetConfig+0xfc>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_OC3_SetConfig+0x6a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a26      	ldr	r2, [pc, #152]	; (8005e50 <TIM_OC3_SetConfig+0x100>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10d      	bne.n	8005dd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1c      	ldr	r2, [pc, #112]	; (8005e4c <TIM_OC3_SetConfig+0xfc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00f      	beq.n	8005dfe <TIM_OC3_SetConfig+0xae>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <TIM_OC3_SetConfig+0x100>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00b      	beq.n	8005dfe <TIM_OC3_SetConfig+0xae>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <TIM_OC3_SetConfig+0x104>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d007      	beq.n	8005dfe <TIM_OC3_SetConfig+0xae>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <TIM_OC3_SetConfig+0x108>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_OC3_SetConfig+0xae>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <TIM_OC3_SetConfig+0x10c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d113      	bne.n	8005e26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	621a      	str	r2, [r3, #32]
}
 8005e40:	bf00      	nop
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	40012c00 	.word	0x40012c00
 8005e50:	40013400 	.word	0x40013400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800

08005e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	031b      	lsls	r3, r3, #12
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <TIM_OC4_SetConfig+0xc0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_OC4_SetConfig+0x84>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <TIM_OC4_SetConfig+0xc4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_OC4_SetConfig+0x84>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <TIM_OC4_SetConfig+0xc8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_OC4_SetConfig+0x84>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <TIM_OC4_SetConfig+0xcc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC4_SetConfig+0x84>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <TIM_OC4_SetConfig+0xd0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d109      	bne.n	8005ef8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	019b      	lsls	r3, r3, #6
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40013400 	.word	0x40013400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a17      	ldr	r2, [pc, #92]	; (8005fe8 <TIM_OC5_SetConfig+0xb4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00f      	beq.n	8005fae <TIM_OC5_SetConfig+0x7a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a16      	ldr	r2, [pc, #88]	; (8005fec <TIM_OC5_SetConfig+0xb8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00b      	beq.n	8005fae <TIM_OC5_SetConfig+0x7a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <TIM_OC5_SetConfig+0xbc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <TIM_OC5_SetConfig+0x7a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a14      	ldr	r2, [pc, #80]	; (8005ff4 <TIM_OC5_SetConfig+0xc0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <TIM_OC5_SetConfig+0x7a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <TIM_OC5_SetConfig+0xc4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d109      	bne.n	8005fc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	621a      	str	r2, [r3, #32]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40013400 	.word	0x40013400
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40014400 	.word	0x40014400
 8005ff8:	40014800 	.word	0x40014800

08005ffc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800602a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	051b      	lsls	r3, r3, #20
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <TIM_OC6_SetConfig+0xb8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00f      	beq.n	8006078 <TIM_OC6_SetConfig+0x7c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a17      	ldr	r2, [pc, #92]	; (80060b8 <TIM_OC6_SetConfig+0xbc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00b      	beq.n	8006078 <TIM_OC6_SetConfig+0x7c>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a16      	ldr	r2, [pc, #88]	; (80060bc <TIM_OC6_SetConfig+0xc0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d007      	beq.n	8006078 <TIM_OC6_SetConfig+0x7c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a15      	ldr	r2, [pc, #84]	; (80060c0 <TIM_OC6_SetConfig+0xc4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC6_SetConfig+0x7c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a14      	ldr	r2, [pc, #80]	; (80060c4 <TIM_OC6_SetConfig+0xc8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d109      	bne.n	800608c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800607e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40013400 	.word	0x40013400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800

080060c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f023 0201 	bic.w	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 030a 	bic.w	r3, r3, #10
 8006104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006126:	b480      	push	{r7}
 8006128:	b087      	sub	sp, #28
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f023 0210 	bic.w	r2, r3, #16
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f043 0307 	orr.w	r3, r3, #7
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	021a      	lsls	r2, r3, #8
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	431a      	orrs	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	609a      	str	r2, [r3, #8]
}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006210:	2302      	movs	r3, #2
 8006212:	e068      	b.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2e      	ldr	r2, [pc, #184]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2d      	ldr	r2, [pc, #180]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d108      	bne.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800624e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01d      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006286:	d018      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1b      	ldr	r2, [pc, #108]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1a      	ldr	r2, [pc, #104]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a18      	ldr	r2, [pc, #96]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d009      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a13      	ldr	r2, [pc, #76]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a14      	ldr	r2, [pc, #80]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10c      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40013400 	.word	0x40013400
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800
 8006304:	40000c00 	.word	0x40000c00
 8006308:	40014000 	.word	0x40014000

0800630c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e042      	b.n	80063a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fb fa07 	bl	8001744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f8c4 	bl	80064dc <UART_SetConfig>
 8006354:	4603      	mov	r3, r0
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e022      	b.n	80063a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fbb4 	bl	8006ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800637a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800638a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fc3b 	bl	8006c18 <UART_CheckIdleState>
 80063a2:	4603      	mov	r3, r0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	; 0x28
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	f040 8084 	bne.w	80064d0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Transmit+0x28>
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e07c      	b.n	80064d2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Transmit+0x3a>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e075      	b.n	80064d2 <HAL_UART_Transmit+0x126>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2221      	movs	r2, #33	; 0x21
 80063fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063fe:	f7fb fbc7 	bl	8001b90 <HAL_GetTick>
 8006402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641c:	d108      	bne.n	8006430 <HAL_UART_Transmit+0x84>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	e003      	b.n	8006438 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006434:	2300      	movs	r3, #0
 8006436:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006440:	e02d      	b.n	800649e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2200      	movs	r2, #0
 800644a:	2180      	movs	r1, #128	; 0x80
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 fc2e 	bl	8006cae <UART_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e03a      	b.n	80064d2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	881a      	ldrh	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800646e:	b292      	uxth	r2, r2
 8006470:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	3302      	adds	r3, #2
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	e008      	b.n	800648c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	781a      	ldrb	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	b292      	uxth	r2, r2
 8006484:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	3301      	adds	r3, #1
 800648a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1cb      	bne.n	8006442 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	2140      	movs	r1, #64	; 0x40
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fbfa 	bl	8006cae <UART_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e006      	b.n	80064d2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e000      	b.n	80064d2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80064d0:	2302      	movs	r3, #2
  }
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e0:	b08c      	sub	sp, #48	; 0x30
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	431a      	orrs	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	4313      	orrs	r3, r2
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4baa      	ldr	r3, [pc, #680]	; (80067b4 <UART_SetConfig+0x2d8>)
 800650c:	4013      	ands	r3, r2
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	6812      	ldr	r2, [r2, #0]
 8006512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006514:	430b      	orrs	r3, r1
 8006516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a9f      	ldr	r2, [pc, #636]	; (80067b8 <UART_SetConfig+0x2dc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006544:	4313      	orrs	r3, r2
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006552:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800655c:	430b      	orrs	r3, r1
 800655e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	f023 010f 	bic.w	r1, r3, #15
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a90      	ldr	r2, [pc, #576]	; (80067bc <UART_SetConfig+0x2e0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d125      	bne.n	80065cc <UART_SetConfig+0xf0>
 8006580:	4b8f      	ldr	r3, [pc, #572]	; (80067c0 <UART_SetConfig+0x2e4>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d81a      	bhi.n	80065c4 <UART_SetConfig+0xe8>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0xb8>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065b5 	.word	0x080065b5
 800659c:	080065ad 	.word	0x080065ad
 80065a0:	080065bd 	.word	0x080065bd
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065aa:	e116      	b.n	80067da <UART_SetConfig+0x2fe>
 80065ac:	2302      	movs	r3, #2
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b2:	e112      	b.n	80067da <UART_SetConfig+0x2fe>
 80065b4:	2304      	movs	r3, #4
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ba:	e10e      	b.n	80067da <UART_SetConfig+0x2fe>
 80065bc:	2308      	movs	r3, #8
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e10a      	b.n	80067da <UART_SetConfig+0x2fe>
 80065c4:	2310      	movs	r3, #16
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e106      	b.n	80067da <UART_SetConfig+0x2fe>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a7c      	ldr	r2, [pc, #496]	; (80067c4 <UART_SetConfig+0x2e8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d138      	bne.n	8006648 <UART_SetConfig+0x16c>
 80065d6:	4b7a      	ldr	r3, [pc, #488]	; (80067c0 <UART_SetConfig+0x2e4>)
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065dc:	f003 030c 	and.w	r3, r3, #12
 80065e0:	2b0c      	cmp	r3, #12
 80065e2:	d82d      	bhi.n	8006640 <UART_SetConfig+0x164>
 80065e4:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <UART_SetConfig+0x110>)
 80065e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ea:	bf00      	nop
 80065ec:	08006621 	.word	0x08006621
 80065f0:	08006641 	.word	0x08006641
 80065f4:	08006641 	.word	0x08006641
 80065f8:	08006641 	.word	0x08006641
 80065fc:	08006631 	.word	0x08006631
 8006600:	08006641 	.word	0x08006641
 8006604:	08006641 	.word	0x08006641
 8006608:	08006641 	.word	0x08006641
 800660c:	08006629 	.word	0x08006629
 8006610:	08006641 	.word	0x08006641
 8006614:	08006641 	.word	0x08006641
 8006618:	08006641 	.word	0x08006641
 800661c:	08006639 	.word	0x08006639
 8006620:	2300      	movs	r3, #0
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006626:	e0d8      	b.n	80067da <UART_SetConfig+0x2fe>
 8006628:	2302      	movs	r3, #2
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662e:	e0d4      	b.n	80067da <UART_SetConfig+0x2fe>
 8006630:	2304      	movs	r3, #4
 8006632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006636:	e0d0      	b.n	80067da <UART_SetConfig+0x2fe>
 8006638:	2308      	movs	r3, #8
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663e:	e0cc      	b.n	80067da <UART_SetConfig+0x2fe>
 8006640:	2310      	movs	r3, #16
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006646:	e0c8      	b.n	80067da <UART_SetConfig+0x2fe>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a5e      	ldr	r2, [pc, #376]	; (80067c8 <UART_SetConfig+0x2ec>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d125      	bne.n	800669e <UART_SetConfig+0x1c2>
 8006652:	4b5b      	ldr	r3, [pc, #364]	; (80067c0 <UART_SetConfig+0x2e4>)
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006658:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800665c:	2b30      	cmp	r3, #48	; 0x30
 800665e:	d016      	beq.n	800668e <UART_SetConfig+0x1b2>
 8006660:	2b30      	cmp	r3, #48	; 0x30
 8006662:	d818      	bhi.n	8006696 <UART_SetConfig+0x1ba>
 8006664:	2b20      	cmp	r3, #32
 8006666:	d00a      	beq.n	800667e <UART_SetConfig+0x1a2>
 8006668:	2b20      	cmp	r3, #32
 800666a:	d814      	bhi.n	8006696 <UART_SetConfig+0x1ba>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <UART_SetConfig+0x19a>
 8006670:	2b10      	cmp	r3, #16
 8006672:	d008      	beq.n	8006686 <UART_SetConfig+0x1aa>
 8006674:	e00f      	b.n	8006696 <UART_SetConfig+0x1ba>
 8006676:	2300      	movs	r3, #0
 8006678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667c:	e0ad      	b.n	80067da <UART_SetConfig+0x2fe>
 800667e:	2302      	movs	r3, #2
 8006680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006684:	e0a9      	b.n	80067da <UART_SetConfig+0x2fe>
 8006686:	2304      	movs	r3, #4
 8006688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668c:	e0a5      	b.n	80067da <UART_SetConfig+0x2fe>
 800668e:	2308      	movs	r3, #8
 8006690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006694:	e0a1      	b.n	80067da <UART_SetConfig+0x2fe>
 8006696:	2310      	movs	r3, #16
 8006698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669c:	e09d      	b.n	80067da <UART_SetConfig+0x2fe>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a4a      	ldr	r2, [pc, #296]	; (80067cc <UART_SetConfig+0x2f0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d125      	bne.n	80066f4 <UART_SetConfig+0x218>
 80066a8:	4b45      	ldr	r3, [pc, #276]	; (80067c0 <UART_SetConfig+0x2e4>)
 80066aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066b2:	2bc0      	cmp	r3, #192	; 0xc0
 80066b4:	d016      	beq.n	80066e4 <UART_SetConfig+0x208>
 80066b6:	2bc0      	cmp	r3, #192	; 0xc0
 80066b8:	d818      	bhi.n	80066ec <UART_SetConfig+0x210>
 80066ba:	2b80      	cmp	r3, #128	; 0x80
 80066bc:	d00a      	beq.n	80066d4 <UART_SetConfig+0x1f8>
 80066be:	2b80      	cmp	r3, #128	; 0x80
 80066c0:	d814      	bhi.n	80066ec <UART_SetConfig+0x210>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <UART_SetConfig+0x1f0>
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d008      	beq.n	80066dc <UART_SetConfig+0x200>
 80066ca:	e00f      	b.n	80066ec <UART_SetConfig+0x210>
 80066cc:	2300      	movs	r3, #0
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d2:	e082      	b.n	80067da <UART_SetConfig+0x2fe>
 80066d4:	2302      	movs	r3, #2
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066da:	e07e      	b.n	80067da <UART_SetConfig+0x2fe>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e2:	e07a      	b.n	80067da <UART_SetConfig+0x2fe>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ea:	e076      	b.n	80067da <UART_SetConfig+0x2fe>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f2:	e072      	b.n	80067da <UART_SetConfig+0x2fe>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a35      	ldr	r2, [pc, #212]	; (80067d0 <UART_SetConfig+0x2f4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d12a      	bne.n	8006754 <UART_SetConfig+0x278>
 80066fe:	4b30      	ldr	r3, [pc, #192]	; (80067c0 <UART_SetConfig+0x2e4>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670c:	d01a      	beq.n	8006744 <UART_SetConfig+0x268>
 800670e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006712:	d81b      	bhi.n	800674c <UART_SetConfig+0x270>
 8006714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006718:	d00c      	beq.n	8006734 <UART_SetConfig+0x258>
 800671a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671e:	d815      	bhi.n	800674c <UART_SetConfig+0x270>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <UART_SetConfig+0x250>
 8006724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006728:	d008      	beq.n	800673c <UART_SetConfig+0x260>
 800672a:	e00f      	b.n	800674c <UART_SetConfig+0x270>
 800672c:	2300      	movs	r3, #0
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006732:	e052      	b.n	80067da <UART_SetConfig+0x2fe>
 8006734:	2302      	movs	r3, #2
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673a:	e04e      	b.n	80067da <UART_SetConfig+0x2fe>
 800673c:	2304      	movs	r3, #4
 800673e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006742:	e04a      	b.n	80067da <UART_SetConfig+0x2fe>
 8006744:	2308      	movs	r3, #8
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674a:	e046      	b.n	80067da <UART_SetConfig+0x2fe>
 800674c:	2310      	movs	r3, #16
 800674e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006752:	e042      	b.n	80067da <UART_SetConfig+0x2fe>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <UART_SetConfig+0x2dc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d13a      	bne.n	80067d4 <UART_SetConfig+0x2f8>
 800675e:	4b18      	ldr	r3, [pc, #96]	; (80067c0 <UART_SetConfig+0x2e4>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800676c:	d01a      	beq.n	80067a4 <UART_SetConfig+0x2c8>
 800676e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006772:	d81b      	bhi.n	80067ac <UART_SetConfig+0x2d0>
 8006774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006778:	d00c      	beq.n	8006794 <UART_SetConfig+0x2b8>
 800677a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800677e:	d815      	bhi.n	80067ac <UART_SetConfig+0x2d0>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <UART_SetConfig+0x2b0>
 8006784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006788:	d008      	beq.n	800679c <UART_SetConfig+0x2c0>
 800678a:	e00f      	b.n	80067ac <UART_SetConfig+0x2d0>
 800678c:	2300      	movs	r3, #0
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006792:	e022      	b.n	80067da <UART_SetConfig+0x2fe>
 8006794:	2302      	movs	r3, #2
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679a:	e01e      	b.n	80067da <UART_SetConfig+0x2fe>
 800679c:	2304      	movs	r3, #4
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a2:	e01a      	b.n	80067da <UART_SetConfig+0x2fe>
 80067a4:	2308      	movs	r3, #8
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067aa:	e016      	b.n	80067da <UART_SetConfig+0x2fe>
 80067ac:	2310      	movs	r3, #16
 80067ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b2:	e012      	b.n	80067da <UART_SetConfig+0x2fe>
 80067b4:	cfff69f3 	.word	0xcfff69f3
 80067b8:	40008000 	.word	0x40008000
 80067bc:	40013800 	.word	0x40013800
 80067c0:	40021000 	.word	0x40021000
 80067c4:	40004400 	.word	0x40004400
 80067c8:	40004800 	.word	0x40004800
 80067cc:	40004c00 	.word	0x40004c00
 80067d0:	40005000 	.word	0x40005000
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4aae      	ldr	r2, [pc, #696]	; (8006a98 <UART_SetConfig+0x5bc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	f040 8097 	bne.w	8006914 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d823      	bhi.n	8006836 <UART_SetConfig+0x35a>
 80067ee:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <UART_SetConfig+0x318>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006837 	.word	0x08006837
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006837 	.word	0x08006837
 8006804:	08006827 	.word	0x08006827
 8006808:	08006837 	.word	0x08006837
 800680c:	08006837 	.word	0x08006837
 8006810:	08006837 	.word	0x08006837
 8006814:	0800682f 	.word	0x0800682f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fd ffe2 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 800681c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800681e:	e010      	b.n	8006842 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006820:	4b9e      	ldr	r3, [pc, #632]	; (8006a9c <UART_SetConfig+0x5c0>)
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006824:	e00d      	b.n	8006842 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006826:	f7fd ff43 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800682a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800682c:	e009      	b.n	8006842 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006834:	e005      	b.n	8006842 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006840:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8130 	beq.w	8006aaa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	4a94      	ldr	r2, [pc, #592]	; (8006aa0 <UART_SetConfig+0x5c4>)
 8006850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006854:	461a      	mov	r2, r3
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	fbb3 f3f2 	udiv	r3, r3, r2
 800685c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4413      	add	r3, r2
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	429a      	cmp	r2, r3
 800686c:	d305      	bcc.n	800687a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	429a      	cmp	r2, r3
 8006878:	d903      	bls.n	8006882 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006880:	e113      	b.n	8006aaa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	2200      	movs	r2, #0
 8006886:	60bb      	str	r3, [r7, #8]
 8006888:	60fa      	str	r2, [r7, #12]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	4a84      	ldr	r2, [pc, #528]	; (8006aa0 <UART_SetConfig+0x5c4>)
 8006890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006894:	b29b      	uxth	r3, r3
 8006896:	2200      	movs	r2, #0
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068a4:	f7fa f998 	bl	8000bd8 <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	020b      	lsls	r3, r1, #8
 80068ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068be:	0202      	lsls	r2, r0, #8
 80068c0:	6979      	ldr	r1, [r7, #20]
 80068c2:	6849      	ldr	r1, [r1, #4]
 80068c4:	0849      	lsrs	r1, r1, #1
 80068c6:	2000      	movs	r0, #0
 80068c8:	460c      	mov	r4, r1
 80068ca:	4605      	mov	r5, r0
 80068cc:	eb12 0804 	adds.w	r8, r2, r4
 80068d0:	eb43 0905 	adc.w	r9, r3, r5
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	469a      	mov	sl, r3
 80068dc:	4693      	mov	fp, r2
 80068de:	4652      	mov	r2, sl
 80068e0:	465b      	mov	r3, fp
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7fa f977 	bl	8000bd8 <__aeabi_uldivmod>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4613      	mov	r3, r2
 80068f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068f8:	d308      	bcc.n	800690c <UART_SetConfig+0x430>
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006900:	d204      	bcs.n	800690c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a3a      	ldr	r2, [r7, #32]
 8006908:	60da      	str	r2, [r3, #12]
 800690a:	e0ce      	b.n	8006aaa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006912:	e0ca      	b.n	8006aaa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800691c:	d166      	bne.n	80069ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800691e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006922:	2b08      	cmp	r3, #8
 8006924:	d827      	bhi.n	8006976 <UART_SetConfig+0x49a>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <UART_SetConfig+0x450>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	08006951 	.word	0x08006951
 8006930:	08006959 	.word	0x08006959
 8006934:	08006961 	.word	0x08006961
 8006938:	08006977 	.word	0x08006977
 800693c:	08006967 	.word	0x08006967
 8006940:	08006977 	.word	0x08006977
 8006944:	08006977 	.word	0x08006977
 8006948:	08006977 	.word	0x08006977
 800694c:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006950:	f7fd ff46 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 8006954:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006956:	e014      	b.n	8006982 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006958:	f7fd ff58 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 800695c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800695e:	e010      	b.n	8006982 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b4e      	ldr	r3, [pc, #312]	; (8006a9c <UART_SetConfig+0x5c0>)
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006964:	e00d      	b.n	8006982 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fd fea3 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800696a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800696c:	e009      	b.n	8006982 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006974:	e005      	b.n	8006982 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8090 	beq.w	8006aaa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	4a44      	ldr	r2, [pc, #272]	; (8006aa0 <UART_SetConfig+0x5c4>)
 8006990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006994:	461a      	mov	r2, r3
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	fbb3 f3f2 	udiv	r3, r3, r2
 800699c:	005a      	lsls	r2, r3, #1
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	441a      	add	r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	2b0f      	cmp	r3, #15
 80069b4:	d916      	bls.n	80069e4 <UART_SetConfig+0x508>
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069bc:	d212      	bcs.n	80069e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f023 030f 	bic.w	r3, r3, #15
 80069c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	8bfb      	ldrh	r3, [r7, #30]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	8bfa      	ldrh	r2, [r7, #30]
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	e062      	b.n	8006aaa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069ea:	e05e      	b.n	8006aaa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d828      	bhi.n	8006a46 <UART_SetConfig+0x56a>
 80069f4:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <UART_SetConfig+0x520>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a21 	.word	0x08006a21
 8006a00:	08006a29 	.word	0x08006a29
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006a47 	.word	0x08006a47
 8006a0c:	08006a37 	.word	0x08006a37
 8006a10:	08006a47 	.word	0x08006a47
 8006a14:	08006a47 	.word	0x08006a47
 8006a18:	08006a47 	.word	0x08006a47
 8006a1c:	08006a3f 	.word	0x08006a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7fd fede 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 8006a24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a26:	e014      	b.n	8006a52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a28:	f7fd fef0 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8006a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a2e:	e010      	b.n	8006a52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <UART_SetConfig+0x5c0>)
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a34:	e00d      	b.n	8006a52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a36:	f7fd fe3b 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8006a3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a3c:	e009      	b.n	8006a52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a44:	e005      	b.n	8006a52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a50:	bf00      	nop
    }

    if (pclk != 0U)
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d028      	beq.n	8006aaa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	4a10      	ldr	r2, [pc, #64]	; (8006aa0 <UART_SetConfig+0x5c4>)
 8006a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	441a      	add	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d910      	bls.n	8006aa4 <UART_SetConfig+0x5c8>
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a88:	d20c      	bcs.n	8006aa4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60da      	str	r2, [r3, #12]
 8006a94:	e009      	b.n	8006aaa <UART_SetConfig+0x5ce>
 8006a96:	bf00      	nop
 8006a98:	40008000 	.word	0x40008000
 8006a9c:	00f42400 	.word	0x00f42400
 8006aa0:	08009f24 	.word	0x08009f24
      }
      else
      {
        ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2200      	movs	r2, #0
 8006abe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ac6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3730      	adds	r7, #48	; 0x30
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01a      	beq.n	8006bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd2:	d10a      	bne.n	8006bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c28:	f7fa ffb2 	bl	8001b90 <HAL_GetTick>
 8006c2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d10e      	bne.n	8006c5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f82f 	bl	8006cae <UART_WaitOnFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e025      	b.n	8006ca6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d10e      	bne.n	8006c86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f819 	bl	8006cae <UART_WaitOnFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e00f      	b.n	8006ca6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b09c      	sub	sp, #112	; 0x70
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbe:	e0a9      	b.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	f000 80a5 	beq.w	8006e14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cca:	f7fa ff61 	bl	8001b90 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d302      	bcc.n	8006ce0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d140      	bne.n	8006d62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cf4:	667b      	str	r3, [r7, #100]	; 0x64
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e6      	bne.n	8006ce0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	663b      	str	r3, [r7, #96]	; 0x60
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3308      	adds	r3, #8
 8006d30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d32:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e5      	bne.n	8006d12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e069      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d051      	beq.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7e:	d149      	bne.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
 8006daa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e6      	bne.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ddc:	623a      	str	r2, [r7, #32]
 8006dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	69f9      	ldr	r1, [r7, #28]
 8006de2:	6a3a      	ldr	r2, [r7, #32]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e010      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	f43f af46 	beq.w	8006cc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3770      	adds	r7, #112	; 0x70
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e027      	b.n	8006ea4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2224      	movs	r2, #36	; 0x24
 8006e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0201 	bic.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e02d      	b.n	8006f24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2224      	movs	r2, #36	; 0x24
 8006ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0201 	bic.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f84f 	bl	8006fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e02d      	b.n	8006fa0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2224      	movs	r2, #36	; 0x24
 8006f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f811 	bl	8006fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d108      	bne.n	8006fca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fc8:	e031      	b.n	800702e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fca:	2308      	movs	r3, #8
 8006fcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fce:	2308      	movs	r3, #8
 8006fd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	0e5b      	lsrs	r3, r3, #25
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	0f5b      	lsrs	r3, r3, #29
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	7b3a      	ldrb	r2, [r7, #12]
 8006ff6:	4911      	ldr	r1, [pc, #68]	; (800703c <UARTEx_SetNbDataToProcess+0x94>)
 8006ff8:	5c8a      	ldrb	r2, [r1, r2]
 8006ffa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ffe:	7b3a      	ldrb	r2, [r7, #12]
 8007000:	490f      	ldr	r1, [pc, #60]	; (8007040 <UARTEx_SetNbDataToProcess+0x98>)
 8007002:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007004:	fb93 f3f2 	sdiv	r3, r3, r2
 8007008:	b29a      	uxth	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	7b7a      	ldrb	r2, [r7, #13]
 8007014:	4909      	ldr	r1, [pc, #36]	; (800703c <UARTEx_SetNbDataToProcess+0x94>)
 8007016:	5c8a      	ldrb	r2, [r1, r2]
 8007018:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800701c:	7b7a      	ldrb	r2, [r7, #13]
 800701e:	4908      	ldr	r1, [pc, #32]	; (8007040 <UARTEx_SetNbDataToProcess+0x98>)
 8007020:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007022:	fb93 f3f2 	sdiv	r3, r3, r2
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	08009f3c 	.word	0x08009f3c
 8007040:	08009f44 	.word	0x08009f44

08007044 <__errno>:
 8007044:	4b01      	ldr	r3, [pc, #4]	; (800704c <__errno+0x8>)
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	2000000c 	.word	0x2000000c

08007050 <__libc_init_array>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	4d0d      	ldr	r5, [pc, #52]	; (8007088 <__libc_init_array+0x38>)
 8007054:	4c0d      	ldr	r4, [pc, #52]	; (800708c <__libc_init_array+0x3c>)
 8007056:	1b64      	subs	r4, r4, r5
 8007058:	10a4      	asrs	r4, r4, #2
 800705a:	2600      	movs	r6, #0
 800705c:	42a6      	cmp	r6, r4
 800705e:	d109      	bne.n	8007074 <__libc_init_array+0x24>
 8007060:	4d0b      	ldr	r5, [pc, #44]	; (8007090 <__libc_init_array+0x40>)
 8007062:	4c0c      	ldr	r4, [pc, #48]	; (8007094 <__libc_init_array+0x44>)
 8007064:	f002 ff04 	bl	8009e70 <_init>
 8007068:	1b64      	subs	r4, r4, r5
 800706a:	10a4      	asrs	r4, r4, #2
 800706c:	2600      	movs	r6, #0
 800706e:	42a6      	cmp	r6, r4
 8007070:	d105      	bne.n	800707e <__libc_init_array+0x2e>
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	f855 3b04 	ldr.w	r3, [r5], #4
 8007078:	4798      	blx	r3
 800707a:	3601      	adds	r6, #1
 800707c:	e7ee      	b.n	800705c <__libc_init_array+0xc>
 800707e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007082:	4798      	blx	r3
 8007084:	3601      	adds	r6, #1
 8007086:	e7f2      	b.n	800706e <__libc_init_array+0x1e>
 8007088:	0800a32c 	.word	0x0800a32c
 800708c:	0800a32c 	.word	0x0800a32c
 8007090:	0800a32c 	.word	0x0800a32c
 8007094:	0800a330 	.word	0x0800a330

08007098 <memset>:
 8007098:	4402      	add	r2, r0
 800709a:	4603      	mov	r3, r0
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <memset+0xa>
 80070a0:	4770      	bx	lr
 80070a2:	f803 1b01 	strb.w	r1, [r3], #1
 80070a6:	e7f9      	b.n	800709c <memset+0x4>

080070a8 <__cvt>:
 80070a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	ec55 4b10 	vmov	r4, r5, d0
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	460e      	mov	r6, r1
 80070b4:	4619      	mov	r1, r3
 80070b6:	462b      	mov	r3, r5
 80070b8:	bfbb      	ittet	lt
 80070ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070be:	461d      	movlt	r5, r3
 80070c0:	2300      	movge	r3, #0
 80070c2:	232d      	movlt	r3, #45	; 0x2d
 80070c4:	700b      	strb	r3, [r1, #0]
 80070c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070cc:	4691      	mov	r9, r2
 80070ce:	f023 0820 	bic.w	r8, r3, #32
 80070d2:	bfbc      	itt	lt
 80070d4:	4622      	movlt	r2, r4
 80070d6:	4614      	movlt	r4, r2
 80070d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070dc:	d005      	beq.n	80070ea <__cvt+0x42>
 80070de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070e2:	d100      	bne.n	80070e6 <__cvt+0x3e>
 80070e4:	3601      	adds	r6, #1
 80070e6:	2102      	movs	r1, #2
 80070e8:	e000      	b.n	80070ec <__cvt+0x44>
 80070ea:	2103      	movs	r1, #3
 80070ec:	ab03      	add	r3, sp, #12
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	ab02      	add	r3, sp, #8
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	ec45 4b10 	vmov	d0, r4, r5
 80070f8:	4653      	mov	r3, sl
 80070fa:	4632      	mov	r2, r6
 80070fc:	f000 fcec 	bl	8007ad8 <_dtoa_r>
 8007100:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007104:	4607      	mov	r7, r0
 8007106:	d102      	bne.n	800710e <__cvt+0x66>
 8007108:	f019 0f01 	tst.w	r9, #1
 800710c:	d022      	beq.n	8007154 <__cvt+0xac>
 800710e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007112:	eb07 0906 	add.w	r9, r7, r6
 8007116:	d110      	bne.n	800713a <__cvt+0x92>
 8007118:	783b      	ldrb	r3, [r7, #0]
 800711a:	2b30      	cmp	r3, #48	; 0x30
 800711c:	d10a      	bne.n	8007134 <__cvt+0x8c>
 800711e:	2200      	movs	r2, #0
 8007120:	2300      	movs	r3, #0
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f7f9 fce7 	bl	8000af8 <__aeabi_dcmpeq>
 800712a:	b918      	cbnz	r0, 8007134 <__cvt+0x8c>
 800712c:	f1c6 0601 	rsb	r6, r6, #1
 8007130:	f8ca 6000 	str.w	r6, [sl]
 8007134:	f8da 3000 	ldr.w	r3, [sl]
 8007138:	4499      	add	r9, r3
 800713a:	2200      	movs	r2, #0
 800713c:	2300      	movs	r3, #0
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 fcd9 	bl	8000af8 <__aeabi_dcmpeq>
 8007146:	b108      	cbz	r0, 800714c <__cvt+0xa4>
 8007148:	f8cd 900c 	str.w	r9, [sp, #12]
 800714c:	2230      	movs	r2, #48	; 0x30
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	454b      	cmp	r3, r9
 8007152:	d307      	bcc.n	8007164 <__cvt+0xbc>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007158:	1bdb      	subs	r3, r3, r7
 800715a:	4638      	mov	r0, r7
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	b004      	add	sp, #16
 8007160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007164:	1c59      	adds	r1, r3, #1
 8007166:	9103      	str	r1, [sp, #12]
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	e7f0      	b.n	800714e <__cvt+0xa6>

0800716c <__exponent>:
 800716c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800716e:	4603      	mov	r3, r0
 8007170:	2900      	cmp	r1, #0
 8007172:	bfb8      	it	lt
 8007174:	4249      	neglt	r1, r1
 8007176:	f803 2b02 	strb.w	r2, [r3], #2
 800717a:	bfb4      	ite	lt
 800717c:	222d      	movlt	r2, #45	; 0x2d
 800717e:	222b      	movge	r2, #43	; 0x2b
 8007180:	2909      	cmp	r1, #9
 8007182:	7042      	strb	r2, [r0, #1]
 8007184:	dd2a      	ble.n	80071dc <__exponent+0x70>
 8007186:	f10d 0407 	add.w	r4, sp, #7
 800718a:	46a4      	mov	ip, r4
 800718c:	270a      	movs	r7, #10
 800718e:	46a6      	mov	lr, r4
 8007190:	460a      	mov	r2, r1
 8007192:	fb91 f6f7 	sdiv	r6, r1, r7
 8007196:	fb07 1516 	mls	r5, r7, r6, r1
 800719a:	3530      	adds	r5, #48	; 0x30
 800719c:	2a63      	cmp	r2, #99	; 0x63
 800719e:	f104 34ff 	add.w	r4, r4, #4294967295
 80071a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071a6:	4631      	mov	r1, r6
 80071a8:	dcf1      	bgt.n	800718e <__exponent+0x22>
 80071aa:	3130      	adds	r1, #48	; 0x30
 80071ac:	f1ae 0502 	sub.w	r5, lr, #2
 80071b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071b4:	1c44      	adds	r4, r0, #1
 80071b6:	4629      	mov	r1, r5
 80071b8:	4561      	cmp	r1, ip
 80071ba:	d30a      	bcc.n	80071d2 <__exponent+0x66>
 80071bc:	f10d 0209 	add.w	r2, sp, #9
 80071c0:	eba2 020e 	sub.w	r2, r2, lr
 80071c4:	4565      	cmp	r5, ip
 80071c6:	bf88      	it	hi
 80071c8:	2200      	movhi	r2, #0
 80071ca:	4413      	add	r3, r2
 80071cc:	1a18      	subs	r0, r3, r0
 80071ce:	b003      	add	sp, #12
 80071d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071da:	e7ed      	b.n	80071b8 <__exponent+0x4c>
 80071dc:	2330      	movs	r3, #48	; 0x30
 80071de:	3130      	adds	r1, #48	; 0x30
 80071e0:	7083      	strb	r3, [r0, #2]
 80071e2:	70c1      	strb	r1, [r0, #3]
 80071e4:	1d03      	adds	r3, r0, #4
 80071e6:	e7f1      	b.n	80071cc <__exponent+0x60>

080071e8 <_printf_float>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	ed2d 8b02 	vpush	{d8}
 80071f0:	b08d      	sub	sp, #52	; 0x34
 80071f2:	460c      	mov	r4, r1
 80071f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071f8:	4616      	mov	r6, r2
 80071fa:	461f      	mov	r7, r3
 80071fc:	4605      	mov	r5, r0
 80071fe:	f001 fa59 	bl	80086b4 <_localeconv_r>
 8007202:	f8d0 a000 	ldr.w	sl, [r0]
 8007206:	4650      	mov	r0, sl
 8007208:	f7f8 fffa 	bl	8000200 <strlen>
 800720c:	2300      	movs	r3, #0
 800720e:	930a      	str	r3, [sp, #40]	; 0x28
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	f8d8 3000 	ldr.w	r3, [r8]
 8007218:	f894 b018 	ldrb.w	fp, [r4, #24]
 800721c:	3307      	adds	r3, #7
 800721e:	f023 0307 	bic.w	r3, r3, #7
 8007222:	f103 0208 	add.w	r2, r3, #8
 8007226:	f8c8 2000 	str.w	r2, [r8]
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007232:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007240:	ee08 0a10 	vmov	s16, r0
 8007244:	4b9f      	ldr	r3, [pc, #636]	; (80074c4 <_printf_float+0x2dc>)
 8007246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800724a:	f04f 32ff 	mov.w	r2, #4294967295
 800724e:	f7f9 fc85 	bl	8000b5c <__aeabi_dcmpun>
 8007252:	bb88      	cbnz	r0, 80072b8 <_printf_float+0xd0>
 8007254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007258:	4b9a      	ldr	r3, [pc, #616]	; (80074c4 <_printf_float+0x2dc>)
 800725a:	f04f 32ff 	mov.w	r2, #4294967295
 800725e:	f7f9 fc5f 	bl	8000b20 <__aeabi_dcmple>
 8007262:	bb48      	cbnz	r0, 80072b8 <_printf_float+0xd0>
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f9 fc4e 	bl	8000b0c <__aeabi_dcmplt>
 8007270:	b110      	cbz	r0, 8007278 <_printf_float+0x90>
 8007272:	232d      	movs	r3, #45	; 0x2d
 8007274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007278:	4b93      	ldr	r3, [pc, #588]	; (80074c8 <_printf_float+0x2e0>)
 800727a:	4894      	ldr	r0, [pc, #592]	; (80074cc <_printf_float+0x2e4>)
 800727c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007280:	bf94      	ite	ls
 8007282:	4698      	movls	r8, r3
 8007284:	4680      	movhi	r8, r0
 8007286:	2303      	movs	r3, #3
 8007288:	6123      	str	r3, [r4, #16]
 800728a:	9b05      	ldr	r3, [sp, #20]
 800728c:	f023 0204 	bic.w	r2, r3, #4
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	f04f 0900 	mov.w	r9, #0
 8007296:	9700      	str	r7, [sp, #0]
 8007298:	4633      	mov	r3, r6
 800729a:	aa0b      	add	r2, sp, #44	; 0x2c
 800729c:	4621      	mov	r1, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f9d8 	bl	8007654 <_printf_common>
 80072a4:	3001      	adds	r0, #1
 80072a6:	f040 8090 	bne.w	80073ca <_printf_float+0x1e2>
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295
 80072ae:	b00d      	add	sp, #52	; 0x34
 80072b0:	ecbd 8b02 	vpop	{d8}
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	4640      	mov	r0, r8
 80072be:	4649      	mov	r1, r9
 80072c0:	f7f9 fc4c 	bl	8000b5c <__aeabi_dcmpun>
 80072c4:	b140      	cbz	r0, 80072d8 <_printf_float+0xf0>
 80072c6:	464b      	mov	r3, r9
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfbc      	itt	lt
 80072cc:	232d      	movlt	r3, #45	; 0x2d
 80072ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072d2:	487f      	ldr	r0, [pc, #508]	; (80074d0 <_printf_float+0x2e8>)
 80072d4:	4b7f      	ldr	r3, [pc, #508]	; (80074d4 <_printf_float+0x2ec>)
 80072d6:	e7d1      	b.n	800727c <_printf_float+0x94>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072de:	9206      	str	r2, [sp, #24]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	d13f      	bne.n	8007364 <_printf_float+0x17c>
 80072e4:	2306      	movs	r3, #6
 80072e6:	6063      	str	r3, [r4, #4]
 80072e8:	9b05      	ldr	r3, [sp, #20]
 80072ea:	6861      	ldr	r1, [r4, #4]
 80072ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072f0:	2300      	movs	r3, #0
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	ab0a      	add	r3, sp, #40	; 0x28
 80072f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072fa:	ab09      	add	r3, sp, #36	; 0x24
 80072fc:	ec49 8b10 	vmov	d0, r8, r9
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	6022      	str	r2, [r4, #0]
 8007304:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007308:	4628      	mov	r0, r5
 800730a:	f7ff fecd 	bl	80070a8 <__cvt>
 800730e:	9b06      	ldr	r3, [sp, #24]
 8007310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007312:	2b47      	cmp	r3, #71	; 0x47
 8007314:	4680      	mov	r8, r0
 8007316:	d108      	bne.n	800732a <_printf_float+0x142>
 8007318:	1cc8      	adds	r0, r1, #3
 800731a:	db02      	blt.n	8007322 <_printf_float+0x13a>
 800731c:	6863      	ldr	r3, [r4, #4]
 800731e:	4299      	cmp	r1, r3
 8007320:	dd41      	ble.n	80073a6 <_printf_float+0x1be>
 8007322:	f1ab 0b02 	sub.w	fp, fp, #2
 8007326:	fa5f fb8b 	uxtb.w	fp, fp
 800732a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800732e:	d820      	bhi.n	8007372 <_printf_float+0x18a>
 8007330:	3901      	subs	r1, #1
 8007332:	465a      	mov	r2, fp
 8007334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007338:	9109      	str	r1, [sp, #36]	; 0x24
 800733a:	f7ff ff17 	bl	800716c <__exponent>
 800733e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007340:	1813      	adds	r3, r2, r0
 8007342:	2a01      	cmp	r2, #1
 8007344:	4681      	mov	r9, r0
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	dc02      	bgt.n	8007350 <_printf_float+0x168>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	07d2      	lsls	r2, r2, #31
 800734e:	d501      	bpl.n	8007354 <_printf_float+0x16c>
 8007350:	3301      	adds	r3, #1
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007358:	2b00      	cmp	r3, #0
 800735a:	d09c      	beq.n	8007296 <_printf_float+0xae>
 800735c:	232d      	movs	r3, #45	; 0x2d
 800735e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007362:	e798      	b.n	8007296 <_printf_float+0xae>
 8007364:	9a06      	ldr	r2, [sp, #24]
 8007366:	2a47      	cmp	r2, #71	; 0x47
 8007368:	d1be      	bne.n	80072e8 <_printf_float+0x100>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1bc      	bne.n	80072e8 <_printf_float+0x100>
 800736e:	2301      	movs	r3, #1
 8007370:	e7b9      	b.n	80072e6 <_printf_float+0xfe>
 8007372:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007376:	d118      	bne.n	80073aa <_printf_float+0x1c2>
 8007378:	2900      	cmp	r1, #0
 800737a:	6863      	ldr	r3, [r4, #4]
 800737c:	dd0b      	ble.n	8007396 <_printf_float+0x1ae>
 800737e:	6121      	str	r1, [r4, #16]
 8007380:	b913      	cbnz	r3, 8007388 <_printf_float+0x1a0>
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	07d0      	lsls	r0, r2, #31
 8007386:	d502      	bpl.n	800738e <_printf_float+0x1a6>
 8007388:	3301      	adds	r3, #1
 800738a:	440b      	add	r3, r1
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007390:	f04f 0900 	mov.w	r9, #0
 8007394:	e7de      	b.n	8007354 <_printf_float+0x16c>
 8007396:	b913      	cbnz	r3, 800739e <_printf_float+0x1b6>
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	07d2      	lsls	r2, r2, #31
 800739c:	d501      	bpl.n	80073a2 <_printf_float+0x1ba>
 800739e:	3302      	adds	r3, #2
 80073a0:	e7f4      	b.n	800738c <_printf_float+0x1a4>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7f2      	b.n	800738c <_printf_float+0x1a4>
 80073a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ac:	4299      	cmp	r1, r3
 80073ae:	db05      	blt.n	80073bc <_printf_float+0x1d4>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	6121      	str	r1, [r4, #16]
 80073b4:	07d8      	lsls	r0, r3, #31
 80073b6:	d5ea      	bpl.n	800738e <_printf_float+0x1a6>
 80073b8:	1c4b      	adds	r3, r1, #1
 80073ba:	e7e7      	b.n	800738c <_printf_float+0x1a4>
 80073bc:	2900      	cmp	r1, #0
 80073be:	bfd4      	ite	le
 80073c0:	f1c1 0202 	rsble	r2, r1, #2
 80073c4:	2201      	movgt	r2, #1
 80073c6:	4413      	add	r3, r2
 80073c8:	e7e0      	b.n	800738c <_printf_float+0x1a4>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	055a      	lsls	r2, r3, #21
 80073ce:	d407      	bmi.n	80073e0 <_printf_float+0x1f8>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	4642      	mov	r2, r8
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	d12c      	bne.n	8007438 <_printf_float+0x250>
 80073de:	e764      	b.n	80072aa <_printf_float+0xc2>
 80073e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073e4:	f240 80e0 	bls.w	80075a8 <_printf_float+0x3c0>
 80073e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073ec:	2200      	movs	r2, #0
 80073ee:	2300      	movs	r3, #0
 80073f0:	f7f9 fb82 	bl	8000af8 <__aeabi_dcmpeq>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d034      	beq.n	8007462 <_printf_float+0x27a>
 80073f8:	4a37      	ldr	r2, [pc, #220]	; (80074d8 <_printf_float+0x2f0>)
 80073fa:	2301      	movs	r3, #1
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f af51 	beq.w	80072aa <_printf_float+0xc2>
 8007408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800740c:	429a      	cmp	r2, r3
 800740e:	db02      	blt.n	8007416 <_printf_float+0x22e>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	07d8      	lsls	r0, r3, #31
 8007414:	d510      	bpl.n	8007438 <_printf_float+0x250>
 8007416:	ee18 3a10 	vmov	r3, s16
 800741a:	4652      	mov	r2, sl
 800741c:	4631      	mov	r1, r6
 800741e:	4628      	mov	r0, r5
 8007420:	47b8      	blx	r7
 8007422:	3001      	adds	r0, #1
 8007424:	f43f af41 	beq.w	80072aa <_printf_float+0xc2>
 8007428:	f04f 0800 	mov.w	r8, #0
 800742c:	f104 091a 	add.w	r9, r4, #26
 8007430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007432:	3b01      	subs	r3, #1
 8007434:	4543      	cmp	r3, r8
 8007436:	dc09      	bgt.n	800744c <_printf_float+0x264>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	079b      	lsls	r3, r3, #30
 800743c:	f100 8105 	bmi.w	800764a <_printf_float+0x462>
 8007440:	68e0      	ldr	r0, [r4, #12]
 8007442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007444:	4298      	cmp	r0, r3
 8007446:	bfb8      	it	lt
 8007448:	4618      	movlt	r0, r3
 800744a:	e730      	b.n	80072ae <_printf_float+0xc6>
 800744c:	2301      	movs	r3, #1
 800744e:	464a      	mov	r2, r9
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f af27 	beq.w	80072aa <_printf_float+0xc2>
 800745c:	f108 0801 	add.w	r8, r8, #1
 8007460:	e7e6      	b.n	8007430 <_printf_float+0x248>
 8007462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	dc39      	bgt.n	80074dc <_printf_float+0x2f4>
 8007468:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <_printf_float+0x2f0>)
 800746a:	2301      	movs	r3, #1
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f af19 	beq.w	80072aa <_printf_float+0xc2>
 8007478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800747c:	4313      	orrs	r3, r2
 800747e:	d102      	bne.n	8007486 <_printf_float+0x29e>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	07d9      	lsls	r1, r3, #31
 8007484:	d5d8      	bpl.n	8007438 <_printf_float+0x250>
 8007486:	ee18 3a10 	vmov	r3, s16
 800748a:	4652      	mov	r2, sl
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	f43f af09 	beq.w	80072aa <_printf_float+0xc2>
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	f104 0a1a 	add.w	sl, r4, #26
 80074a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a2:	425b      	negs	r3, r3
 80074a4:	454b      	cmp	r3, r9
 80074a6:	dc01      	bgt.n	80074ac <_printf_float+0x2c4>
 80074a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074aa:	e792      	b.n	80073d2 <_printf_float+0x1ea>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4652      	mov	r2, sl
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f aef7 	beq.w	80072aa <_printf_float+0xc2>
 80074bc:	f109 0901 	add.w	r9, r9, #1
 80074c0:	e7ee      	b.n	80074a0 <_printf_float+0x2b8>
 80074c2:	bf00      	nop
 80074c4:	7fefffff 	.word	0x7fefffff
 80074c8:	08009f50 	.word	0x08009f50
 80074cc:	08009f54 	.word	0x08009f54
 80074d0:	08009f5c 	.word	0x08009f5c
 80074d4:	08009f58 	.word	0x08009f58
 80074d8:	08009f60 	.word	0x08009f60
 80074dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bfa8      	it	ge
 80074e4:	461a      	movge	r2, r3
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	4691      	mov	r9, r2
 80074ea:	dc37      	bgt.n	800755c <_printf_float+0x374>
 80074ec:	f04f 0b00 	mov.w	fp, #0
 80074f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f4:	f104 021a 	add.w	r2, r4, #26
 80074f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074fa:	9305      	str	r3, [sp, #20]
 80074fc:	eba3 0309 	sub.w	r3, r3, r9
 8007500:	455b      	cmp	r3, fp
 8007502:	dc33      	bgt.n	800756c <_printf_float+0x384>
 8007504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007508:	429a      	cmp	r2, r3
 800750a:	db3b      	blt.n	8007584 <_printf_float+0x39c>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	07da      	lsls	r2, r3, #31
 8007510:	d438      	bmi.n	8007584 <_printf_float+0x39c>
 8007512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007514:	9a05      	ldr	r2, [sp, #20]
 8007516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007518:	1a9a      	subs	r2, r3, r2
 800751a:	eba3 0901 	sub.w	r9, r3, r1
 800751e:	4591      	cmp	r9, r2
 8007520:	bfa8      	it	ge
 8007522:	4691      	movge	r9, r2
 8007524:	f1b9 0f00 	cmp.w	r9, #0
 8007528:	dc35      	bgt.n	8007596 <_printf_float+0x3ae>
 800752a:	f04f 0800 	mov.w	r8, #0
 800752e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007532:	f104 0a1a 	add.w	sl, r4, #26
 8007536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	eba3 0309 	sub.w	r3, r3, r9
 8007540:	4543      	cmp	r3, r8
 8007542:	f77f af79 	ble.w	8007438 <_printf_float+0x250>
 8007546:	2301      	movs	r3, #1
 8007548:	4652      	mov	r2, sl
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f aeaa 	beq.w	80072aa <_printf_float+0xc2>
 8007556:	f108 0801 	add.w	r8, r8, #1
 800755a:	e7ec      	b.n	8007536 <_printf_float+0x34e>
 800755c:	4613      	mov	r3, r2
 800755e:	4631      	mov	r1, r6
 8007560:	4642      	mov	r2, r8
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	d1c0      	bne.n	80074ec <_printf_float+0x304>
 800756a:	e69e      	b.n	80072aa <_printf_float+0xc2>
 800756c:	2301      	movs	r3, #1
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	9205      	str	r2, [sp, #20]
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f ae97 	beq.w	80072aa <_printf_float+0xc2>
 800757c:	9a05      	ldr	r2, [sp, #20]
 800757e:	f10b 0b01 	add.w	fp, fp, #1
 8007582:	e7b9      	b.n	80074f8 <_printf_float+0x310>
 8007584:	ee18 3a10 	vmov	r3, s16
 8007588:	4652      	mov	r2, sl
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	d1be      	bne.n	8007512 <_printf_float+0x32a>
 8007594:	e689      	b.n	80072aa <_printf_float+0xc2>
 8007596:	9a05      	ldr	r2, [sp, #20]
 8007598:	464b      	mov	r3, r9
 800759a:	4442      	add	r2, r8
 800759c:	4631      	mov	r1, r6
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	d1c1      	bne.n	800752a <_printf_float+0x342>
 80075a6:	e680      	b.n	80072aa <_printf_float+0xc2>
 80075a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075aa:	2a01      	cmp	r2, #1
 80075ac:	dc01      	bgt.n	80075b2 <_printf_float+0x3ca>
 80075ae:	07db      	lsls	r3, r3, #31
 80075b0:	d538      	bpl.n	8007624 <_printf_float+0x43c>
 80075b2:	2301      	movs	r3, #1
 80075b4:	4642      	mov	r2, r8
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	f43f ae74 	beq.w	80072aa <_printf_float+0xc2>
 80075c2:	ee18 3a10 	vmov	r3, s16
 80075c6:	4652      	mov	r2, sl
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f ae6b 	beq.w	80072aa <_printf_float+0xc2>
 80075d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075d8:	2200      	movs	r2, #0
 80075da:	2300      	movs	r3, #0
 80075dc:	f7f9 fa8c 	bl	8000af8 <__aeabi_dcmpeq>
 80075e0:	b9d8      	cbnz	r0, 800761a <_printf_float+0x432>
 80075e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e4:	f108 0201 	add.w	r2, r8, #1
 80075e8:	3b01      	subs	r3, #1
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	d10e      	bne.n	8007612 <_printf_float+0x42a>
 80075f4:	e659      	b.n	80072aa <_printf_float+0xc2>
 80075f6:	2301      	movs	r3, #1
 80075f8:	4652      	mov	r2, sl
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b8      	blx	r7
 8007600:	3001      	adds	r0, #1
 8007602:	f43f ae52 	beq.w	80072aa <_printf_float+0xc2>
 8007606:	f108 0801 	add.w	r8, r8, #1
 800760a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760c:	3b01      	subs	r3, #1
 800760e:	4543      	cmp	r3, r8
 8007610:	dcf1      	bgt.n	80075f6 <_printf_float+0x40e>
 8007612:	464b      	mov	r3, r9
 8007614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007618:	e6dc      	b.n	80073d4 <_printf_float+0x1ec>
 800761a:	f04f 0800 	mov.w	r8, #0
 800761e:	f104 0a1a 	add.w	sl, r4, #26
 8007622:	e7f2      	b.n	800760a <_printf_float+0x422>
 8007624:	2301      	movs	r3, #1
 8007626:	4642      	mov	r2, r8
 8007628:	e7df      	b.n	80075ea <_printf_float+0x402>
 800762a:	2301      	movs	r3, #1
 800762c:	464a      	mov	r2, r9
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f ae38 	beq.w	80072aa <_printf_float+0xc2>
 800763a:	f108 0801 	add.w	r8, r8, #1
 800763e:	68e3      	ldr	r3, [r4, #12]
 8007640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007642:	1a5b      	subs	r3, r3, r1
 8007644:	4543      	cmp	r3, r8
 8007646:	dcf0      	bgt.n	800762a <_printf_float+0x442>
 8007648:	e6fa      	b.n	8007440 <_printf_float+0x258>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	f104 0919 	add.w	r9, r4, #25
 8007652:	e7f4      	b.n	800763e <_printf_float+0x456>

08007654 <_printf_common>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	4616      	mov	r6, r2
 800765a:	4699      	mov	r9, r3
 800765c:	688a      	ldr	r2, [r1, #8]
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007664:	4293      	cmp	r3, r2
 8007666:	bfb8      	it	lt
 8007668:	4613      	movlt	r3, r2
 800766a:	6033      	str	r3, [r6, #0]
 800766c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007670:	4607      	mov	r7, r0
 8007672:	460c      	mov	r4, r1
 8007674:	b10a      	cbz	r2, 800767a <_printf_common+0x26>
 8007676:	3301      	adds	r3, #1
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	0699      	lsls	r1, r3, #26
 800767e:	bf42      	ittt	mi
 8007680:	6833      	ldrmi	r3, [r6, #0]
 8007682:	3302      	addmi	r3, #2
 8007684:	6033      	strmi	r3, [r6, #0]
 8007686:	6825      	ldr	r5, [r4, #0]
 8007688:	f015 0506 	ands.w	r5, r5, #6
 800768c:	d106      	bne.n	800769c <_printf_common+0x48>
 800768e:	f104 0a19 	add.w	sl, r4, #25
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	6832      	ldr	r2, [r6, #0]
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	42ab      	cmp	r3, r5
 800769a:	dc26      	bgt.n	80076ea <_printf_common+0x96>
 800769c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076a0:	1e13      	subs	r3, r2, #0
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	bf18      	it	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	0692      	lsls	r2, r2, #26
 80076aa:	d42b      	bmi.n	8007704 <_printf_common+0xb0>
 80076ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b0:	4649      	mov	r1, r9
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c0      	blx	r8
 80076b6:	3001      	adds	r0, #1
 80076b8:	d01e      	beq.n	80076f8 <_printf_common+0xa4>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	68e5      	ldr	r5, [r4, #12]
 80076be:	6832      	ldr	r2, [r6, #0]
 80076c0:	f003 0306 	and.w	r3, r3, #6
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	bf08      	it	eq
 80076c8:	1aad      	subeq	r5, r5, r2
 80076ca:	68a3      	ldr	r3, [r4, #8]
 80076cc:	6922      	ldr	r2, [r4, #16]
 80076ce:	bf0c      	ite	eq
 80076d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d4:	2500      	movne	r5, #0
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bfc4      	itt	gt
 80076da:	1a9b      	subgt	r3, r3, r2
 80076dc:	18ed      	addgt	r5, r5, r3
 80076de:	2600      	movs	r6, #0
 80076e0:	341a      	adds	r4, #26
 80076e2:	42b5      	cmp	r5, r6
 80076e4:	d11a      	bne.n	800771c <_printf_common+0xc8>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e008      	b.n	80076fc <_printf_common+0xa8>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4652      	mov	r2, sl
 80076ee:	4649      	mov	r1, r9
 80076f0:	4638      	mov	r0, r7
 80076f2:	47c0      	blx	r8
 80076f4:	3001      	adds	r0, #1
 80076f6:	d103      	bne.n	8007700 <_printf_common+0xac>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007700:	3501      	adds	r5, #1
 8007702:	e7c6      	b.n	8007692 <_printf_common+0x3e>
 8007704:	18e1      	adds	r1, r4, r3
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	2030      	movs	r0, #48	; 0x30
 800770a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770e:	4422      	add	r2, r4
 8007710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007718:	3302      	adds	r3, #2
 800771a:	e7c7      	b.n	80076ac <_printf_common+0x58>
 800771c:	2301      	movs	r3, #1
 800771e:	4622      	mov	r2, r4
 8007720:	4649      	mov	r1, r9
 8007722:	4638      	mov	r0, r7
 8007724:	47c0      	blx	r8
 8007726:	3001      	adds	r0, #1
 8007728:	d0e6      	beq.n	80076f8 <_printf_common+0xa4>
 800772a:	3601      	adds	r6, #1
 800772c:	e7d9      	b.n	80076e2 <_printf_common+0x8e>
	...

08007730 <_printf_i>:
 8007730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	7e0f      	ldrb	r7, [r1, #24]
 8007736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007738:	2f78      	cmp	r7, #120	; 0x78
 800773a:	4691      	mov	r9, r2
 800773c:	4680      	mov	r8, r0
 800773e:	460c      	mov	r4, r1
 8007740:	469a      	mov	sl, r3
 8007742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007746:	d807      	bhi.n	8007758 <_printf_i+0x28>
 8007748:	2f62      	cmp	r7, #98	; 0x62
 800774a:	d80a      	bhi.n	8007762 <_printf_i+0x32>
 800774c:	2f00      	cmp	r7, #0
 800774e:	f000 80d8 	beq.w	8007902 <_printf_i+0x1d2>
 8007752:	2f58      	cmp	r7, #88	; 0x58
 8007754:	f000 80a3 	beq.w	800789e <_printf_i+0x16e>
 8007758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800775c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007760:	e03a      	b.n	80077d8 <_printf_i+0xa8>
 8007762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007766:	2b15      	cmp	r3, #21
 8007768:	d8f6      	bhi.n	8007758 <_printf_i+0x28>
 800776a:	a101      	add	r1, pc, #4	; (adr r1, 8007770 <_printf_i+0x40>)
 800776c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077dd 	.word	0x080077dd
 8007778:	08007759 	.word	0x08007759
 800777c:	08007759 	.word	0x08007759
 8007780:	08007759 	.word	0x08007759
 8007784:	08007759 	.word	0x08007759
 8007788:	080077dd 	.word	0x080077dd
 800778c:	08007759 	.word	0x08007759
 8007790:	08007759 	.word	0x08007759
 8007794:	08007759 	.word	0x08007759
 8007798:	08007759 	.word	0x08007759
 800779c:	080078e9 	.word	0x080078e9
 80077a0:	0800780d 	.word	0x0800780d
 80077a4:	080078cb 	.word	0x080078cb
 80077a8:	08007759 	.word	0x08007759
 80077ac:	08007759 	.word	0x08007759
 80077b0:	0800790b 	.word	0x0800790b
 80077b4:	08007759 	.word	0x08007759
 80077b8:	0800780d 	.word	0x0800780d
 80077bc:	08007759 	.word	0x08007759
 80077c0:	08007759 	.word	0x08007759
 80077c4:	080078d3 	.word	0x080078d3
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	602a      	str	r2, [r5, #0]
 80077d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d8:	2301      	movs	r3, #1
 80077da:	e0a3      	b.n	8007924 <_printf_i+0x1f4>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	6829      	ldr	r1, [r5, #0]
 80077e0:	0606      	lsls	r6, r0, #24
 80077e2:	f101 0304 	add.w	r3, r1, #4
 80077e6:	d50a      	bpl.n	80077fe <_printf_i+0xce>
 80077e8:	680e      	ldr	r6, [r1, #0]
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	2e00      	cmp	r6, #0
 80077ee:	da03      	bge.n	80077f8 <_printf_i+0xc8>
 80077f0:	232d      	movs	r3, #45	; 0x2d
 80077f2:	4276      	negs	r6, r6
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	485e      	ldr	r0, [pc, #376]	; (8007974 <_printf_i+0x244>)
 80077fa:	230a      	movs	r3, #10
 80077fc:	e019      	b.n	8007832 <_printf_i+0x102>
 80077fe:	680e      	ldr	r6, [r1, #0]
 8007800:	602b      	str	r3, [r5, #0]
 8007802:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007806:	bf18      	it	ne
 8007808:	b236      	sxthne	r6, r6
 800780a:	e7ef      	b.n	80077ec <_printf_i+0xbc>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	1d19      	adds	r1, r3, #4
 8007812:	6029      	str	r1, [r5, #0]
 8007814:	0601      	lsls	r1, r0, #24
 8007816:	d501      	bpl.n	800781c <_printf_i+0xec>
 8007818:	681e      	ldr	r6, [r3, #0]
 800781a:	e002      	b.n	8007822 <_printf_i+0xf2>
 800781c:	0646      	lsls	r6, r0, #25
 800781e:	d5fb      	bpl.n	8007818 <_printf_i+0xe8>
 8007820:	881e      	ldrh	r6, [r3, #0]
 8007822:	4854      	ldr	r0, [pc, #336]	; (8007974 <_printf_i+0x244>)
 8007824:	2f6f      	cmp	r7, #111	; 0x6f
 8007826:	bf0c      	ite	eq
 8007828:	2308      	moveq	r3, #8
 800782a:	230a      	movne	r3, #10
 800782c:	2100      	movs	r1, #0
 800782e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007832:	6865      	ldr	r5, [r4, #4]
 8007834:	60a5      	str	r5, [r4, #8]
 8007836:	2d00      	cmp	r5, #0
 8007838:	bfa2      	ittt	ge
 800783a:	6821      	ldrge	r1, [r4, #0]
 800783c:	f021 0104 	bicge.w	r1, r1, #4
 8007840:	6021      	strge	r1, [r4, #0]
 8007842:	b90e      	cbnz	r6, 8007848 <_printf_i+0x118>
 8007844:	2d00      	cmp	r5, #0
 8007846:	d04d      	beq.n	80078e4 <_printf_i+0x1b4>
 8007848:	4615      	mov	r5, r2
 800784a:	fbb6 f1f3 	udiv	r1, r6, r3
 800784e:	fb03 6711 	mls	r7, r3, r1, r6
 8007852:	5dc7      	ldrb	r7, [r0, r7]
 8007854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007858:	4637      	mov	r7, r6
 800785a:	42bb      	cmp	r3, r7
 800785c:	460e      	mov	r6, r1
 800785e:	d9f4      	bls.n	800784a <_printf_i+0x11a>
 8007860:	2b08      	cmp	r3, #8
 8007862:	d10b      	bne.n	800787c <_printf_i+0x14c>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	07de      	lsls	r6, r3, #31
 8007868:	d508      	bpl.n	800787c <_printf_i+0x14c>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	6861      	ldr	r1, [r4, #4]
 800786e:	4299      	cmp	r1, r3
 8007870:	bfde      	ittt	le
 8007872:	2330      	movle	r3, #48	; 0x30
 8007874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800787c:	1b52      	subs	r2, r2, r5
 800787e:	6122      	str	r2, [r4, #16]
 8007880:	f8cd a000 	str.w	sl, [sp]
 8007884:	464b      	mov	r3, r9
 8007886:	aa03      	add	r2, sp, #12
 8007888:	4621      	mov	r1, r4
 800788a:	4640      	mov	r0, r8
 800788c:	f7ff fee2 	bl	8007654 <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	d14c      	bne.n	800792e <_printf_i+0x1fe>
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	b004      	add	sp, #16
 800789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789e:	4835      	ldr	r0, [pc, #212]	; (8007974 <_printf_i+0x244>)
 80078a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078a4:	6829      	ldr	r1, [r5, #0]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80078ac:	6029      	str	r1, [r5, #0]
 80078ae:	061d      	lsls	r5, r3, #24
 80078b0:	d514      	bpl.n	80078dc <_printf_i+0x1ac>
 80078b2:	07df      	lsls	r7, r3, #31
 80078b4:	bf44      	itt	mi
 80078b6:	f043 0320 	orrmi.w	r3, r3, #32
 80078ba:	6023      	strmi	r3, [r4, #0]
 80078bc:	b91e      	cbnz	r6, 80078c6 <_printf_i+0x196>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	f023 0320 	bic.w	r3, r3, #32
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	2310      	movs	r3, #16
 80078c8:	e7b0      	b.n	800782c <_printf_i+0xfc>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f043 0320 	orr.w	r3, r3, #32
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	2378      	movs	r3, #120	; 0x78
 80078d4:	4828      	ldr	r0, [pc, #160]	; (8007978 <_printf_i+0x248>)
 80078d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078da:	e7e3      	b.n	80078a4 <_printf_i+0x174>
 80078dc:	0659      	lsls	r1, r3, #25
 80078de:	bf48      	it	mi
 80078e0:	b2b6      	uxthmi	r6, r6
 80078e2:	e7e6      	b.n	80078b2 <_printf_i+0x182>
 80078e4:	4615      	mov	r5, r2
 80078e6:	e7bb      	b.n	8007860 <_printf_i+0x130>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	6826      	ldr	r6, [r4, #0]
 80078ec:	6961      	ldr	r1, [r4, #20]
 80078ee:	1d18      	adds	r0, r3, #4
 80078f0:	6028      	str	r0, [r5, #0]
 80078f2:	0635      	lsls	r5, r6, #24
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	d501      	bpl.n	80078fc <_printf_i+0x1cc>
 80078f8:	6019      	str	r1, [r3, #0]
 80078fa:	e002      	b.n	8007902 <_printf_i+0x1d2>
 80078fc:	0670      	lsls	r0, r6, #25
 80078fe:	d5fb      	bpl.n	80078f8 <_printf_i+0x1c8>
 8007900:	8019      	strh	r1, [r3, #0]
 8007902:	2300      	movs	r3, #0
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	4615      	mov	r5, r2
 8007908:	e7ba      	b.n	8007880 <_printf_i+0x150>
 800790a:	682b      	ldr	r3, [r5, #0]
 800790c:	1d1a      	adds	r2, r3, #4
 800790e:	602a      	str	r2, [r5, #0]
 8007910:	681d      	ldr	r5, [r3, #0]
 8007912:	6862      	ldr	r2, [r4, #4]
 8007914:	2100      	movs	r1, #0
 8007916:	4628      	mov	r0, r5
 8007918:	f7f8 fc7a 	bl	8000210 <memchr>
 800791c:	b108      	cbz	r0, 8007922 <_printf_i+0x1f2>
 800791e:	1b40      	subs	r0, r0, r5
 8007920:	6060      	str	r0, [r4, #4]
 8007922:	6863      	ldr	r3, [r4, #4]
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	2300      	movs	r3, #0
 8007928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800792c:	e7a8      	b.n	8007880 <_printf_i+0x150>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	462a      	mov	r2, r5
 8007932:	4649      	mov	r1, r9
 8007934:	4640      	mov	r0, r8
 8007936:	47d0      	blx	sl
 8007938:	3001      	adds	r0, #1
 800793a:	d0ab      	beq.n	8007894 <_printf_i+0x164>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	079b      	lsls	r3, r3, #30
 8007940:	d413      	bmi.n	800796a <_printf_i+0x23a>
 8007942:	68e0      	ldr	r0, [r4, #12]
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	4298      	cmp	r0, r3
 8007948:	bfb8      	it	lt
 800794a:	4618      	movlt	r0, r3
 800794c:	e7a4      	b.n	8007898 <_printf_i+0x168>
 800794e:	2301      	movs	r3, #1
 8007950:	4632      	mov	r2, r6
 8007952:	4649      	mov	r1, r9
 8007954:	4640      	mov	r0, r8
 8007956:	47d0      	blx	sl
 8007958:	3001      	adds	r0, #1
 800795a:	d09b      	beq.n	8007894 <_printf_i+0x164>
 800795c:	3501      	adds	r5, #1
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	9903      	ldr	r1, [sp, #12]
 8007962:	1a5b      	subs	r3, r3, r1
 8007964:	42ab      	cmp	r3, r5
 8007966:	dcf2      	bgt.n	800794e <_printf_i+0x21e>
 8007968:	e7eb      	b.n	8007942 <_printf_i+0x212>
 800796a:	2500      	movs	r5, #0
 800796c:	f104 0619 	add.w	r6, r4, #25
 8007970:	e7f5      	b.n	800795e <_printf_i+0x22e>
 8007972:	bf00      	nop
 8007974:	08009f62 	.word	0x08009f62
 8007978:	08009f73 	.word	0x08009f73

0800797c <siprintf>:
 800797c:	b40e      	push	{r1, r2, r3}
 800797e:	b500      	push	{lr}
 8007980:	b09c      	sub	sp, #112	; 0x70
 8007982:	ab1d      	add	r3, sp, #116	; 0x74
 8007984:	9002      	str	r0, [sp, #8]
 8007986:	9006      	str	r0, [sp, #24]
 8007988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800798c:	4809      	ldr	r0, [pc, #36]	; (80079b4 <siprintf+0x38>)
 800798e:	9107      	str	r1, [sp, #28]
 8007990:	9104      	str	r1, [sp, #16]
 8007992:	4909      	ldr	r1, [pc, #36]	; (80079b8 <siprintf+0x3c>)
 8007994:	f853 2b04 	ldr.w	r2, [r3], #4
 8007998:	9105      	str	r1, [sp, #20]
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	a902      	add	r1, sp, #8
 80079a0:	f001 fb78 	bl	8009094 <_svfiprintf_r>
 80079a4:	9b02      	ldr	r3, [sp, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	b01c      	add	sp, #112	; 0x70
 80079ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b0:	b003      	add	sp, #12
 80079b2:	4770      	bx	lr
 80079b4:	2000000c 	.word	0x2000000c
 80079b8:	ffff0208 	.word	0xffff0208

080079bc <quorem>:
 80079bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	6903      	ldr	r3, [r0, #16]
 80079c2:	690c      	ldr	r4, [r1, #16]
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	4607      	mov	r7, r0
 80079c8:	f2c0 8081 	blt.w	8007ace <quorem+0x112>
 80079cc:	3c01      	subs	r4, #1
 80079ce:	f101 0814 	add.w	r8, r1, #20
 80079d2:	f100 0514 	add.w	r5, r0, #20
 80079d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079e4:	3301      	adds	r3, #1
 80079e6:	429a      	cmp	r2, r3
 80079e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079f4:	d331      	bcc.n	8007a5a <quorem+0x9e>
 80079f6:	f04f 0e00 	mov.w	lr, #0
 80079fa:	4640      	mov	r0, r8
 80079fc:	46ac      	mov	ip, r5
 80079fe:	46f2      	mov	sl, lr
 8007a00:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a04:	b293      	uxth	r3, r2
 8007a06:	fb06 e303 	mla	r3, r6, r3, lr
 8007a0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	ebaa 0303 	sub.w	r3, sl, r3
 8007a14:	f8dc a000 	ldr.w	sl, [ip]
 8007a18:	0c12      	lsrs	r2, r2, #16
 8007a1a:	fa13 f38a 	uxtah	r3, r3, sl
 8007a1e:	fb06 e202 	mla	r2, r6, r2, lr
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	9b00      	ldr	r3, [sp, #0]
 8007a26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a2a:	b292      	uxth	r2, r2
 8007a2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a34:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a38:	4581      	cmp	r9, r0
 8007a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a3e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a46:	d2db      	bcs.n	8007a00 <quorem+0x44>
 8007a48:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a4c:	b92b      	cbnz	r3, 8007a5a <quorem+0x9e>
 8007a4e:	9b01      	ldr	r3, [sp, #4]
 8007a50:	3b04      	subs	r3, #4
 8007a52:	429d      	cmp	r5, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	d32e      	bcc.n	8007ab6 <quorem+0xfa>
 8007a58:	613c      	str	r4, [r7, #16]
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f001 f8c6 	bl	8008bec <__mcmp>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	db24      	blt.n	8007aae <quorem+0xf2>
 8007a64:	3601      	adds	r6, #1
 8007a66:	4628      	mov	r0, r5
 8007a68:	f04f 0c00 	mov.w	ip, #0
 8007a6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a70:	f8d0 e000 	ldr.w	lr, [r0]
 8007a74:	b293      	uxth	r3, r2
 8007a76:	ebac 0303 	sub.w	r3, ip, r3
 8007a7a:	0c12      	lsrs	r2, r2, #16
 8007a7c:	fa13 f38e 	uxtah	r3, r3, lr
 8007a80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a8e:	45c1      	cmp	r9, r8
 8007a90:	f840 3b04 	str.w	r3, [r0], #4
 8007a94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a98:	d2e8      	bcs.n	8007a6c <quorem+0xb0>
 8007a9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa2:	b922      	cbnz	r2, 8007aae <quorem+0xf2>
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	d30a      	bcc.n	8007ac2 <quorem+0x106>
 8007aac:	613c      	str	r4, [r7, #16]
 8007aae:	4630      	mov	r0, r6
 8007ab0:	b003      	add	sp, #12
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	3b04      	subs	r3, #4
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d1cc      	bne.n	8007a58 <quorem+0x9c>
 8007abe:	3c01      	subs	r4, #1
 8007ac0:	e7c7      	b.n	8007a52 <quorem+0x96>
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	d1f0      	bne.n	8007aac <quorem+0xf0>
 8007aca:	3c01      	subs	r4, #1
 8007acc:	e7eb      	b.n	8007aa6 <quorem+0xea>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e7ee      	b.n	8007ab0 <quorem+0xf4>
 8007ad2:	0000      	movs	r0, r0
 8007ad4:	0000      	movs	r0, r0
	...

08007ad8 <_dtoa_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	ed2d 8b04 	vpush	{d8-d9}
 8007ae0:	ec57 6b10 	vmov	r6, r7, d0
 8007ae4:	b093      	sub	sp, #76	; 0x4c
 8007ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aec:	9106      	str	r1, [sp, #24]
 8007aee:	ee10 aa10 	vmov	sl, s0
 8007af2:	4604      	mov	r4, r0
 8007af4:	9209      	str	r2, [sp, #36]	; 0x24
 8007af6:	930c      	str	r3, [sp, #48]	; 0x30
 8007af8:	46bb      	mov	fp, r7
 8007afa:	b975      	cbnz	r5, 8007b1a <_dtoa_r+0x42>
 8007afc:	2010      	movs	r0, #16
 8007afe:	f000 fddd 	bl	80086bc <malloc>
 8007b02:	4602      	mov	r2, r0
 8007b04:	6260      	str	r0, [r4, #36]	; 0x24
 8007b06:	b920      	cbnz	r0, 8007b12 <_dtoa_r+0x3a>
 8007b08:	4ba7      	ldr	r3, [pc, #668]	; (8007da8 <_dtoa_r+0x2d0>)
 8007b0a:	21ea      	movs	r1, #234	; 0xea
 8007b0c:	48a7      	ldr	r0, [pc, #668]	; (8007dac <_dtoa_r+0x2d4>)
 8007b0e:	f001 fbd1 	bl	80092b4 <__assert_func>
 8007b12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b16:	6005      	str	r5, [r0, #0]
 8007b18:	60c5      	str	r5, [r0, #12]
 8007b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b1c:	6819      	ldr	r1, [r3, #0]
 8007b1e:	b151      	cbz	r1, 8007b36 <_dtoa_r+0x5e>
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	604a      	str	r2, [r1, #4]
 8007b24:	2301      	movs	r3, #1
 8007b26:	4093      	lsls	r3, r2
 8007b28:	608b      	str	r3, [r1, #8]
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fe1c 	bl	8008768 <_Bfree>
 8007b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	1e3b      	subs	r3, r7, #0
 8007b38:	bfaa      	itet	ge
 8007b3a:	2300      	movge	r3, #0
 8007b3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b40:	f8c8 3000 	strge.w	r3, [r8]
 8007b44:	4b9a      	ldr	r3, [pc, #616]	; (8007db0 <_dtoa_r+0x2d8>)
 8007b46:	bfbc      	itt	lt
 8007b48:	2201      	movlt	r2, #1
 8007b4a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b4e:	ea33 030b 	bics.w	r3, r3, fp
 8007b52:	d11b      	bne.n	8007b8c <_dtoa_r+0xb4>
 8007b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b56:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b60:	4333      	orrs	r3, r6
 8007b62:	f000 8592 	beq.w	800868a <_dtoa_r+0xbb2>
 8007b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b68:	b963      	cbnz	r3, 8007b84 <_dtoa_r+0xac>
 8007b6a:	4b92      	ldr	r3, [pc, #584]	; (8007db4 <_dtoa_r+0x2dc>)
 8007b6c:	e022      	b.n	8007bb4 <_dtoa_r+0xdc>
 8007b6e:	4b92      	ldr	r3, [pc, #584]	; (8007db8 <_dtoa_r+0x2e0>)
 8007b70:	9301      	str	r3, [sp, #4]
 8007b72:	3308      	adds	r3, #8
 8007b74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	9801      	ldr	r0, [sp, #4]
 8007b7a:	b013      	add	sp, #76	; 0x4c
 8007b7c:	ecbd 8b04 	vpop	{d8-d9}
 8007b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b84:	4b8b      	ldr	r3, [pc, #556]	; (8007db4 <_dtoa_r+0x2dc>)
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	3303      	adds	r3, #3
 8007b8a:	e7f3      	b.n	8007b74 <_dtoa_r+0x9c>
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4650      	mov	r0, sl
 8007b92:	4659      	mov	r1, fp
 8007b94:	f7f8 ffb0 	bl	8000af8 <__aeabi_dcmpeq>
 8007b98:	ec4b ab19 	vmov	d9, sl, fp
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	b158      	cbz	r0, 8007bb8 <_dtoa_r+0xe0>
 8007ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 856b 	beq.w	8008684 <_dtoa_r+0xbac>
 8007bae:	4883      	ldr	r0, [pc, #524]	; (8007dbc <_dtoa_r+0x2e4>)
 8007bb0:	6018      	str	r0, [r3, #0]
 8007bb2:	1e43      	subs	r3, r0, #1
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	e7df      	b.n	8007b78 <_dtoa_r+0xa0>
 8007bb8:	ec4b ab10 	vmov	d0, sl, fp
 8007bbc:	aa10      	add	r2, sp, #64	; 0x40
 8007bbe:	a911      	add	r1, sp, #68	; 0x44
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f001 f8b9 	bl	8008d38 <__d2b>
 8007bc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007bca:	ee08 0a10 	vmov	s16, r0
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	f000 8084 	beq.w	8007cdc <_dtoa_r+0x204>
 8007bd4:	ee19 3a90 	vmov	r3, s19
 8007bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007be0:	4656      	mov	r6, sl
 8007be2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007be6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007bee:	4b74      	ldr	r3, [pc, #464]	; (8007dc0 <_dtoa_r+0x2e8>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	f7f8 fb5f 	bl	80002b8 <__aeabi_dsub>
 8007bfa:	a365      	add	r3, pc, #404	; (adr r3, 8007d90 <_dtoa_r+0x2b8>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fd12 	bl	8000628 <__aeabi_dmul>
 8007c04:	a364      	add	r3, pc, #400	; (adr r3, 8007d98 <_dtoa_r+0x2c0>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fb57 	bl	80002bc <__adddf3>
 8007c0e:	4606      	mov	r6, r0
 8007c10:	4628      	mov	r0, r5
 8007c12:	460f      	mov	r7, r1
 8007c14:	f7f8 fc9e 	bl	8000554 <__aeabi_i2d>
 8007c18:	a361      	add	r3, pc, #388	; (adr r3, 8007da0 <_dtoa_r+0x2c8>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fd03 	bl	8000628 <__aeabi_dmul>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4630      	mov	r0, r6
 8007c28:	4639      	mov	r1, r7
 8007c2a:	f7f8 fb47 	bl	80002bc <__adddf3>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460f      	mov	r7, r1
 8007c32:	f7f8 ffa9 	bl	8000b88 <__aeabi_d2iz>
 8007c36:	2200      	movs	r2, #0
 8007c38:	9000      	str	r0, [sp, #0]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 ff64 	bl	8000b0c <__aeabi_dcmplt>
 8007c44:	b150      	cbz	r0, 8007c5c <_dtoa_r+0x184>
 8007c46:	9800      	ldr	r0, [sp, #0]
 8007c48:	f7f8 fc84 	bl	8000554 <__aeabi_i2d>
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	463b      	mov	r3, r7
 8007c50:	f7f8 ff52 	bl	8000af8 <__aeabi_dcmpeq>
 8007c54:	b910      	cbnz	r0, 8007c5c <_dtoa_r+0x184>
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	9b00      	ldr	r3, [sp, #0]
 8007c5e:	2b16      	cmp	r3, #22
 8007c60:	d85a      	bhi.n	8007d18 <_dtoa_r+0x240>
 8007c62:	9a00      	ldr	r2, [sp, #0]
 8007c64:	4b57      	ldr	r3, [pc, #348]	; (8007dc4 <_dtoa_r+0x2ec>)
 8007c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	ec51 0b19 	vmov	r0, r1, d9
 8007c72:	f7f8 ff4b 	bl	8000b0c <__aeabi_dcmplt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d050      	beq.n	8007d1c <_dtoa_r+0x244>
 8007c7a:	9b00      	ldr	r3, [sp, #0]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2300      	movs	r3, #0
 8007c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c86:	1b5d      	subs	r5, r3, r5
 8007c88:	1e6b      	subs	r3, r5, #1
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	bf45      	ittet	mi
 8007c8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c92:	9304      	strmi	r3, [sp, #16]
 8007c94:	2300      	movpl	r3, #0
 8007c96:	2300      	movmi	r3, #0
 8007c98:	bf4c      	ite	mi
 8007c9a:	9305      	strmi	r3, [sp, #20]
 8007c9c:	9304      	strpl	r3, [sp, #16]
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db3d      	blt.n	8007d20 <_dtoa_r+0x248>
 8007ca4:	9b05      	ldr	r3, [sp, #20]
 8007ca6:	9a00      	ldr	r2, [sp, #0]
 8007ca8:	920a      	str	r2, [sp, #40]	; 0x28
 8007caa:	4413      	add	r3, r2
 8007cac:	9305      	str	r3, [sp, #20]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9307      	str	r3, [sp, #28]
 8007cb2:	9b06      	ldr	r3, [sp, #24]
 8007cb4:	2b09      	cmp	r3, #9
 8007cb6:	f200 8089 	bhi.w	8007dcc <_dtoa_r+0x2f4>
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	bfc4      	itt	gt
 8007cbe:	3b04      	subgt	r3, #4
 8007cc0:	9306      	strgt	r3, [sp, #24]
 8007cc2:	9b06      	ldr	r3, [sp, #24]
 8007cc4:	f1a3 0302 	sub.w	r3, r3, #2
 8007cc8:	bfcc      	ite	gt
 8007cca:	2500      	movgt	r5, #0
 8007ccc:	2501      	movle	r5, #1
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f200 8087 	bhi.w	8007de2 <_dtoa_r+0x30a>
 8007cd4:	e8df f003 	tbb	[pc, r3]
 8007cd8:	59383a2d 	.word	0x59383a2d
 8007cdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ce0:	441d      	add	r5, r3
 8007ce2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	bfc1      	itttt	gt
 8007cea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007cf2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007cf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cfa:	bfda      	itte	le
 8007cfc:	f1c3 0320 	rsble	r3, r3, #32
 8007d00:	fa06 f003 	lslle.w	r0, r6, r3
 8007d04:	4318      	orrgt	r0, r3
 8007d06:	f7f8 fc15 	bl	8000534 <__aeabi_ui2d>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d12:	3d01      	subs	r5, #1
 8007d14:	930e      	str	r3, [sp, #56]	; 0x38
 8007d16:	e76a      	b.n	8007bee <_dtoa_r+0x116>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e7b2      	b.n	8007c82 <_dtoa_r+0x1aa>
 8007d1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d1e:	e7b1      	b.n	8007c84 <_dtoa_r+0x1ac>
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	9a00      	ldr	r2, [sp, #0]
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	4253      	negs	r3, r2
 8007d2a:	9307      	str	r3, [sp, #28]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d30:	e7bf      	b.n	8007cb2 <_dtoa_r+0x1da>
 8007d32:	2300      	movs	r3, #0
 8007d34:	9308      	str	r3, [sp, #32]
 8007d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dc55      	bgt.n	8007de8 <_dtoa_r+0x310>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d42:	461a      	mov	r2, r3
 8007d44:	9209      	str	r2, [sp, #36]	; 0x24
 8007d46:	e00c      	b.n	8007d62 <_dtoa_r+0x28a>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e7f3      	b.n	8007d34 <_dtoa_r+0x25c>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d50:	9308      	str	r3, [sp, #32]
 8007d52:	9b00      	ldr	r3, [sp, #0]
 8007d54:	4413      	add	r3, r2
 8007d56:	9302      	str	r3, [sp, #8]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	9303      	str	r3, [sp, #12]
 8007d5e:	bfb8      	it	lt
 8007d60:	2301      	movlt	r3, #1
 8007d62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d64:	2200      	movs	r2, #0
 8007d66:	6042      	str	r2, [r0, #4]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	f102 0614 	add.w	r6, r2, #20
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	6841      	ldr	r1, [r0, #4]
 8007d72:	d93d      	bls.n	8007df0 <_dtoa_r+0x318>
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fcb7 	bl	80086e8 <_Balloc>
 8007d7a:	9001      	str	r0, [sp, #4]
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d13b      	bne.n	8007df8 <_dtoa_r+0x320>
 8007d80:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <_dtoa_r+0x2f0>)
 8007d82:	4602      	mov	r2, r0
 8007d84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d88:	e6c0      	b.n	8007b0c <_dtoa_r+0x34>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e7df      	b.n	8007d4e <_dtoa_r+0x276>
 8007d8e:	bf00      	nop
 8007d90:	636f4361 	.word	0x636f4361
 8007d94:	3fd287a7 	.word	0x3fd287a7
 8007d98:	8b60c8b3 	.word	0x8b60c8b3
 8007d9c:	3fc68a28 	.word	0x3fc68a28
 8007da0:	509f79fb 	.word	0x509f79fb
 8007da4:	3fd34413 	.word	0x3fd34413
 8007da8:	08009f91 	.word	0x08009f91
 8007dac:	08009fa8 	.word	0x08009fa8
 8007db0:	7ff00000 	.word	0x7ff00000
 8007db4:	08009f8d 	.word	0x08009f8d
 8007db8:	08009f84 	.word	0x08009f84
 8007dbc:	08009f61 	.word	0x08009f61
 8007dc0:	3ff80000 	.word	0x3ff80000
 8007dc4:	0800a098 	.word	0x0800a098
 8007dc8:	0800a003 	.word	0x0800a003
 8007dcc:	2501      	movs	r5, #1
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9306      	str	r3, [sp, #24]
 8007dd2:	9508      	str	r5, [sp, #32]
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2312      	movs	r3, #18
 8007de0:	e7b0      	b.n	8007d44 <_dtoa_r+0x26c>
 8007de2:	2301      	movs	r3, #1
 8007de4:	9308      	str	r3, [sp, #32]
 8007de6:	e7f5      	b.n	8007dd4 <_dtoa_r+0x2fc>
 8007de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dee:	e7b8      	b.n	8007d62 <_dtoa_r+0x28a>
 8007df0:	3101      	adds	r1, #1
 8007df2:	6041      	str	r1, [r0, #4]
 8007df4:	0052      	lsls	r2, r2, #1
 8007df6:	e7b8      	b.n	8007d6a <_dtoa_r+0x292>
 8007df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dfa:	9a01      	ldr	r2, [sp, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	2b0e      	cmp	r3, #14
 8007e02:	f200 809d 	bhi.w	8007f40 <_dtoa_r+0x468>
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	f000 809a 	beq.w	8007f40 <_dtoa_r+0x468>
 8007e0c:	9b00      	ldr	r3, [sp, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dd32      	ble.n	8007e78 <_dtoa_r+0x3a0>
 8007e12:	4ab7      	ldr	r2, [pc, #732]	; (80080f0 <_dtoa_r+0x618>)
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e20:	9b00      	ldr	r3, [sp, #0]
 8007e22:	05d8      	lsls	r0, r3, #23
 8007e24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e28:	d516      	bpl.n	8007e58 <_dtoa_r+0x380>
 8007e2a:	4bb2      	ldr	r3, [pc, #712]	; (80080f4 <_dtoa_r+0x61c>)
 8007e2c:	ec51 0b19 	vmov	r0, r1, d9
 8007e30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e34:	f7f8 fd22 	bl	800087c <__aeabi_ddiv>
 8007e38:	f007 070f 	and.w	r7, r7, #15
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	468b      	mov	fp, r1
 8007e40:	2503      	movs	r5, #3
 8007e42:	4eac      	ldr	r6, [pc, #688]	; (80080f4 <_dtoa_r+0x61c>)
 8007e44:	b957      	cbnz	r7, 8007e5c <_dtoa_r+0x384>
 8007e46:	4642      	mov	r2, r8
 8007e48:	464b      	mov	r3, r9
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	f7f8 fd15 	bl	800087c <__aeabi_ddiv>
 8007e52:	4682      	mov	sl, r0
 8007e54:	468b      	mov	fp, r1
 8007e56:	e028      	b.n	8007eaa <_dtoa_r+0x3d2>
 8007e58:	2502      	movs	r5, #2
 8007e5a:	e7f2      	b.n	8007e42 <_dtoa_r+0x36a>
 8007e5c:	07f9      	lsls	r1, r7, #31
 8007e5e:	d508      	bpl.n	8007e72 <_dtoa_r+0x39a>
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e68:	f7f8 fbde 	bl	8000628 <__aeabi_dmul>
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	4680      	mov	r8, r0
 8007e70:	4689      	mov	r9, r1
 8007e72:	107f      	asrs	r7, r7, #1
 8007e74:	3608      	adds	r6, #8
 8007e76:	e7e5      	b.n	8007e44 <_dtoa_r+0x36c>
 8007e78:	f000 809b 	beq.w	8007fb2 <_dtoa_r+0x4da>
 8007e7c:	9b00      	ldr	r3, [sp, #0]
 8007e7e:	4f9d      	ldr	r7, [pc, #628]	; (80080f4 <_dtoa_r+0x61c>)
 8007e80:	425e      	negs	r6, r3
 8007e82:	4b9b      	ldr	r3, [pc, #620]	; (80080f0 <_dtoa_r+0x618>)
 8007e84:	f006 020f 	and.w	r2, r6, #15
 8007e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	ec51 0b19 	vmov	r0, r1, d9
 8007e94:	f7f8 fbc8 	bl	8000628 <__aeabi_dmul>
 8007e98:	1136      	asrs	r6, r6, #4
 8007e9a:	4682      	mov	sl, r0
 8007e9c:	468b      	mov	fp, r1
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2502      	movs	r5, #2
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d17a      	bne.n	8007f9c <_dtoa_r+0x4c4>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1d3      	bne.n	8007e52 <_dtoa_r+0x37a>
 8007eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8082 	beq.w	8007fb6 <_dtoa_r+0x4de>
 8007eb2:	4b91      	ldr	r3, [pc, #580]	; (80080f8 <_dtoa_r+0x620>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	4659      	mov	r1, fp
 8007eba:	f7f8 fe27 	bl	8000b0c <__aeabi_dcmplt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d079      	beq.n	8007fb6 <_dtoa_r+0x4de>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d076      	beq.n	8007fb6 <_dtoa_r+0x4de>
 8007ec8:	9b02      	ldr	r3, [sp, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dd36      	ble.n	8007f3c <_dtoa_r+0x464>
 8007ece:	9b00      	ldr	r3, [sp, #0]
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	4659      	mov	r1, fp
 8007ed4:	1e5f      	subs	r7, r3, #1
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4b88      	ldr	r3, [pc, #544]	; (80080fc <_dtoa_r+0x624>)
 8007eda:	f7f8 fba5 	bl	8000628 <__aeabi_dmul>
 8007ede:	9e02      	ldr	r6, [sp, #8]
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	468b      	mov	fp, r1
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f7f8 fb34 	bl	8000554 <__aeabi_i2d>
 8007eec:	4652      	mov	r2, sl
 8007eee:	465b      	mov	r3, fp
 8007ef0:	f7f8 fb9a 	bl	8000628 <__aeabi_dmul>
 8007ef4:	4b82      	ldr	r3, [pc, #520]	; (8008100 <_dtoa_r+0x628>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f7f8 f9e0 	bl	80002bc <__adddf3>
 8007efc:	46d0      	mov	r8, sl
 8007efe:	46d9      	mov	r9, fp
 8007f00:	4682      	mov	sl, r0
 8007f02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	d158      	bne.n	8007fbc <_dtoa_r+0x4e4>
 8007f0a:	4b7e      	ldr	r3, [pc, #504]	; (8008104 <_dtoa_r+0x62c>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 f9d1 	bl	80002b8 <__aeabi_dsub>
 8007f16:	4652      	mov	r2, sl
 8007f18:	465b      	mov	r3, fp
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	4689      	mov	r9, r1
 8007f1e:	f7f8 fe13 	bl	8000b48 <__aeabi_dcmpgt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f040 8295 	bne.w	8008452 <_dtoa_r+0x97a>
 8007f28:	4652      	mov	r2, sl
 8007f2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f2e:	4640      	mov	r0, r8
 8007f30:	4649      	mov	r1, r9
 8007f32:	f7f8 fdeb 	bl	8000b0c <__aeabi_dcmplt>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f040 8289 	bne.w	800844e <_dtoa_r+0x976>
 8007f3c:	ec5b ab19 	vmov	sl, fp, d9
 8007f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f2c0 8148 	blt.w	80081d8 <_dtoa_r+0x700>
 8007f48:	9a00      	ldr	r2, [sp, #0]
 8007f4a:	2a0e      	cmp	r2, #14
 8007f4c:	f300 8144 	bgt.w	80081d8 <_dtoa_r+0x700>
 8007f50:	4b67      	ldr	r3, [pc, #412]	; (80080f0 <_dtoa_r+0x618>)
 8007f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f280 80d5 	bge.w	800810c <_dtoa_r+0x634>
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f300 80d1 	bgt.w	800810c <_dtoa_r+0x634>
 8007f6a:	f040 826f 	bne.w	800844c <_dtoa_r+0x974>
 8007f6e:	4b65      	ldr	r3, [pc, #404]	; (8008104 <_dtoa_r+0x62c>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 fb57 	bl	8000628 <__aeabi_dmul>
 8007f7a:	4652      	mov	r2, sl
 8007f7c:	465b      	mov	r3, fp
 8007f7e:	f7f8 fdd9 	bl	8000b34 <__aeabi_dcmpge>
 8007f82:	9e03      	ldr	r6, [sp, #12]
 8007f84:	4637      	mov	r7, r6
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8245 	bne.w	8008416 <_dtoa_r+0x93e>
 8007f8c:	9d01      	ldr	r5, [sp, #4]
 8007f8e:	2331      	movs	r3, #49	; 0x31
 8007f90:	f805 3b01 	strb.w	r3, [r5], #1
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	3301      	adds	r3, #1
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	e240      	b.n	800841e <_dtoa_r+0x946>
 8007f9c:	07f2      	lsls	r2, r6, #31
 8007f9e:	d505      	bpl.n	8007fac <_dtoa_r+0x4d4>
 8007fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa4:	f7f8 fb40 	bl	8000628 <__aeabi_dmul>
 8007fa8:	3501      	adds	r5, #1
 8007faa:	2301      	movs	r3, #1
 8007fac:	1076      	asrs	r6, r6, #1
 8007fae:	3708      	adds	r7, #8
 8007fb0:	e777      	b.n	8007ea2 <_dtoa_r+0x3ca>
 8007fb2:	2502      	movs	r5, #2
 8007fb4:	e779      	b.n	8007eaa <_dtoa_r+0x3d2>
 8007fb6:	9f00      	ldr	r7, [sp, #0]
 8007fb8:	9e03      	ldr	r6, [sp, #12]
 8007fba:	e794      	b.n	8007ee6 <_dtoa_r+0x40e>
 8007fbc:	9901      	ldr	r1, [sp, #4]
 8007fbe:	4b4c      	ldr	r3, [pc, #304]	; (80080f0 <_dtoa_r+0x618>)
 8007fc0:	4431      	add	r1, r6
 8007fc2:	910d      	str	r1, [sp, #52]	; 0x34
 8007fc4:	9908      	ldr	r1, [sp, #32]
 8007fc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fce:	2900      	cmp	r1, #0
 8007fd0:	d043      	beq.n	800805a <_dtoa_r+0x582>
 8007fd2:	494d      	ldr	r1, [pc, #308]	; (8008108 <_dtoa_r+0x630>)
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f7f8 fc51 	bl	800087c <__aeabi_ddiv>
 8007fda:	4652      	mov	r2, sl
 8007fdc:	465b      	mov	r3, fp
 8007fde:	f7f8 f96b 	bl	80002b8 <__aeabi_dsub>
 8007fe2:	9d01      	ldr	r5, [sp, #4]
 8007fe4:	4682      	mov	sl, r0
 8007fe6:	468b      	mov	fp, r1
 8007fe8:	4649      	mov	r1, r9
 8007fea:	4640      	mov	r0, r8
 8007fec:	f7f8 fdcc 	bl	8000b88 <__aeabi_d2iz>
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	f7f8 faaf 	bl	8000554 <__aeabi_i2d>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	f7f8 f95b 	bl	80002b8 <__aeabi_dsub>
 8008002:	3630      	adds	r6, #48	; 0x30
 8008004:	f805 6b01 	strb.w	r6, [r5], #1
 8008008:	4652      	mov	r2, sl
 800800a:	465b      	mov	r3, fp
 800800c:	4680      	mov	r8, r0
 800800e:	4689      	mov	r9, r1
 8008010:	f7f8 fd7c 	bl	8000b0c <__aeabi_dcmplt>
 8008014:	2800      	cmp	r0, #0
 8008016:	d163      	bne.n	80080e0 <_dtoa_r+0x608>
 8008018:	4642      	mov	r2, r8
 800801a:	464b      	mov	r3, r9
 800801c:	4936      	ldr	r1, [pc, #216]	; (80080f8 <_dtoa_r+0x620>)
 800801e:	2000      	movs	r0, #0
 8008020:	f7f8 f94a 	bl	80002b8 <__aeabi_dsub>
 8008024:	4652      	mov	r2, sl
 8008026:	465b      	mov	r3, fp
 8008028:	f7f8 fd70 	bl	8000b0c <__aeabi_dcmplt>
 800802c:	2800      	cmp	r0, #0
 800802e:	f040 80b5 	bne.w	800819c <_dtoa_r+0x6c4>
 8008032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008034:	429d      	cmp	r5, r3
 8008036:	d081      	beq.n	8007f3c <_dtoa_r+0x464>
 8008038:	4b30      	ldr	r3, [pc, #192]	; (80080fc <_dtoa_r+0x624>)
 800803a:	2200      	movs	r2, #0
 800803c:	4650      	mov	r0, sl
 800803e:	4659      	mov	r1, fp
 8008040:	f7f8 faf2 	bl	8000628 <__aeabi_dmul>
 8008044:	4b2d      	ldr	r3, [pc, #180]	; (80080fc <_dtoa_r+0x624>)
 8008046:	4682      	mov	sl, r0
 8008048:	468b      	mov	fp, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	2200      	movs	r2, #0
 8008050:	f7f8 faea 	bl	8000628 <__aeabi_dmul>
 8008054:	4680      	mov	r8, r0
 8008056:	4689      	mov	r9, r1
 8008058:	e7c6      	b.n	8007fe8 <_dtoa_r+0x510>
 800805a:	4650      	mov	r0, sl
 800805c:	4659      	mov	r1, fp
 800805e:	f7f8 fae3 	bl	8000628 <__aeabi_dmul>
 8008062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008064:	9d01      	ldr	r5, [sp, #4]
 8008066:	930f      	str	r3, [sp, #60]	; 0x3c
 8008068:	4682      	mov	sl, r0
 800806a:	468b      	mov	fp, r1
 800806c:	4649      	mov	r1, r9
 800806e:	4640      	mov	r0, r8
 8008070:	f7f8 fd8a 	bl	8000b88 <__aeabi_d2iz>
 8008074:	4606      	mov	r6, r0
 8008076:	f7f8 fa6d 	bl	8000554 <__aeabi_i2d>
 800807a:	3630      	adds	r6, #48	; 0x30
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 f918 	bl	80002b8 <__aeabi_dsub>
 8008088:	f805 6b01 	strb.w	r6, [r5], #1
 800808c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800808e:	429d      	cmp	r5, r3
 8008090:	4680      	mov	r8, r0
 8008092:	4689      	mov	r9, r1
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	d124      	bne.n	80080e4 <_dtoa_r+0x60c>
 800809a:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <_dtoa_r+0x630>)
 800809c:	4650      	mov	r0, sl
 800809e:	4659      	mov	r1, fp
 80080a0:	f7f8 f90c 	bl	80002bc <__adddf3>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4640      	mov	r0, r8
 80080aa:	4649      	mov	r1, r9
 80080ac:	f7f8 fd4c 	bl	8000b48 <__aeabi_dcmpgt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d173      	bne.n	800819c <_dtoa_r+0x6c4>
 80080b4:	4652      	mov	r2, sl
 80080b6:	465b      	mov	r3, fp
 80080b8:	4913      	ldr	r1, [pc, #76]	; (8008108 <_dtoa_r+0x630>)
 80080ba:	2000      	movs	r0, #0
 80080bc:	f7f8 f8fc 	bl	80002b8 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4640      	mov	r0, r8
 80080c6:	4649      	mov	r1, r9
 80080c8:	f7f8 fd20 	bl	8000b0c <__aeabi_dcmplt>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f43f af35 	beq.w	8007f3c <_dtoa_r+0x464>
 80080d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080d4:	1e6b      	subs	r3, r5, #1
 80080d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080dc:	2b30      	cmp	r3, #48	; 0x30
 80080de:	d0f8      	beq.n	80080d2 <_dtoa_r+0x5fa>
 80080e0:	9700      	str	r7, [sp, #0]
 80080e2:	e049      	b.n	8008178 <_dtoa_r+0x6a0>
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <_dtoa_r+0x624>)
 80080e6:	f7f8 fa9f 	bl	8000628 <__aeabi_dmul>
 80080ea:	4680      	mov	r8, r0
 80080ec:	4689      	mov	r9, r1
 80080ee:	e7bd      	b.n	800806c <_dtoa_r+0x594>
 80080f0:	0800a098 	.word	0x0800a098
 80080f4:	0800a070 	.word	0x0800a070
 80080f8:	3ff00000 	.word	0x3ff00000
 80080fc:	40240000 	.word	0x40240000
 8008100:	401c0000 	.word	0x401c0000
 8008104:	40140000 	.word	0x40140000
 8008108:	3fe00000 	.word	0x3fe00000
 800810c:	9d01      	ldr	r5, [sp, #4]
 800810e:	4656      	mov	r6, sl
 8008110:	465f      	mov	r7, fp
 8008112:	4642      	mov	r2, r8
 8008114:	464b      	mov	r3, r9
 8008116:	4630      	mov	r0, r6
 8008118:	4639      	mov	r1, r7
 800811a:	f7f8 fbaf 	bl	800087c <__aeabi_ddiv>
 800811e:	f7f8 fd33 	bl	8000b88 <__aeabi_d2iz>
 8008122:	4682      	mov	sl, r0
 8008124:	f7f8 fa16 	bl	8000554 <__aeabi_i2d>
 8008128:	4642      	mov	r2, r8
 800812a:	464b      	mov	r3, r9
 800812c:	f7f8 fa7c 	bl	8000628 <__aeabi_dmul>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4630      	mov	r0, r6
 8008136:	4639      	mov	r1, r7
 8008138:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800813c:	f7f8 f8bc 	bl	80002b8 <__aeabi_dsub>
 8008140:	f805 6b01 	strb.w	r6, [r5], #1
 8008144:	9e01      	ldr	r6, [sp, #4]
 8008146:	9f03      	ldr	r7, [sp, #12]
 8008148:	1bae      	subs	r6, r5, r6
 800814a:	42b7      	cmp	r7, r6
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	d135      	bne.n	80081be <_dtoa_r+0x6e6>
 8008152:	f7f8 f8b3 	bl	80002bc <__adddf3>
 8008156:	4642      	mov	r2, r8
 8008158:	464b      	mov	r3, r9
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	f7f8 fcf3 	bl	8000b48 <__aeabi_dcmpgt>
 8008162:	b9d0      	cbnz	r0, 800819a <_dtoa_r+0x6c2>
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	4630      	mov	r0, r6
 800816a:	4639      	mov	r1, r7
 800816c:	f7f8 fcc4 	bl	8000af8 <__aeabi_dcmpeq>
 8008170:	b110      	cbz	r0, 8008178 <_dtoa_r+0x6a0>
 8008172:	f01a 0f01 	tst.w	sl, #1
 8008176:	d110      	bne.n	800819a <_dtoa_r+0x6c2>
 8008178:	4620      	mov	r0, r4
 800817a:	ee18 1a10 	vmov	r1, s16
 800817e:	f000 faf3 	bl	8008768 <_Bfree>
 8008182:	2300      	movs	r3, #0
 8008184:	9800      	ldr	r0, [sp, #0]
 8008186:	702b      	strb	r3, [r5, #0]
 8008188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800818a:	3001      	adds	r0, #1
 800818c:	6018      	str	r0, [r3, #0]
 800818e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008190:	2b00      	cmp	r3, #0
 8008192:	f43f acf1 	beq.w	8007b78 <_dtoa_r+0xa0>
 8008196:	601d      	str	r5, [r3, #0]
 8008198:	e4ee      	b.n	8007b78 <_dtoa_r+0xa0>
 800819a:	9f00      	ldr	r7, [sp, #0]
 800819c:	462b      	mov	r3, r5
 800819e:	461d      	mov	r5, r3
 80081a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081a4:	2a39      	cmp	r2, #57	; 0x39
 80081a6:	d106      	bne.n	80081b6 <_dtoa_r+0x6de>
 80081a8:	9a01      	ldr	r2, [sp, #4]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d1f7      	bne.n	800819e <_dtoa_r+0x6c6>
 80081ae:	9901      	ldr	r1, [sp, #4]
 80081b0:	2230      	movs	r2, #48	; 0x30
 80081b2:	3701      	adds	r7, #1
 80081b4:	700a      	strb	r2, [r1, #0]
 80081b6:	781a      	ldrb	r2, [r3, #0]
 80081b8:	3201      	adds	r2, #1
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	e790      	b.n	80080e0 <_dtoa_r+0x608>
 80081be:	4ba6      	ldr	r3, [pc, #664]	; (8008458 <_dtoa_r+0x980>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	f7f8 fa31 	bl	8000628 <__aeabi_dmul>
 80081c6:	2200      	movs	r2, #0
 80081c8:	2300      	movs	r3, #0
 80081ca:	4606      	mov	r6, r0
 80081cc:	460f      	mov	r7, r1
 80081ce:	f7f8 fc93 	bl	8000af8 <__aeabi_dcmpeq>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d09d      	beq.n	8008112 <_dtoa_r+0x63a>
 80081d6:	e7cf      	b.n	8008178 <_dtoa_r+0x6a0>
 80081d8:	9a08      	ldr	r2, [sp, #32]
 80081da:	2a00      	cmp	r2, #0
 80081dc:	f000 80d7 	beq.w	800838e <_dtoa_r+0x8b6>
 80081e0:	9a06      	ldr	r2, [sp, #24]
 80081e2:	2a01      	cmp	r2, #1
 80081e4:	f300 80ba 	bgt.w	800835c <_dtoa_r+0x884>
 80081e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	f000 80b2 	beq.w	8008354 <_dtoa_r+0x87c>
 80081f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081f4:	9e07      	ldr	r6, [sp, #28]
 80081f6:	9d04      	ldr	r5, [sp, #16]
 80081f8:	9a04      	ldr	r2, [sp, #16]
 80081fa:	441a      	add	r2, r3
 80081fc:	9204      	str	r2, [sp, #16]
 80081fe:	9a05      	ldr	r2, [sp, #20]
 8008200:	2101      	movs	r1, #1
 8008202:	441a      	add	r2, r3
 8008204:	4620      	mov	r0, r4
 8008206:	9205      	str	r2, [sp, #20]
 8008208:	f000 fb66 	bl	80088d8 <__i2b>
 800820c:	4607      	mov	r7, r0
 800820e:	2d00      	cmp	r5, #0
 8008210:	dd0c      	ble.n	800822c <_dtoa_r+0x754>
 8008212:	9b05      	ldr	r3, [sp, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	dd09      	ble.n	800822c <_dtoa_r+0x754>
 8008218:	42ab      	cmp	r3, r5
 800821a:	9a04      	ldr	r2, [sp, #16]
 800821c:	bfa8      	it	ge
 800821e:	462b      	movge	r3, r5
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	9204      	str	r2, [sp, #16]
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	1aed      	subs	r5, r5, r3
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	b31b      	cbz	r3, 8008278 <_dtoa_r+0x7a0>
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 80af 	beq.w	8008396 <_dtoa_r+0x8be>
 8008238:	2e00      	cmp	r6, #0
 800823a:	dd13      	ble.n	8008264 <_dtoa_r+0x78c>
 800823c:	4639      	mov	r1, r7
 800823e:	4632      	mov	r2, r6
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fc09 	bl	8008a58 <__pow5mult>
 8008246:	ee18 2a10 	vmov	r2, s16
 800824a:	4601      	mov	r1, r0
 800824c:	4607      	mov	r7, r0
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fb58 	bl	8008904 <__multiply>
 8008254:	ee18 1a10 	vmov	r1, s16
 8008258:	4680      	mov	r8, r0
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fa84 	bl	8008768 <_Bfree>
 8008260:	ee08 8a10 	vmov	s16, r8
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	1b9a      	subs	r2, r3, r6
 8008268:	d006      	beq.n	8008278 <_dtoa_r+0x7a0>
 800826a:	ee18 1a10 	vmov	r1, s16
 800826e:	4620      	mov	r0, r4
 8008270:	f000 fbf2 	bl	8008a58 <__pow5mult>
 8008274:	ee08 0a10 	vmov	s16, r0
 8008278:	2101      	movs	r1, #1
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fb2c 	bl	80088d8 <__i2b>
 8008280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	4606      	mov	r6, r0
 8008286:	f340 8088 	ble.w	800839a <_dtoa_r+0x8c2>
 800828a:	461a      	mov	r2, r3
 800828c:	4601      	mov	r1, r0
 800828e:	4620      	mov	r0, r4
 8008290:	f000 fbe2 	bl	8008a58 <__pow5mult>
 8008294:	9b06      	ldr	r3, [sp, #24]
 8008296:	2b01      	cmp	r3, #1
 8008298:	4606      	mov	r6, r0
 800829a:	f340 8081 	ble.w	80083a0 <_dtoa_r+0x8c8>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	6933      	ldr	r3, [r6, #16]
 80082a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082a8:	6918      	ldr	r0, [r3, #16]
 80082aa:	f000 fac5 	bl	8008838 <__hi0bits>
 80082ae:	f1c0 0020 	rsb	r0, r0, #32
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	4418      	add	r0, r3
 80082b6:	f010 001f 	ands.w	r0, r0, #31
 80082ba:	f000 8092 	beq.w	80083e2 <_dtoa_r+0x90a>
 80082be:	f1c0 0320 	rsb	r3, r0, #32
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	f340 808a 	ble.w	80083dc <_dtoa_r+0x904>
 80082c8:	f1c0 001c 	rsb	r0, r0, #28
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	4403      	add	r3, r0
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	9b05      	ldr	r3, [sp, #20]
 80082d4:	4403      	add	r3, r0
 80082d6:	4405      	add	r5, r0
 80082d8:	9305      	str	r3, [sp, #20]
 80082da:	9b04      	ldr	r3, [sp, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dd07      	ble.n	80082f0 <_dtoa_r+0x818>
 80082e0:	ee18 1a10 	vmov	r1, s16
 80082e4:	461a      	mov	r2, r3
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 fc10 	bl	8008b0c <__lshift>
 80082ec:	ee08 0a10 	vmov	s16, r0
 80082f0:	9b05      	ldr	r3, [sp, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	dd05      	ble.n	8008302 <_dtoa_r+0x82a>
 80082f6:	4631      	mov	r1, r6
 80082f8:	461a      	mov	r2, r3
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fc06 	bl	8008b0c <__lshift>
 8008300:	4606      	mov	r6, r0
 8008302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d06e      	beq.n	80083e6 <_dtoa_r+0x90e>
 8008308:	ee18 0a10 	vmov	r0, s16
 800830c:	4631      	mov	r1, r6
 800830e:	f000 fc6d 	bl	8008bec <__mcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	da67      	bge.n	80083e6 <_dtoa_r+0x90e>
 8008316:	9b00      	ldr	r3, [sp, #0]
 8008318:	3b01      	subs	r3, #1
 800831a:	ee18 1a10 	vmov	r1, s16
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	220a      	movs	r2, #10
 8008322:	2300      	movs	r3, #0
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fa41 	bl	80087ac <__multadd>
 800832a:	9b08      	ldr	r3, [sp, #32]
 800832c:	ee08 0a10 	vmov	s16, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 81b1 	beq.w	8008698 <_dtoa_r+0xbc0>
 8008336:	2300      	movs	r3, #0
 8008338:	4639      	mov	r1, r7
 800833a:	220a      	movs	r2, #10
 800833c:	4620      	mov	r0, r4
 800833e:	f000 fa35 	bl	80087ac <__multadd>
 8008342:	9b02      	ldr	r3, [sp, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	4607      	mov	r7, r0
 8008348:	f300 808e 	bgt.w	8008468 <_dtoa_r+0x990>
 800834c:	9b06      	ldr	r3, [sp, #24]
 800834e:	2b02      	cmp	r3, #2
 8008350:	dc51      	bgt.n	80083f6 <_dtoa_r+0x91e>
 8008352:	e089      	b.n	8008468 <_dtoa_r+0x990>
 8008354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800835a:	e74b      	b.n	80081f4 <_dtoa_r+0x71c>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	1e5e      	subs	r6, r3, #1
 8008360:	9b07      	ldr	r3, [sp, #28]
 8008362:	42b3      	cmp	r3, r6
 8008364:	bfbf      	itttt	lt
 8008366:	9b07      	ldrlt	r3, [sp, #28]
 8008368:	9607      	strlt	r6, [sp, #28]
 800836a:	1af2      	sublt	r2, r6, r3
 800836c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800836e:	bfb6      	itet	lt
 8008370:	189b      	addlt	r3, r3, r2
 8008372:	1b9e      	subge	r6, r3, r6
 8008374:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	bfb8      	it	lt
 800837a:	2600      	movlt	r6, #0
 800837c:	2b00      	cmp	r3, #0
 800837e:	bfb7      	itett	lt
 8008380:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008384:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008388:	1a9d      	sublt	r5, r3, r2
 800838a:	2300      	movlt	r3, #0
 800838c:	e734      	b.n	80081f8 <_dtoa_r+0x720>
 800838e:	9e07      	ldr	r6, [sp, #28]
 8008390:	9d04      	ldr	r5, [sp, #16]
 8008392:	9f08      	ldr	r7, [sp, #32]
 8008394:	e73b      	b.n	800820e <_dtoa_r+0x736>
 8008396:	9a07      	ldr	r2, [sp, #28]
 8008398:	e767      	b.n	800826a <_dtoa_r+0x792>
 800839a:	9b06      	ldr	r3, [sp, #24]
 800839c:	2b01      	cmp	r3, #1
 800839e:	dc18      	bgt.n	80083d2 <_dtoa_r+0x8fa>
 80083a0:	f1ba 0f00 	cmp.w	sl, #0
 80083a4:	d115      	bne.n	80083d2 <_dtoa_r+0x8fa>
 80083a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083aa:	b993      	cbnz	r3, 80083d2 <_dtoa_r+0x8fa>
 80083ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083b0:	0d1b      	lsrs	r3, r3, #20
 80083b2:	051b      	lsls	r3, r3, #20
 80083b4:	b183      	cbz	r3, 80083d8 <_dtoa_r+0x900>
 80083b6:	9b04      	ldr	r3, [sp, #16]
 80083b8:	3301      	adds	r3, #1
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	9b05      	ldr	r3, [sp, #20]
 80083be:	3301      	adds	r3, #1
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	f04f 0801 	mov.w	r8, #1
 80083c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f47f af6a 	bne.w	80082a2 <_dtoa_r+0x7ca>
 80083ce:	2001      	movs	r0, #1
 80083d0:	e76f      	b.n	80082b2 <_dtoa_r+0x7da>
 80083d2:	f04f 0800 	mov.w	r8, #0
 80083d6:	e7f6      	b.n	80083c6 <_dtoa_r+0x8ee>
 80083d8:	4698      	mov	r8, r3
 80083da:	e7f4      	b.n	80083c6 <_dtoa_r+0x8ee>
 80083dc:	f43f af7d 	beq.w	80082da <_dtoa_r+0x802>
 80083e0:	4618      	mov	r0, r3
 80083e2:	301c      	adds	r0, #28
 80083e4:	e772      	b.n	80082cc <_dtoa_r+0x7f4>
 80083e6:	9b03      	ldr	r3, [sp, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc37      	bgt.n	800845c <_dtoa_r+0x984>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	dd34      	ble.n	800845c <_dtoa_r+0x984>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	9302      	str	r3, [sp, #8]
 80083f6:	9b02      	ldr	r3, [sp, #8]
 80083f8:	b96b      	cbnz	r3, 8008416 <_dtoa_r+0x93e>
 80083fa:	4631      	mov	r1, r6
 80083fc:	2205      	movs	r2, #5
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 f9d4 	bl	80087ac <__multadd>
 8008404:	4601      	mov	r1, r0
 8008406:	4606      	mov	r6, r0
 8008408:	ee18 0a10 	vmov	r0, s16
 800840c:	f000 fbee 	bl	8008bec <__mcmp>
 8008410:	2800      	cmp	r0, #0
 8008412:	f73f adbb 	bgt.w	8007f8c <_dtoa_r+0x4b4>
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	9d01      	ldr	r5, [sp, #4]
 800841a:	43db      	mvns	r3, r3
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	4631      	mov	r1, r6
 8008424:	4620      	mov	r0, r4
 8008426:	f000 f99f 	bl	8008768 <_Bfree>
 800842a:	2f00      	cmp	r7, #0
 800842c:	f43f aea4 	beq.w	8008178 <_dtoa_r+0x6a0>
 8008430:	f1b8 0f00 	cmp.w	r8, #0
 8008434:	d005      	beq.n	8008442 <_dtoa_r+0x96a>
 8008436:	45b8      	cmp	r8, r7
 8008438:	d003      	beq.n	8008442 <_dtoa_r+0x96a>
 800843a:	4641      	mov	r1, r8
 800843c:	4620      	mov	r0, r4
 800843e:	f000 f993 	bl	8008768 <_Bfree>
 8008442:	4639      	mov	r1, r7
 8008444:	4620      	mov	r0, r4
 8008446:	f000 f98f 	bl	8008768 <_Bfree>
 800844a:	e695      	b.n	8008178 <_dtoa_r+0x6a0>
 800844c:	2600      	movs	r6, #0
 800844e:	4637      	mov	r7, r6
 8008450:	e7e1      	b.n	8008416 <_dtoa_r+0x93e>
 8008452:	9700      	str	r7, [sp, #0]
 8008454:	4637      	mov	r7, r6
 8008456:	e599      	b.n	8007f8c <_dtoa_r+0x4b4>
 8008458:	40240000 	.word	0x40240000
 800845c:	9b08      	ldr	r3, [sp, #32]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80ca 	beq.w	80085f8 <_dtoa_r+0xb20>
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	2d00      	cmp	r5, #0
 800846a:	dd05      	ble.n	8008478 <_dtoa_r+0x9a0>
 800846c:	4639      	mov	r1, r7
 800846e:	462a      	mov	r2, r5
 8008470:	4620      	mov	r0, r4
 8008472:	f000 fb4b 	bl	8008b0c <__lshift>
 8008476:	4607      	mov	r7, r0
 8008478:	f1b8 0f00 	cmp.w	r8, #0
 800847c:	d05b      	beq.n	8008536 <_dtoa_r+0xa5e>
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	4620      	mov	r0, r4
 8008482:	f000 f931 	bl	80086e8 <_Balloc>
 8008486:	4605      	mov	r5, r0
 8008488:	b928      	cbnz	r0, 8008496 <_dtoa_r+0x9be>
 800848a:	4b87      	ldr	r3, [pc, #540]	; (80086a8 <_dtoa_r+0xbd0>)
 800848c:	4602      	mov	r2, r0
 800848e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008492:	f7ff bb3b 	b.w	8007b0c <_dtoa_r+0x34>
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	3202      	adds	r2, #2
 800849a:	0092      	lsls	r2, r2, #2
 800849c:	f107 010c 	add.w	r1, r7, #12
 80084a0:	300c      	adds	r0, #12
 80084a2:	f000 f913 	bl	80086cc <memcpy>
 80084a6:	2201      	movs	r2, #1
 80084a8:	4629      	mov	r1, r5
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 fb2e 	bl	8008b0c <__lshift>
 80084b0:	9b01      	ldr	r3, [sp, #4]
 80084b2:	f103 0901 	add.w	r9, r3, #1
 80084b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80084ba:	4413      	add	r3, r2
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	f00a 0301 	and.w	r3, sl, #1
 80084c2:	46b8      	mov	r8, r7
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	4607      	mov	r7, r0
 80084c8:	4631      	mov	r1, r6
 80084ca:	ee18 0a10 	vmov	r0, s16
 80084ce:	f7ff fa75 	bl	80079bc <quorem>
 80084d2:	4641      	mov	r1, r8
 80084d4:	9002      	str	r0, [sp, #8]
 80084d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80084da:	ee18 0a10 	vmov	r0, s16
 80084de:	f000 fb85 	bl	8008bec <__mcmp>
 80084e2:	463a      	mov	r2, r7
 80084e4:	9003      	str	r0, [sp, #12]
 80084e6:	4631      	mov	r1, r6
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fb9b 	bl	8008c24 <__mdiff>
 80084ee:	68c2      	ldr	r2, [r0, #12]
 80084f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80084f4:	4605      	mov	r5, r0
 80084f6:	bb02      	cbnz	r2, 800853a <_dtoa_r+0xa62>
 80084f8:	4601      	mov	r1, r0
 80084fa:	ee18 0a10 	vmov	r0, s16
 80084fe:	f000 fb75 	bl	8008bec <__mcmp>
 8008502:	4602      	mov	r2, r0
 8008504:	4629      	mov	r1, r5
 8008506:	4620      	mov	r0, r4
 8008508:	9207      	str	r2, [sp, #28]
 800850a:	f000 f92d 	bl	8008768 <_Bfree>
 800850e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008512:	ea43 0102 	orr.w	r1, r3, r2
 8008516:	9b04      	ldr	r3, [sp, #16]
 8008518:	430b      	orrs	r3, r1
 800851a:	464d      	mov	r5, r9
 800851c:	d10f      	bne.n	800853e <_dtoa_r+0xa66>
 800851e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008522:	d02a      	beq.n	800857a <_dtoa_r+0xaa2>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	dd02      	ble.n	8008530 <_dtoa_r+0xa58>
 800852a:	9b02      	ldr	r3, [sp, #8]
 800852c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008530:	f88b a000 	strb.w	sl, [fp]
 8008534:	e775      	b.n	8008422 <_dtoa_r+0x94a>
 8008536:	4638      	mov	r0, r7
 8008538:	e7ba      	b.n	80084b0 <_dtoa_r+0x9d8>
 800853a:	2201      	movs	r2, #1
 800853c:	e7e2      	b.n	8008504 <_dtoa_r+0xa2c>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	db04      	blt.n	800854e <_dtoa_r+0xa76>
 8008544:	9906      	ldr	r1, [sp, #24]
 8008546:	430b      	orrs	r3, r1
 8008548:	9904      	ldr	r1, [sp, #16]
 800854a:	430b      	orrs	r3, r1
 800854c:	d122      	bne.n	8008594 <_dtoa_r+0xabc>
 800854e:	2a00      	cmp	r2, #0
 8008550:	ddee      	ble.n	8008530 <_dtoa_r+0xa58>
 8008552:	ee18 1a10 	vmov	r1, s16
 8008556:	2201      	movs	r2, #1
 8008558:	4620      	mov	r0, r4
 800855a:	f000 fad7 	bl	8008b0c <__lshift>
 800855e:	4631      	mov	r1, r6
 8008560:	ee08 0a10 	vmov	s16, r0
 8008564:	f000 fb42 	bl	8008bec <__mcmp>
 8008568:	2800      	cmp	r0, #0
 800856a:	dc03      	bgt.n	8008574 <_dtoa_r+0xa9c>
 800856c:	d1e0      	bne.n	8008530 <_dtoa_r+0xa58>
 800856e:	f01a 0f01 	tst.w	sl, #1
 8008572:	d0dd      	beq.n	8008530 <_dtoa_r+0xa58>
 8008574:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008578:	d1d7      	bne.n	800852a <_dtoa_r+0xa52>
 800857a:	2339      	movs	r3, #57	; 0x39
 800857c:	f88b 3000 	strb.w	r3, [fp]
 8008580:	462b      	mov	r3, r5
 8008582:	461d      	mov	r5, r3
 8008584:	3b01      	subs	r3, #1
 8008586:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800858a:	2a39      	cmp	r2, #57	; 0x39
 800858c:	d071      	beq.n	8008672 <_dtoa_r+0xb9a>
 800858e:	3201      	adds	r2, #1
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	e746      	b.n	8008422 <_dtoa_r+0x94a>
 8008594:	2a00      	cmp	r2, #0
 8008596:	dd07      	ble.n	80085a8 <_dtoa_r+0xad0>
 8008598:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800859c:	d0ed      	beq.n	800857a <_dtoa_r+0xaa2>
 800859e:	f10a 0301 	add.w	r3, sl, #1
 80085a2:	f88b 3000 	strb.w	r3, [fp]
 80085a6:	e73c      	b.n	8008422 <_dtoa_r+0x94a>
 80085a8:	9b05      	ldr	r3, [sp, #20]
 80085aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085ae:	4599      	cmp	r9, r3
 80085b0:	d047      	beq.n	8008642 <_dtoa_r+0xb6a>
 80085b2:	ee18 1a10 	vmov	r1, s16
 80085b6:	2300      	movs	r3, #0
 80085b8:	220a      	movs	r2, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 f8f6 	bl	80087ac <__multadd>
 80085c0:	45b8      	cmp	r8, r7
 80085c2:	ee08 0a10 	vmov	s16, r0
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	f04f 020a 	mov.w	r2, #10
 80085ce:	4641      	mov	r1, r8
 80085d0:	4620      	mov	r0, r4
 80085d2:	d106      	bne.n	80085e2 <_dtoa_r+0xb0a>
 80085d4:	f000 f8ea 	bl	80087ac <__multadd>
 80085d8:	4680      	mov	r8, r0
 80085da:	4607      	mov	r7, r0
 80085dc:	f109 0901 	add.w	r9, r9, #1
 80085e0:	e772      	b.n	80084c8 <_dtoa_r+0x9f0>
 80085e2:	f000 f8e3 	bl	80087ac <__multadd>
 80085e6:	4639      	mov	r1, r7
 80085e8:	4680      	mov	r8, r0
 80085ea:	2300      	movs	r3, #0
 80085ec:	220a      	movs	r2, #10
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 f8dc 	bl	80087ac <__multadd>
 80085f4:	4607      	mov	r7, r0
 80085f6:	e7f1      	b.n	80085dc <_dtoa_r+0xb04>
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	9302      	str	r3, [sp, #8]
 80085fc:	9d01      	ldr	r5, [sp, #4]
 80085fe:	ee18 0a10 	vmov	r0, s16
 8008602:	4631      	mov	r1, r6
 8008604:	f7ff f9da 	bl	80079bc <quorem>
 8008608:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	f805 ab01 	strb.w	sl, [r5], #1
 8008612:	1aea      	subs	r2, r5, r3
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	4293      	cmp	r3, r2
 8008618:	dd09      	ble.n	800862e <_dtoa_r+0xb56>
 800861a:	ee18 1a10 	vmov	r1, s16
 800861e:	2300      	movs	r3, #0
 8008620:	220a      	movs	r2, #10
 8008622:	4620      	mov	r0, r4
 8008624:	f000 f8c2 	bl	80087ac <__multadd>
 8008628:	ee08 0a10 	vmov	s16, r0
 800862c:	e7e7      	b.n	80085fe <_dtoa_r+0xb26>
 800862e:	9b02      	ldr	r3, [sp, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	bfc8      	it	gt
 8008634:	461d      	movgt	r5, r3
 8008636:	9b01      	ldr	r3, [sp, #4]
 8008638:	bfd8      	it	le
 800863a:	2501      	movle	r5, #1
 800863c:	441d      	add	r5, r3
 800863e:	f04f 0800 	mov.w	r8, #0
 8008642:	ee18 1a10 	vmov	r1, s16
 8008646:	2201      	movs	r2, #1
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fa5f 	bl	8008b0c <__lshift>
 800864e:	4631      	mov	r1, r6
 8008650:	ee08 0a10 	vmov	s16, r0
 8008654:	f000 faca 	bl	8008bec <__mcmp>
 8008658:	2800      	cmp	r0, #0
 800865a:	dc91      	bgt.n	8008580 <_dtoa_r+0xaa8>
 800865c:	d102      	bne.n	8008664 <_dtoa_r+0xb8c>
 800865e:	f01a 0f01 	tst.w	sl, #1
 8008662:	d18d      	bne.n	8008580 <_dtoa_r+0xaa8>
 8008664:	462b      	mov	r3, r5
 8008666:	461d      	mov	r5, r3
 8008668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800866c:	2a30      	cmp	r2, #48	; 0x30
 800866e:	d0fa      	beq.n	8008666 <_dtoa_r+0xb8e>
 8008670:	e6d7      	b.n	8008422 <_dtoa_r+0x94a>
 8008672:	9a01      	ldr	r2, [sp, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d184      	bne.n	8008582 <_dtoa_r+0xaaa>
 8008678:	9b00      	ldr	r3, [sp, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	2331      	movs	r3, #49	; 0x31
 8008680:	7013      	strb	r3, [r2, #0]
 8008682:	e6ce      	b.n	8008422 <_dtoa_r+0x94a>
 8008684:	4b09      	ldr	r3, [pc, #36]	; (80086ac <_dtoa_r+0xbd4>)
 8008686:	f7ff ba95 	b.w	8007bb4 <_dtoa_r+0xdc>
 800868a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800868c:	2b00      	cmp	r3, #0
 800868e:	f47f aa6e 	bne.w	8007b6e <_dtoa_r+0x96>
 8008692:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <_dtoa_r+0xbd8>)
 8008694:	f7ff ba8e 	b.w	8007bb4 <_dtoa_r+0xdc>
 8008698:	9b02      	ldr	r3, [sp, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	dcae      	bgt.n	80085fc <_dtoa_r+0xb24>
 800869e:	9b06      	ldr	r3, [sp, #24]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	f73f aea8 	bgt.w	80083f6 <_dtoa_r+0x91e>
 80086a6:	e7a9      	b.n	80085fc <_dtoa_r+0xb24>
 80086a8:	0800a003 	.word	0x0800a003
 80086ac:	08009f60 	.word	0x08009f60
 80086b0:	08009f84 	.word	0x08009f84

080086b4 <_localeconv_r>:
 80086b4:	4800      	ldr	r0, [pc, #0]	; (80086b8 <_localeconv_r+0x4>)
 80086b6:	4770      	bx	lr
 80086b8:	20000160 	.word	0x20000160

080086bc <malloc>:
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <malloc+0xc>)
 80086be:	4601      	mov	r1, r0
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f000 bc17 	b.w	8008ef4 <_malloc_r>
 80086c6:	bf00      	nop
 80086c8:	2000000c 	.word	0x2000000c

080086cc <memcpy>:
 80086cc:	440a      	add	r2, r1
 80086ce:	4291      	cmp	r1, r2
 80086d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086d4:	d100      	bne.n	80086d8 <memcpy+0xc>
 80086d6:	4770      	bx	lr
 80086d8:	b510      	push	{r4, lr}
 80086da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086e2:	4291      	cmp	r1, r2
 80086e4:	d1f9      	bne.n	80086da <memcpy+0xe>
 80086e6:	bd10      	pop	{r4, pc}

080086e8 <_Balloc>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086ec:	4604      	mov	r4, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	b976      	cbnz	r6, 8008710 <_Balloc+0x28>
 80086f2:	2010      	movs	r0, #16
 80086f4:	f7ff ffe2 	bl	80086bc <malloc>
 80086f8:	4602      	mov	r2, r0
 80086fa:	6260      	str	r0, [r4, #36]	; 0x24
 80086fc:	b920      	cbnz	r0, 8008708 <_Balloc+0x20>
 80086fe:	4b18      	ldr	r3, [pc, #96]	; (8008760 <_Balloc+0x78>)
 8008700:	4818      	ldr	r0, [pc, #96]	; (8008764 <_Balloc+0x7c>)
 8008702:	2166      	movs	r1, #102	; 0x66
 8008704:	f000 fdd6 	bl	80092b4 <__assert_func>
 8008708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800870c:	6006      	str	r6, [r0, #0]
 800870e:	60c6      	str	r6, [r0, #12]
 8008710:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008712:	68f3      	ldr	r3, [r6, #12]
 8008714:	b183      	cbz	r3, 8008738 <_Balloc+0x50>
 8008716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800871e:	b9b8      	cbnz	r0, 8008750 <_Balloc+0x68>
 8008720:	2101      	movs	r1, #1
 8008722:	fa01 f605 	lsl.w	r6, r1, r5
 8008726:	1d72      	adds	r2, r6, #5
 8008728:	0092      	lsls	r2, r2, #2
 800872a:	4620      	mov	r0, r4
 800872c:	f000 fb60 	bl	8008df0 <_calloc_r>
 8008730:	b160      	cbz	r0, 800874c <_Balloc+0x64>
 8008732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008736:	e00e      	b.n	8008756 <_Balloc+0x6e>
 8008738:	2221      	movs	r2, #33	; 0x21
 800873a:	2104      	movs	r1, #4
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fb57 	bl	8008df0 <_calloc_r>
 8008742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008744:	60f0      	str	r0, [r6, #12]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e4      	bne.n	8008716 <_Balloc+0x2e>
 800874c:	2000      	movs	r0, #0
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	6802      	ldr	r2, [r0, #0]
 8008752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008756:	2300      	movs	r3, #0
 8008758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800875c:	e7f7      	b.n	800874e <_Balloc+0x66>
 800875e:	bf00      	nop
 8008760:	08009f91 	.word	0x08009f91
 8008764:	0800a014 	.word	0x0800a014

08008768 <_Bfree>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	b976      	cbnz	r6, 8008790 <_Bfree+0x28>
 8008772:	2010      	movs	r0, #16
 8008774:	f7ff ffa2 	bl	80086bc <malloc>
 8008778:	4602      	mov	r2, r0
 800877a:	6268      	str	r0, [r5, #36]	; 0x24
 800877c:	b920      	cbnz	r0, 8008788 <_Bfree+0x20>
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <_Bfree+0x3c>)
 8008780:	4809      	ldr	r0, [pc, #36]	; (80087a8 <_Bfree+0x40>)
 8008782:	218a      	movs	r1, #138	; 0x8a
 8008784:	f000 fd96 	bl	80092b4 <__assert_func>
 8008788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800878c:	6006      	str	r6, [r0, #0]
 800878e:	60c6      	str	r6, [r0, #12]
 8008790:	b13c      	cbz	r4, 80087a2 <_Bfree+0x3a>
 8008792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008794:	6862      	ldr	r2, [r4, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800879c:	6021      	str	r1, [r4, #0]
 800879e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	08009f91 	.word	0x08009f91
 80087a8:	0800a014 	.word	0x0800a014

080087ac <__multadd>:
 80087ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b0:	690d      	ldr	r5, [r1, #16]
 80087b2:	4607      	mov	r7, r0
 80087b4:	460c      	mov	r4, r1
 80087b6:	461e      	mov	r6, r3
 80087b8:	f101 0c14 	add.w	ip, r1, #20
 80087bc:	2000      	movs	r0, #0
 80087be:	f8dc 3000 	ldr.w	r3, [ip]
 80087c2:	b299      	uxth	r1, r3
 80087c4:	fb02 6101 	mla	r1, r2, r1, r6
 80087c8:	0c1e      	lsrs	r6, r3, #16
 80087ca:	0c0b      	lsrs	r3, r1, #16
 80087cc:	fb02 3306 	mla	r3, r2, r6, r3
 80087d0:	b289      	uxth	r1, r1
 80087d2:	3001      	adds	r0, #1
 80087d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087d8:	4285      	cmp	r5, r0
 80087da:	f84c 1b04 	str.w	r1, [ip], #4
 80087de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087e2:	dcec      	bgt.n	80087be <__multadd+0x12>
 80087e4:	b30e      	cbz	r6, 800882a <__multadd+0x7e>
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	42ab      	cmp	r3, r5
 80087ea:	dc19      	bgt.n	8008820 <__multadd+0x74>
 80087ec:	6861      	ldr	r1, [r4, #4]
 80087ee:	4638      	mov	r0, r7
 80087f0:	3101      	adds	r1, #1
 80087f2:	f7ff ff79 	bl	80086e8 <_Balloc>
 80087f6:	4680      	mov	r8, r0
 80087f8:	b928      	cbnz	r0, 8008806 <__multadd+0x5a>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <__multadd+0x84>)
 80087fe:	480d      	ldr	r0, [pc, #52]	; (8008834 <__multadd+0x88>)
 8008800:	21b5      	movs	r1, #181	; 0xb5
 8008802:	f000 fd57 	bl	80092b4 <__assert_func>
 8008806:	6922      	ldr	r2, [r4, #16]
 8008808:	3202      	adds	r2, #2
 800880a:	f104 010c 	add.w	r1, r4, #12
 800880e:	0092      	lsls	r2, r2, #2
 8008810:	300c      	adds	r0, #12
 8008812:	f7ff ff5b 	bl	80086cc <memcpy>
 8008816:	4621      	mov	r1, r4
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff ffa5 	bl	8008768 <_Bfree>
 800881e:	4644      	mov	r4, r8
 8008820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008824:	3501      	adds	r5, #1
 8008826:	615e      	str	r6, [r3, #20]
 8008828:	6125      	str	r5, [r4, #16]
 800882a:	4620      	mov	r0, r4
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008830:	0800a003 	.word	0x0800a003
 8008834:	0800a014 	.word	0x0800a014

08008838 <__hi0bits>:
 8008838:	0c03      	lsrs	r3, r0, #16
 800883a:	041b      	lsls	r3, r3, #16
 800883c:	b9d3      	cbnz	r3, 8008874 <__hi0bits+0x3c>
 800883e:	0400      	lsls	r0, r0, #16
 8008840:	2310      	movs	r3, #16
 8008842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008846:	bf04      	itt	eq
 8008848:	0200      	lsleq	r0, r0, #8
 800884a:	3308      	addeq	r3, #8
 800884c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008850:	bf04      	itt	eq
 8008852:	0100      	lsleq	r0, r0, #4
 8008854:	3304      	addeq	r3, #4
 8008856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800885a:	bf04      	itt	eq
 800885c:	0080      	lsleq	r0, r0, #2
 800885e:	3302      	addeq	r3, #2
 8008860:	2800      	cmp	r0, #0
 8008862:	db05      	blt.n	8008870 <__hi0bits+0x38>
 8008864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008868:	f103 0301 	add.w	r3, r3, #1
 800886c:	bf08      	it	eq
 800886e:	2320      	moveq	r3, #32
 8008870:	4618      	mov	r0, r3
 8008872:	4770      	bx	lr
 8008874:	2300      	movs	r3, #0
 8008876:	e7e4      	b.n	8008842 <__hi0bits+0xa>

08008878 <__lo0bits>:
 8008878:	6803      	ldr	r3, [r0, #0]
 800887a:	f013 0207 	ands.w	r2, r3, #7
 800887e:	4601      	mov	r1, r0
 8008880:	d00b      	beq.n	800889a <__lo0bits+0x22>
 8008882:	07da      	lsls	r2, r3, #31
 8008884:	d423      	bmi.n	80088ce <__lo0bits+0x56>
 8008886:	0798      	lsls	r0, r3, #30
 8008888:	bf49      	itett	mi
 800888a:	085b      	lsrmi	r3, r3, #1
 800888c:	089b      	lsrpl	r3, r3, #2
 800888e:	2001      	movmi	r0, #1
 8008890:	600b      	strmi	r3, [r1, #0]
 8008892:	bf5c      	itt	pl
 8008894:	600b      	strpl	r3, [r1, #0]
 8008896:	2002      	movpl	r0, #2
 8008898:	4770      	bx	lr
 800889a:	b298      	uxth	r0, r3
 800889c:	b9a8      	cbnz	r0, 80088ca <__lo0bits+0x52>
 800889e:	0c1b      	lsrs	r3, r3, #16
 80088a0:	2010      	movs	r0, #16
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	b90a      	cbnz	r2, 80088aa <__lo0bits+0x32>
 80088a6:	3008      	adds	r0, #8
 80088a8:	0a1b      	lsrs	r3, r3, #8
 80088aa:	071a      	lsls	r2, r3, #28
 80088ac:	bf04      	itt	eq
 80088ae:	091b      	lsreq	r3, r3, #4
 80088b0:	3004      	addeq	r0, #4
 80088b2:	079a      	lsls	r2, r3, #30
 80088b4:	bf04      	itt	eq
 80088b6:	089b      	lsreq	r3, r3, #2
 80088b8:	3002      	addeq	r0, #2
 80088ba:	07da      	lsls	r2, r3, #31
 80088bc:	d403      	bmi.n	80088c6 <__lo0bits+0x4e>
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	f100 0001 	add.w	r0, r0, #1
 80088c4:	d005      	beq.n	80088d2 <__lo0bits+0x5a>
 80088c6:	600b      	str	r3, [r1, #0]
 80088c8:	4770      	bx	lr
 80088ca:	4610      	mov	r0, r2
 80088cc:	e7e9      	b.n	80088a2 <__lo0bits+0x2a>
 80088ce:	2000      	movs	r0, #0
 80088d0:	4770      	bx	lr
 80088d2:	2020      	movs	r0, #32
 80088d4:	4770      	bx	lr
	...

080088d8 <__i2b>:
 80088d8:	b510      	push	{r4, lr}
 80088da:	460c      	mov	r4, r1
 80088dc:	2101      	movs	r1, #1
 80088de:	f7ff ff03 	bl	80086e8 <_Balloc>
 80088e2:	4602      	mov	r2, r0
 80088e4:	b928      	cbnz	r0, 80088f2 <__i2b+0x1a>
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <__i2b+0x24>)
 80088e8:	4805      	ldr	r0, [pc, #20]	; (8008900 <__i2b+0x28>)
 80088ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088ee:	f000 fce1 	bl	80092b4 <__assert_func>
 80088f2:	2301      	movs	r3, #1
 80088f4:	6144      	str	r4, [r0, #20]
 80088f6:	6103      	str	r3, [r0, #16]
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	bf00      	nop
 80088fc:	0800a003 	.word	0x0800a003
 8008900:	0800a014 	.word	0x0800a014

08008904 <__multiply>:
 8008904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	4691      	mov	r9, r2
 800890a:	690a      	ldr	r2, [r1, #16]
 800890c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008910:	429a      	cmp	r2, r3
 8008912:	bfb8      	it	lt
 8008914:	460b      	movlt	r3, r1
 8008916:	460c      	mov	r4, r1
 8008918:	bfbc      	itt	lt
 800891a:	464c      	movlt	r4, r9
 800891c:	4699      	movlt	r9, r3
 800891e:	6927      	ldr	r7, [r4, #16]
 8008920:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	6861      	ldr	r1, [r4, #4]
 8008928:	eb07 060a 	add.w	r6, r7, sl
 800892c:	42b3      	cmp	r3, r6
 800892e:	b085      	sub	sp, #20
 8008930:	bfb8      	it	lt
 8008932:	3101      	addlt	r1, #1
 8008934:	f7ff fed8 	bl	80086e8 <_Balloc>
 8008938:	b930      	cbnz	r0, 8008948 <__multiply+0x44>
 800893a:	4602      	mov	r2, r0
 800893c:	4b44      	ldr	r3, [pc, #272]	; (8008a50 <__multiply+0x14c>)
 800893e:	4845      	ldr	r0, [pc, #276]	; (8008a54 <__multiply+0x150>)
 8008940:	f240 115d 	movw	r1, #349	; 0x15d
 8008944:	f000 fcb6 	bl	80092b4 <__assert_func>
 8008948:	f100 0514 	add.w	r5, r0, #20
 800894c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008950:	462b      	mov	r3, r5
 8008952:	2200      	movs	r2, #0
 8008954:	4543      	cmp	r3, r8
 8008956:	d321      	bcc.n	800899c <__multiply+0x98>
 8008958:	f104 0314 	add.w	r3, r4, #20
 800895c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008960:	f109 0314 	add.w	r3, r9, #20
 8008964:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008968:	9202      	str	r2, [sp, #8]
 800896a:	1b3a      	subs	r2, r7, r4
 800896c:	3a15      	subs	r2, #21
 800896e:	f022 0203 	bic.w	r2, r2, #3
 8008972:	3204      	adds	r2, #4
 8008974:	f104 0115 	add.w	r1, r4, #21
 8008978:	428f      	cmp	r7, r1
 800897a:	bf38      	it	cc
 800897c:	2204      	movcc	r2, #4
 800897e:	9201      	str	r2, [sp, #4]
 8008980:	9a02      	ldr	r2, [sp, #8]
 8008982:	9303      	str	r3, [sp, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d80c      	bhi.n	80089a2 <__multiply+0x9e>
 8008988:	2e00      	cmp	r6, #0
 800898a:	dd03      	ble.n	8008994 <__multiply+0x90>
 800898c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008990:	2b00      	cmp	r3, #0
 8008992:	d05a      	beq.n	8008a4a <__multiply+0x146>
 8008994:	6106      	str	r6, [r0, #16]
 8008996:	b005      	add	sp, #20
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	f843 2b04 	str.w	r2, [r3], #4
 80089a0:	e7d8      	b.n	8008954 <__multiply+0x50>
 80089a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80089a6:	f1ba 0f00 	cmp.w	sl, #0
 80089aa:	d024      	beq.n	80089f6 <__multiply+0xf2>
 80089ac:	f104 0e14 	add.w	lr, r4, #20
 80089b0:	46a9      	mov	r9, r5
 80089b2:	f04f 0c00 	mov.w	ip, #0
 80089b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089ba:	f8d9 1000 	ldr.w	r1, [r9]
 80089be:	fa1f fb82 	uxth.w	fp, r2
 80089c2:	b289      	uxth	r1, r1
 80089c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80089c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089cc:	f8d9 2000 	ldr.w	r2, [r9]
 80089d0:	4461      	add	r1, ip
 80089d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80089da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089de:	b289      	uxth	r1, r1
 80089e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089e4:	4577      	cmp	r7, lr
 80089e6:	f849 1b04 	str.w	r1, [r9], #4
 80089ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089ee:	d8e2      	bhi.n	80089b6 <__multiply+0xb2>
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	f845 c002 	str.w	ip, [r5, r2]
 80089f6:	9a03      	ldr	r2, [sp, #12]
 80089f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089fc:	3304      	adds	r3, #4
 80089fe:	f1b9 0f00 	cmp.w	r9, #0
 8008a02:	d020      	beq.n	8008a46 <__multiply+0x142>
 8008a04:	6829      	ldr	r1, [r5, #0]
 8008a06:	f104 0c14 	add.w	ip, r4, #20
 8008a0a:	46ae      	mov	lr, r5
 8008a0c:	f04f 0a00 	mov.w	sl, #0
 8008a10:	f8bc b000 	ldrh.w	fp, [ip]
 8008a14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a18:	fb09 220b 	mla	r2, r9, fp, r2
 8008a1c:	4492      	add	sl, r2
 8008a1e:	b289      	uxth	r1, r1
 8008a20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a24:	f84e 1b04 	str.w	r1, [lr], #4
 8008a28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a2c:	f8be 1000 	ldrh.w	r1, [lr]
 8008a30:	0c12      	lsrs	r2, r2, #16
 8008a32:	fb09 1102 	mla	r1, r9, r2, r1
 8008a36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a3a:	4567      	cmp	r7, ip
 8008a3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a40:	d8e6      	bhi.n	8008a10 <__multiply+0x10c>
 8008a42:	9a01      	ldr	r2, [sp, #4]
 8008a44:	50a9      	str	r1, [r5, r2]
 8008a46:	3504      	adds	r5, #4
 8008a48:	e79a      	b.n	8008980 <__multiply+0x7c>
 8008a4a:	3e01      	subs	r6, #1
 8008a4c:	e79c      	b.n	8008988 <__multiply+0x84>
 8008a4e:	bf00      	nop
 8008a50:	0800a003 	.word	0x0800a003
 8008a54:	0800a014 	.word	0x0800a014

08008a58 <__pow5mult>:
 8008a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a5c:	4615      	mov	r5, r2
 8008a5e:	f012 0203 	ands.w	r2, r2, #3
 8008a62:	4606      	mov	r6, r0
 8008a64:	460f      	mov	r7, r1
 8008a66:	d007      	beq.n	8008a78 <__pow5mult+0x20>
 8008a68:	4c25      	ldr	r4, [pc, #148]	; (8008b00 <__pow5mult+0xa8>)
 8008a6a:	3a01      	subs	r2, #1
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a72:	f7ff fe9b 	bl	80087ac <__multadd>
 8008a76:	4607      	mov	r7, r0
 8008a78:	10ad      	asrs	r5, r5, #2
 8008a7a:	d03d      	beq.n	8008af8 <__pow5mult+0xa0>
 8008a7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a7e:	b97c      	cbnz	r4, 8008aa0 <__pow5mult+0x48>
 8008a80:	2010      	movs	r0, #16
 8008a82:	f7ff fe1b 	bl	80086bc <malloc>
 8008a86:	4602      	mov	r2, r0
 8008a88:	6270      	str	r0, [r6, #36]	; 0x24
 8008a8a:	b928      	cbnz	r0, 8008a98 <__pow5mult+0x40>
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <__pow5mult+0xac>)
 8008a8e:	481e      	ldr	r0, [pc, #120]	; (8008b08 <__pow5mult+0xb0>)
 8008a90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a94:	f000 fc0e 	bl	80092b4 <__assert_func>
 8008a98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a9c:	6004      	str	r4, [r0, #0]
 8008a9e:	60c4      	str	r4, [r0, #12]
 8008aa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008aa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008aa8:	b94c      	cbnz	r4, 8008abe <__pow5mult+0x66>
 8008aaa:	f240 2171 	movw	r1, #625	; 0x271
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff ff12 	bl	80088d8 <__i2b>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008aba:	4604      	mov	r4, r0
 8008abc:	6003      	str	r3, [r0, #0]
 8008abe:	f04f 0900 	mov.w	r9, #0
 8008ac2:	07eb      	lsls	r3, r5, #31
 8008ac4:	d50a      	bpl.n	8008adc <__pow5mult+0x84>
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	4622      	mov	r2, r4
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff ff1a 	bl	8008904 <__multiply>
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	4680      	mov	r8, r0
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff fe47 	bl	8008768 <_Bfree>
 8008ada:	4647      	mov	r7, r8
 8008adc:	106d      	asrs	r5, r5, #1
 8008ade:	d00b      	beq.n	8008af8 <__pow5mult+0xa0>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	b938      	cbnz	r0, 8008af4 <__pow5mult+0x9c>
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff ff0b 	bl	8008904 <__multiply>
 8008aee:	6020      	str	r0, [r4, #0]
 8008af0:	f8c0 9000 	str.w	r9, [r0]
 8008af4:	4604      	mov	r4, r0
 8008af6:	e7e4      	b.n	8008ac2 <__pow5mult+0x6a>
 8008af8:	4638      	mov	r0, r7
 8008afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008afe:	bf00      	nop
 8008b00:	0800a160 	.word	0x0800a160
 8008b04:	08009f91 	.word	0x08009f91
 8008b08:	0800a014 	.word	0x0800a014

08008b0c <__lshift>:
 8008b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b10:	460c      	mov	r4, r1
 8008b12:	6849      	ldr	r1, [r1, #4]
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b1a:	68a3      	ldr	r3, [r4, #8]
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	4691      	mov	r9, r2
 8008b20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b24:	f108 0601 	add.w	r6, r8, #1
 8008b28:	42b3      	cmp	r3, r6
 8008b2a:	db0b      	blt.n	8008b44 <__lshift+0x38>
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7ff fddb 	bl	80086e8 <_Balloc>
 8008b32:	4605      	mov	r5, r0
 8008b34:	b948      	cbnz	r0, 8008b4a <__lshift+0x3e>
 8008b36:	4602      	mov	r2, r0
 8008b38:	4b2a      	ldr	r3, [pc, #168]	; (8008be4 <__lshift+0xd8>)
 8008b3a:	482b      	ldr	r0, [pc, #172]	; (8008be8 <__lshift+0xdc>)
 8008b3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b40:	f000 fbb8 	bl	80092b4 <__assert_func>
 8008b44:	3101      	adds	r1, #1
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	e7ee      	b.n	8008b28 <__lshift+0x1c>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f100 0114 	add.w	r1, r0, #20
 8008b50:	f100 0210 	add.w	r2, r0, #16
 8008b54:	4618      	mov	r0, r3
 8008b56:	4553      	cmp	r3, sl
 8008b58:	db37      	blt.n	8008bca <__lshift+0xbe>
 8008b5a:	6920      	ldr	r0, [r4, #16]
 8008b5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b60:	f104 0314 	add.w	r3, r4, #20
 8008b64:	f019 091f 	ands.w	r9, r9, #31
 8008b68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b70:	d02f      	beq.n	8008bd2 <__lshift+0xc6>
 8008b72:	f1c9 0e20 	rsb	lr, r9, #32
 8008b76:	468a      	mov	sl, r1
 8008b78:	f04f 0c00 	mov.w	ip, #0
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	fa02 f209 	lsl.w	r2, r2, r9
 8008b82:	ea42 020c 	orr.w	r2, r2, ip
 8008b86:	f84a 2b04 	str.w	r2, [sl], #4
 8008b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b8e:	4298      	cmp	r0, r3
 8008b90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b94:	d8f2      	bhi.n	8008b7c <__lshift+0x70>
 8008b96:	1b03      	subs	r3, r0, r4
 8008b98:	3b15      	subs	r3, #21
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	f104 0215 	add.w	r2, r4, #21
 8008ba4:	4290      	cmp	r0, r2
 8008ba6:	bf38      	it	cc
 8008ba8:	2304      	movcc	r3, #4
 8008baa:	f841 c003 	str.w	ip, [r1, r3]
 8008bae:	f1bc 0f00 	cmp.w	ip, #0
 8008bb2:	d001      	beq.n	8008bb8 <__lshift+0xac>
 8008bb4:	f108 0602 	add.w	r6, r8, #2
 8008bb8:	3e01      	subs	r6, #1
 8008bba:	4638      	mov	r0, r7
 8008bbc:	612e      	str	r6, [r5, #16]
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	f7ff fdd2 	bl	8008768 <_Bfree>
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bca:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bce:	3301      	adds	r3, #1
 8008bd0:	e7c1      	b.n	8008b56 <__lshift+0x4a>
 8008bd2:	3904      	subs	r1, #4
 8008bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bdc:	4298      	cmp	r0, r3
 8008bde:	d8f9      	bhi.n	8008bd4 <__lshift+0xc8>
 8008be0:	e7ea      	b.n	8008bb8 <__lshift+0xac>
 8008be2:	bf00      	nop
 8008be4:	0800a003 	.word	0x0800a003
 8008be8:	0800a014 	.word	0x0800a014

08008bec <__mcmp>:
 8008bec:	b530      	push	{r4, r5, lr}
 8008bee:	6902      	ldr	r2, [r0, #16]
 8008bf0:	690c      	ldr	r4, [r1, #16]
 8008bf2:	1b12      	subs	r2, r2, r4
 8008bf4:	d10e      	bne.n	8008c14 <__mcmp+0x28>
 8008bf6:	f100 0314 	add.w	r3, r0, #20
 8008bfa:	3114      	adds	r1, #20
 8008bfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c0c:	42a5      	cmp	r5, r4
 8008c0e:	d003      	beq.n	8008c18 <__mcmp+0x2c>
 8008c10:	d305      	bcc.n	8008c1e <__mcmp+0x32>
 8008c12:	2201      	movs	r2, #1
 8008c14:	4610      	mov	r0, r2
 8008c16:	bd30      	pop	{r4, r5, pc}
 8008c18:	4283      	cmp	r3, r0
 8008c1a:	d3f3      	bcc.n	8008c04 <__mcmp+0x18>
 8008c1c:	e7fa      	b.n	8008c14 <__mcmp+0x28>
 8008c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c22:	e7f7      	b.n	8008c14 <__mcmp+0x28>

08008c24 <__mdiff>:
 8008c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	460c      	mov	r4, r1
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4690      	mov	r8, r2
 8008c32:	f7ff ffdb 	bl	8008bec <__mcmp>
 8008c36:	1e05      	subs	r5, r0, #0
 8008c38:	d110      	bne.n	8008c5c <__mdiff+0x38>
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7ff fd53 	bl	80086e8 <_Balloc>
 8008c42:	b930      	cbnz	r0, 8008c52 <__mdiff+0x2e>
 8008c44:	4b3a      	ldr	r3, [pc, #232]	; (8008d30 <__mdiff+0x10c>)
 8008c46:	4602      	mov	r2, r0
 8008c48:	f240 2132 	movw	r1, #562	; 0x232
 8008c4c:	4839      	ldr	r0, [pc, #228]	; (8008d34 <__mdiff+0x110>)
 8008c4e:	f000 fb31 	bl	80092b4 <__assert_func>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5c:	bfa4      	itt	ge
 8008c5e:	4643      	movge	r3, r8
 8008c60:	46a0      	movge	r8, r4
 8008c62:	4630      	mov	r0, r6
 8008c64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c68:	bfa6      	itte	ge
 8008c6a:	461c      	movge	r4, r3
 8008c6c:	2500      	movge	r5, #0
 8008c6e:	2501      	movlt	r5, #1
 8008c70:	f7ff fd3a 	bl	80086e8 <_Balloc>
 8008c74:	b920      	cbnz	r0, 8008c80 <__mdiff+0x5c>
 8008c76:	4b2e      	ldr	r3, [pc, #184]	; (8008d30 <__mdiff+0x10c>)
 8008c78:	4602      	mov	r2, r0
 8008c7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c7e:	e7e5      	b.n	8008c4c <__mdiff+0x28>
 8008c80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c84:	6926      	ldr	r6, [r4, #16]
 8008c86:	60c5      	str	r5, [r0, #12]
 8008c88:	f104 0914 	add.w	r9, r4, #20
 8008c8c:	f108 0514 	add.w	r5, r8, #20
 8008c90:	f100 0e14 	add.w	lr, r0, #20
 8008c94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c9c:	f108 0210 	add.w	r2, r8, #16
 8008ca0:	46f2      	mov	sl, lr
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008cac:	fa1f f883 	uxth.w	r8, r3
 8008cb0:	fa11 f18b 	uxtah	r1, r1, fp
 8008cb4:	0c1b      	lsrs	r3, r3, #16
 8008cb6:	eba1 0808 	sub.w	r8, r1, r8
 8008cba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008cc2:	fa1f f888 	uxth.w	r8, r8
 8008cc6:	1419      	asrs	r1, r3, #16
 8008cc8:	454e      	cmp	r6, r9
 8008cca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008cce:	f84a 3b04 	str.w	r3, [sl], #4
 8008cd2:	d8e7      	bhi.n	8008ca4 <__mdiff+0x80>
 8008cd4:	1b33      	subs	r3, r6, r4
 8008cd6:	3b15      	subs	r3, #21
 8008cd8:	f023 0303 	bic.w	r3, r3, #3
 8008cdc:	3304      	adds	r3, #4
 8008cde:	3415      	adds	r4, #21
 8008ce0:	42a6      	cmp	r6, r4
 8008ce2:	bf38      	it	cc
 8008ce4:	2304      	movcc	r3, #4
 8008ce6:	441d      	add	r5, r3
 8008ce8:	4473      	add	r3, lr
 8008cea:	469e      	mov	lr, r3
 8008cec:	462e      	mov	r6, r5
 8008cee:	4566      	cmp	r6, ip
 8008cf0:	d30e      	bcc.n	8008d10 <__mdiff+0xec>
 8008cf2:	f10c 0203 	add.w	r2, ip, #3
 8008cf6:	1b52      	subs	r2, r2, r5
 8008cf8:	f022 0203 	bic.w	r2, r2, #3
 8008cfc:	3d03      	subs	r5, #3
 8008cfe:	45ac      	cmp	ip, r5
 8008d00:	bf38      	it	cc
 8008d02:	2200      	movcc	r2, #0
 8008d04:	441a      	add	r2, r3
 8008d06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d0a:	b17b      	cbz	r3, 8008d2c <__mdiff+0x108>
 8008d0c:	6107      	str	r7, [r0, #16]
 8008d0e:	e7a3      	b.n	8008c58 <__mdiff+0x34>
 8008d10:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d14:	fa11 f288 	uxtah	r2, r1, r8
 8008d18:	1414      	asrs	r4, r2, #16
 8008d1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d1e:	b292      	uxth	r2, r2
 8008d20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d24:	f84e 2b04 	str.w	r2, [lr], #4
 8008d28:	1421      	asrs	r1, r4, #16
 8008d2a:	e7e0      	b.n	8008cee <__mdiff+0xca>
 8008d2c:	3f01      	subs	r7, #1
 8008d2e:	e7ea      	b.n	8008d06 <__mdiff+0xe2>
 8008d30:	0800a003 	.word	0x0800a003
 8008d34:	0800a014 	.word	0x0800a014

08008d38 <__d2b>:
 8008d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	4689      	mov	r9, r1
 8008d3e:	2101      	movs	r1, #1
 8008d40:	ec57 6b10 	vmov	r6, r7, d0
 8008d44:	4690      	mov	r8, r2
 8008d46:	f7ff fccf 	bl	80086e8 <_Balloc>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	b930      	cbnz	r0, 8008d5c <__d2b+0x24>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b25      	ldr	r3, [pc, #148]	; (8008de8 <__d2b+0xb0>)
 8008d52:	4826      	ldr	r0, [pc, #152]	; (8008dec <__d2b+0xb4>)
 8008d54:	f240 310a 	movw	r1, #778	; 0x30a
 8008d58:	f000 faac 	bl	80092b4 <__assert_func>
 8008d5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d64:	bb35      	cbnz	r5, 8008db4 <__d2b+0x7c>
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	d028      	beq.n	8008dbe <__d2b+0x86>
 8008d6c:	4668      	mov	r0, sp
 8008d6e:	9600      	str	r6, [sp, #0]
 8008d70:	f7ff fd82 	bl	8008878 <__lo0bits>
 8008d74:	9900      	ldr	r1, [sp, #0]
 8008d76:	b300      	cbz	r0, 8008dba <__d2b+0x82>
 8008d78:	9a01      	ldr	r2, [sp, #4]
 8008d7a:	f1c0 0320 	rsb	r3, r0, #32
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	430b      	orrs	r3, r1
 8008d84:	40c2      	lsrs	r2, r0
 8008d86:	6163      	str	r3, [r4, #20]
 8008d88:	9201      	str	r2, [sp, #4]
 8008d8a:	9b01      	ldr	r3, [sp, #4]
 8008d8c:	61a3      	str	r3, [r4, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bf14      	ite	ne
 8008d92:	2202      	movne	r2, #2
 8008d94:	2201      	moveq	r2, #1
 8008d96:	6122      	str	r2, [r4, #16]
 8008d98:	b1d5      	cbz	r5, 8008dd0 <__d2b+0x98>
 8008d9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d9e:	4405      	add	r5, r0
 8008da0:	f8c9 5000 	str.w	r5, [r9]
 8008da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008da8:	f8c8 0000 	str.w	r0, [r8]
 8008dac:	4620      	mov	r0, r4
 8008dae:	b003      	add	sp, #12
 8008db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008db8:	e7d5      	b.n	8008d66 <__d2b+0x2e>
 8008dba:	6161      	str	r1, [r4, #20]
 8008dbc:	e7e5      	b.n	8008d8a <__d2b+0x52>
 8008dbe:	a801      	add	r0, sp, #4
 8008dc0:	f7ff fd5a 	bl	8008878 <__lo0bits>
 8008dc4:	9b01      	ldr	r3, [sp, #4]
 8008dc6:	6163      	str	r3, [r4, #20]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	6122      	str	r2, [r4, #16]
 8008dcc:	3020      	adds	r0, #32
 8008dce:	e7e3      	b.n	8008d98 <__d2b+0x60>
 8008dd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dd8:	f8c9 0000 	str.w	r0, [r9]
 8008ddc:	6918      	ldr	r0, [r3, #16]
 8008dde:	f7ff fd2b 	bl	8008838 <__hi0bits>
 8008de2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008de6:	e7df      	b.n	8008da8 <__d2b+0x70>
 8008de8:	0800a003 	.word	0x0800a003
 8008dec:	0800a014 	.word	0x0800a014

08008df0 <_calloc_r>:
 8008df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df2:	fba1 2402 	umull	r2, r4, r1, r2
 8008df6:	b94c      	cbnz	r4, 8008e0c <_calloc_r+0x1c>
 8008df8:	4611      	mov	r1, r2
 8008dfa:	9201      	str	r2, [sp, #4]
 8008dfc:	f000 f87a 	bl	8008ef4 <_malloc_r>
 8008e00:	9a01      	ldr	r2, [sp, #4]
 8008e02:	4605      	mov	r5, r0
 8008e04:	b930      	cbnz	r0, 8008e14 <_calloc_r+0x24>
 8008e06:	4628      	mov	r0, r5
 8008e08:	b003      	add	sp, #12
 8008e0a:	bd30      	pop	{r4, r5, pc}
 8008e0c:	220c      	movs	r2, #12
 8008e0e:	6002      	str	r2, [r0, #0]
 8008e10:	2500      	movs	r5, #0
 8008e12:	e7f8      	b.n	8008e06 <_calloc_r+0x16>
 8008e14:	4621      	mov	r1, r4
 8008e16:	f7fe f93f 	bl	8007098 <memset>
 8008e1a:	e7f4      	b.n	8008e06 <_calloc_r+0x16>

08008e1c <_free_r>:
 8008e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d044      	beq.n	8008eac <_free_r+0x90>
 8008e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e26:	9001      	str	r0, [sp, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e2e:	bfb8      	it	lt
 8008e30:	18e4      	addlt	r4, r4, r3
 8008e32:	f000 fa9b 	bl	800936c <__malloc_lock>
 8008e36:	4a1e      	ldr	r2, [pc, #120]	; (8008eb0 <_free_r+0x94>)
 8008e38:	9801      	ldr	r0, [sp, #4]
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	b933      	cbnz	r3, 8008e4c <_free_r+0x30>
 8008e3e:	6063      	str	r3, [r4, #4]
 8008e40:	6014      	str	r4, [r2, #0]
 8008e42:	b003      	add	sp, #12
 8008e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e48:	f000 ba96 	b.w	8009378 <__malloc_unlock>
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	d908      	bls.n	8008e62 <_free_r+0x46>
 8008e50:	6825      	ldr	r5, [r4, #0]
 8008e52:	1961      	adds	r1, r4, r5
 8008e54:	428b      	cmp	r3, r1
 8008e56:	bf01      	itttt	eq
 8008e58:	6819      	ldreq	r1, [r3, #0]
 8008e5a:	685b      	ldreq	r3, [r3, #4]
 8008e5c:	1949      	addeq	r1, r1, r5
 8008e5e:	6021      	streq	r1, [r4, #0]
 8008e60:	e7ed      	b.n	8008e3e <_free_r+0x22>
 8008e62:	461a      	mov	r2, r3
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	b10b      	cbz	r3, 8008e6c <_free_r+0x50>
 8008e68:	42a3      	cmp	r3, r4
 8008e6a:	d9fa      	bls.n	8008e62 <_free_r+0x46>
 8008e6c:	6811      	ldr	r1, [r2, #0]
 8008e6e:	1855      	adds	r5, r2, r1
 8008e70:	42a5      	cmp	r5, r4
 8008e72:	d10b      	bne.n	8008e8c <_free_r+0x70>
 8008e74:	6824      	ldr	r4, [r4, #0]
 8008e76:	4421      	add	r1, r4
 8008e78:	1854      	adds	r4, r2, r1
 8008e7a:	42a3      	cmp	r3, r4
 8008e7c:	6011      	str	r1, [r2, #0]
 8008e7e:	d1e0      	bne.n	8008e42 <_free_r+0x26>
 8008e80:	681c      	ldr	r4, [r3, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	6053      	str	r3, [r2, #4]
 8008e86:	4421      	add	r1, r4
 8008e88:	6011      	str	r1, [r2, #0]
 8008e8a:	e7da      	b.n	8008e42 <_free_r+0x26>
 8008e8c:	d902      	bls.n	8008e94 <_free_r+0x78>
 8008e8e:	230c      	movs	r3, #12
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	e7d6      	b.n	8008e42 <_free_r+0x26>
 8008e94:	6825      	ldr	r5, [r4, #0]
 8008e96:	1961      	adds	r1, r4, r5
 8008e98:	428b      	cmp	r3, r1
 8008e9a:	bf04      	itt	eq
 8008e9c:	6819      	ldreq	r1, [r3, #0]
 8008e9e:	685b      	ldreq	r3, [r3, #4]
 8008ea0:	6063      	str	r3, [r4, #4]
 8008ea2:	bf04      	itt	eq
 8008ea4:	1949      	addeq	r1, r1, r5
 8008ea6:	6021      	streq	r1, [r4, #0]
 8008ea8:	6054      	str	r4, [r2, #4]
 8008eaa:	e7ca      	b.n	8008e42 <_free_r+0x26>
 8008eac:	b003      	add	sp, #12
 8008eae:	bd30      	pop	{r4, r5, pc}
 8008eb0:	20000358 	.word	0x20000358

08008eb4 <sbrk_aligned>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	4e0e      	ldr	r6, [pc, #56]	; (8008ef0 <sbrk_aligned+0x3c>)
 8008eb8:	460c      	mov	r4, r1
 8008eba:	6831      	ldr	r1, [r6, #0]
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	b911      	cbnz	r1, 8008ec6 <sbrk_aligned+0x12>
 8008ec0:	f000 f9e8 	bl	8009294 <_sbrk_r>
 8008ec4:	6030      	str	r0, [r6, #0]
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f9e3 	bl	8009294 <_sbrk_r>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	d00a      	beq.n	8008ee8 <sbrk_aligned+0x34>
 8008ed2:	1cc4      	adds	r4, r0, #3
 8008ed4:	f024 0403 	bic.w	r4, r4, #3
 8008ed8:	42a0      	cmp	r0, r4
 8008eda:	d007      	beq.n	8008eec <sbrk_aligned+0x38>
 8008edc:	1a21      	subs	r1, r4, r0
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f000 f9d8 	bl	8009294 <_sbrk_r>
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d101      	bne.n	8008eec <sbrk_aligned+0x38>
 8008ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8008eec:	4620      	mov	r0, r4
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	2000035c 	.word	0x2000035c

08008ef4 <_malloc_r>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	1ccd      	adds	r5, r1, #3
 8008efa:	f025 0503 	bic.w	r5, r5, #3
 8008efe:	3508      	adds	r5, #8
 8008f00:	2d0c      	cmp	r5, #12
 8008f02:	bf38      	it	cc
 8008f04:	250c      	movcc	r5, #12
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	4607      	mov	r7, r0
 8008f0a:	db01      	blt.n	8008f10 <_malloc_r+0x1c>
 8008f0c:	42a9      	cmp	r1, r5
 8008f0e:	d905      	bls.n	8008f1c <_malloc_r+0x28>
 8008f10:	230c      	movs	r3, #12
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	2600      	movs	r6, #0
 8008f16:	4630      	mov	r0, r6
 8008f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f1c:	4e2e      	ldr	r6, [pc, #184]	; (8008fd8 <_malloc_r+0xe4>)
 8008f1e:	f000 fa25 	bl	800936c <__malloc_lock>
 8008f22:	6833      	ldr	r3, [r6, #0]
 8008f24:	461c      	mov	r4, r3
 8008f26:	bb34      	cbnz	r4, 8008f76 <_malloc_r+0x82>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	f7ff ffc2 	bl	8008eb4 <sbrk_aligned>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	4604      	mov	r4, r0
 8008f34:	d14d      	bne.n	8008fd2 <_malloc_r+0xde>
 8008f36:	6834      	ldr	r4, [r6, #0]
 8008f38:	4626      	mov	r6, r4
 8008f3a:	2e00      	cmp	r6, #0
 8008f3c:	d140      	bne.n	8008fc0 <_malloc_r+0xcc>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	4631      	mov	r1, r6
 8008f42:	4638      	mov	r0, r7
 8008f44:	eb04 0803 	add.w	r8, r4, r3
 8008f48:	f000 f9a4 	bl	8009294 <_sbrk_r>
 8008f4c:	4580      	cmp	r8, r0
 8008f4e:	d13a      	bne.n	8008fc6 <_malloc_r+0xd2>
 8008f50:	6821      	ldr	r1, [r4, #0]
 8008f52:	3503      	adds	r5, #3
 8008f54:	1a6d      	subs	r5, r5, r1
 8008f56:	f025 0503 	bic.w	r5, r5, #3
 8008f5a:	3508      	adds	r5, #8
 8008f5c:	2d0c      	cmp	r5, #12
 8008f5e:	bf38      	it	cc
 8008f60:	250c      	movcc	r5, #12
 8008f62:	4629      	mov	r1, r5
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff ffa5 	bl	8008eb4 <sbrk_aligned>
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d02b      	beq.n	8008fc6 <_malloc_r+0xd2>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	442b      	add	r3, r5
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	e00e      	b.n	8008f94 <_malloc_r+0xa0>
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	1b52      	subs	r2, r2, r5
 8008f7a:	d41e      	bmi.n	8008fba <_malloc_r+0xc6>
 8008f7c:	2a0b      	cmp	r2, #11
 8008f7e:	d916      	bls.n	8008fae <_malloc_r+0xba>
 8008f80:	1961      	adds	r1, r4, r5
 8008f82:	42a3      	cmp	r3, r4
 8008f84:	6025      	str	r5, [r4, #0]
 8008f86:	bf18      	it	ne
 8008f88:	6059      	strne	r1, [r3, #4]
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	bf08      	it	eq
 8008f8e:	6031      	streq	r1, [r6, #0]
 8008f90:	5162      	str	r2, [r4, r5]
 8008f92:	604b      	str	r3, [r1, #4]
 8008f94:	4638      	mov	r0, r7
 8008f96:	f104 060b 	add.w	r6, r4, #11
 8008f9a:	f000 f9ed 	bl	8009378 <__malloc_unlock>
 8008f9e:	f026 0607 	bic.w	r6, r6, #7
 8008fa2:	1d23      	adds	r3, r4, #4
 8008fa4:	1af2      	subs	r2, r6, r3
 8008fa6:	d0b6      	beq.n	8008f16 <_malloc_r+0x22>
 8008fa8:	1b9b      	subs	r3, r3, r6
 8008faa:	50a3      	str	r3, [r4, r2]
 8008fac:	e7b3      	b.n	8008f16 <_malloc_r+0x22>
 8008fae:	6862      	ldr	r2, [r4, #4]
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	bf0c      	ite	eq
 8008fb4:	6032      	streq	r2, [r6, #0]
 8008fb6:	605a      	strne	r2, [r3, #4]
 8008fb8:	e7ec      	b.n	8008f94 <_malloc_r+0xa0>
 8008fba:	4623      	mov	r3, r4
 8008fbc:	6864      	ldr	r4, [r4, #4]
 8008fbe:	e7b2      	b.n	8008f26 <_malloc_r+0x32>
 8008fc0:	4634      	mov	r4, r6
 8008fc2:	6876      	ldr	r6, [r6, #4]
 8008fc4:	e7b9      	b.n	8008f3a <_malloc_r+0x46>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f000 f9d4 	bl	8009378 <__malloc_unlock>
 8008fd0:	e7a1      	b.n	8008f16 <_malloc_r+0x22>
 8008fd2:	6025      	str	r5, [r4, #0]
 8008fd4:	e7de      	b.n	8008f94 <_malloc_r+0xa0>
 8008fd6:	bf00      	nop
 8008fd8:	20000358 	.word	0x20000358

08008fdc <__ssputs_r>:
 8008fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe0:	688e      	ldr	r6, [r1, #8]
 8008fe2:	429e      	cmp	r6, r3
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	4690      	mov	r8, r2
 8008fea:	461f      	mov	r7, r3
 8008fec:	d838      	bhi.n	8009060 <__ssputs_r+0x84>
 8008fee:	898a      	ldrh	r2, [r1, #12]
 8008ff0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ff4:	d032      	beq.n	800905c <__ssputs_r+0x80>
 8008ff6:	6825      	ldr	r5, [r4, #0]
 8008ff8:	6909      	ldr	r1, [r1, #16]
 8008ffa:	eba5 0901 	sub.w	r9, r5, r1
 8008ffe:	6965      	ldr	r5, [r4, #20]
 8009000:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009008:	3301      	adds	r3, #1
 800900a:	444b      	add	r3, r9
 800900c:	106d      	asrs	r5, r5, #1
 800900e:	429d      	cmp	r5, r3
 8009010:	bf38      	it	cc
 8009012:	461d      	movcc	r5, r3
 8009014:	0553      	lsls	r3, r2, #21
 8009016:	d531      	bpl.n	800907c <__ssputs_r+0xa0>
 8009018:	4629      	mov	r1, r5
 800901a:	f7ff ff6b 	bl	8008ef4 <_malloc_r>
 800901e:	4606      	mov	r6, r0
 8009020:	b950      	cbnz	r0, 8009038 <__ssputs_r+0x5c>
 8009022:	230c      	movs	r3, #12
 8009024:	f8ca 3000 	str.w	r3, [sl]
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009038:	6921      	ldr	r1, [r4, #16]
 800903a:	464a      	mov	r2, r9
 800903c:	f7ff fb46 	bl	80086cc <memcpy>
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	6126      	str	r6, [r4, #16]
 800904e:	6165      	str	r5, [r4, #20]
 8009050:	444e      	add	r6, r9
 8009052:	eba5 0509 	sub.w	r5, r5, r9
 8009056:	6026      	str	r6, [r4, #0]
 8009058:	60a5      	str	r5, [r4, #8]
 800905a:	463e      	mov	r6, r7
 800905c:	42be      	cmp	r6, r7
 800905e:	d900      	bls.n	8009062 <__ssputs_r+0x86>
 8009060:	463e      	mov	r6, r7
 8009062:	6820      	ldr	r0, [r4, #0]
 8009064:	4632      	mov	r2, r6
 8009066:	4641      	mov	r1, r8
 8009068:	f000 f966 	bl	8009338 <memmove>
 800906c:	68a3      	ldr	r3, [r4, #8]
 800906e:	1b9b      	subs	r3, r3, r6
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	4433      	add	r3, r6
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	2000      	movs	r0, #0
 800907a:	e7db      	b.n	8009034 <__ssputs_r+0x58>
 800907c:	462a      	mov	r2, r5
 800907e:	f000 f981 	bl	8009384 <_realloc_r>
 8009082:	4606      	mov	r6, r0
 8009084:	2800      	cmp	r0, #0
 8009086:	d1e1      	bne.n	800904c <__ssputs_r+0x70>
 8009088:	6921      	ldr	r1, [r4, #16]
 800908a:	4650      	mov	r0, sl
 800908c:	f7ff fec6 	bl	8008e1c <_free_r>
 8009090:	e7c7      	b.n	8009022 <__ssputs_r+0x46>
	...

08009094 <_svfiprintf_r>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	4698      	mov	r8, r3
 800909a:	898b      	ldrh	r3, [r1, #12]
 800909c:	061b      	lsls	r3, r3, #24
 800909e:	b09d      	sub	sp, #116	; 0x74
 80090a0:	4607      	mov	r7, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	4614      	mov	r4, r2
 80090a6:	d50e      	bpl.n	80090c6 <_svfiprintf_r+0x32>
 80090a8:	690b      	ldr	r3, [r1, #16]
 80090aa:	b963      	cbnz	r3, 80090c6 <_svfiprintf_r+0x32>
 80090ac:	2140      	movs	r1, #64	; 0x40
 80090ae:	f7ff ff21 	bl	8008ef4 <_malloc_r>
 80090b2:	6028      	str	r0, [r5, #0]
 80090b4:	6128      	str	r0, [r5, #16]
 80090b6:	b920      	cbnz	r0, 80090c2 <_svfiprintf_r+0x2e>
 80090b8:	230c      	movs	r3, #12
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	e0d1      	b.n	8009266 <_svfiprintf_r+0x1d2>
 80090c2:	2340      	movs	r3, #64	; 0x40
 80090c4:	616b      	str	r3, [r5, #20]
 80090c6:	2300      	movs	r3, #0
 80090c8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ca:	2320      	movs	r3, #32
 80090cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090d4:	2330      	movs	r3, #48	; 0x30
 80090d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009280 <_svfiprintf_r+0x1ec>
 80090da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090de:	f04f 0901 	mov.w	r9, #1
 80090e2:	4623      	mov	r3, r4
 80090e4:	469a      	mov	sl, r3
 80090e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ea:	b10a      	cbz	r2, 80090f0 <_svfiprintf_r+0x5c>
 80090ec:	2a25      	cmp	r2, #37	; 0x25
 80090ee:	d1f9      	bne.n	80090e4 <_svfiprintf_r+0x50>
 80090f0:	ebba 0b04 	subs.w	fp, sl, r4
 80090f4:	d00b      	beq.n	800910e <_svfiprintf_r+0x7a>
 80090f6:	465b      	mov	r3, fp
 80090f8:	4622      	mov	r2, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	4638      	mov	r0, r7
 80090fe:	f7ff ff6d 	bl	8008fdc <__ssputs_r>
 8009102:	3001      	adds	r0, #1
 8009104:	f000 80aa 	beq.w	800925c <_svfiprintf_r+0x1c8>
 8009108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800910a:	445a      	add	r2, fp
 800910c:	9209      	str	r2, [sp, #36]	; 0x24
 800910e:	f89a 3000 	ldrb.w	r3, [sl]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 80a2 	beq.w	800925c <_svfiprintf_r+0x1c8>
 8009118:	2300      	movs	r3, #0
 800911a:	f04f 32ff 	mov.w	r2, #4294967295
 800911e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009122:	f10a 0a01 	add.w	sl, sl, #1
 8009126:	9304      	str	r3, [sp, #16]
 8009128:	9307      	str	r3, [sp, #28]
 800912a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800912e:	931a      	str	r3, [sp, #104]	; 0x68
 8009130:	4654      	mov	r4, sl
 8009132:	2205      	movs	r2, #5
 8009134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009138:	4851      	ldr	r0, [pc, #324]	; (8009280 <_svfiprintf_r+0x1ec>)
 800913a:	f7f7 f869 	bl	8000210 <memchr>
 800913e:	9a04      	ldr	r2, [sp, #16]
 8009140:	b9d8      	cbnz	r0, 800917a <_svfiprintf_r+0xe6>
 8009142:	06d0      	lsls	r0, r2, #27
 8009144:	bf44      	itt	mi
 8009146:	2320      	movmi	r3, #32
 8009148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800914c:	0711      	lsls	r1, r2, #28
 800914e:	bf44      	itt	mi
 8009150:	232b      	movmi	r3, #43	; 0x2b
 8009152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009156:	f89a 3000 	ldrb.w	r3, [sl]
 800915a:	2b2a      	cmp	r3, #42	; 0x2a
 800915c:	d015      	beq.n	800918a <_svfiprintf_r+0xf6>
 800915e:	9a07      	ldr	r2, [sp, #28]
 8009160:	4654      	mov	r4, sl
 8009162:	2000      	movs	r0, #0
 8009164:	f04f 0c0a 	mov.w	ip, #10
 8009168:	4621      	mov	r1, r4
 800916a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800916e:	3b30      	subs	r3, #48	; 0x30
 8009170:	2b09      	cmp	r3, #9
 8009172:	d94e      	bls.n	8009212 <_svfiprintf_r+0x17e>
 8009174:	b1b0      	cbz	r0, 80091a4 <_svfiprintf_r+0x110>
 8009176:	9207      	str	r2, [sp, #28]
 8009178:	e014      	b.n	80091a4 <_svfiprintf_r+0x110>
 800917a:	eba0 0308 	sub.w	r3, r0, r8
 800917e:	fa09 f303 	lsl.w	r3, r9, r3
 8009182:	4313      	orrs	r3, r2
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	46a2      	mov	sl, r4
 8009188:	e7d2      	b.n	8009130 <_svfiprintf_r+0x9c>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	1d19      	adds	r1, r3, #4
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	9103      	str	r1, [sp, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	bfbb      	ittet	lt
 8009196:	425b      	neglt	r3, r3
 8009198:	f042 0202 	orrlt.w	r2, r2, #2
 800919c:	9307      	strge	r3, [sp, #28]
 800919e:	9307      	strlt	r3, [sp, #28]
 80091a0:	bfb8      	it	lt
 80091a2:	9204      	strlt	r2, [sp, #16]
 80091a4:	7823      	ldrb	r3, [r4, #0]
 80091a6:	2b2e      	cmp	r3, #46	; 0x2e
 80091a8:	d10c      	bne.n	80091c4 <_svfiprintf_r+0x130>
 80091aa:	7863      	ldrb	r3, [r4, #1]
 80091ac:	2b2a      	cmp	r3, #42	; 0x2a
 80091ae:	d135      	bne.n	800921c <_svfiprintf_r+0x188>
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	1d1a      	adds	r2, r3, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	9203      	str	r2, [sp, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfb8      	it	lt
 80091bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80091c0:	3402      	adds	r4, #2
 80091c2:	9305      	str	r3, [sp, #20]
 80091c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009290 <_svfiprintf_r+0x1fc>
 80091c8:	7821      	ldrb	r1, [r4, #0]
 80091ca:	2203      	movs	r2, #3
 80091cc:	4650      	mov	r0, sl
 80091ce:	f7f7 f81f 	bl	8000210 <memchr>
 80091d2:	b140      	cbz	r0, 80091e6 <_svfiprintf_r+0x152>
 80091d4:	2340      	movs	r3, #64	; 0x40
 80091d6:	eba0 000a 	sub.w	r0, r0, sl
 80091da:	fa03 f000 	lsl.w	r0, r3, r0
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	4303      	orrs	r3, r0
 80091e2:	3401      	adds	r4, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ea:	4826      	ldr	r0, [pc, #152]	; (8009284 <_svfiprintf_r+0x1f0>)
 80091ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091f0:	2206      	movs	r2, #6
 80091f2:	f7f7 f80d 	bl	8000210 <memchr>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d038      	beq.n	800926c <_svfiprintf_r+0x1d8>
 80091fa:	4b23      	ldr	r3, [pc, #140]	; (8009288 <_svfiprintf_r+0x1f4>)
 80091fc:	bb1b      	cbnz	r3, 8009246 <_svfiprintf_r+0x1b2>
 80091fe:	9b03      	ldr	r3, [sp, #12]
 8009200:	3307      	adds	r3, #7
 8009202:	f023 0307 	bic.w	r3, r3, #7
 8009206:	3308      	adds	r3, #8
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920c:	4433      	add	r3, r6
 800920e:	9309      	str	r3, [sp, #36]	; 0x24
 8009210:	e767      	b.n	80090e2 <_svfiprintf_r+0x4e>
 8009212:	fb0c 3202 	mla	r2, ip, r2, r3
 8009216:	460c      	mov	r4, r1
 8009218:	2001      	movs	r0, #1
 800921a:	e7a5      	b.n	8009168 <_svfiprintf_r+0xd4>
 800921c:	2300      	movs	r3, #0
 800921e:	3401      	adds	r4, #1
 8009220:	9305      	str	r3, [sp, #20]
 8009222:	4619      	mov	r1, r3
 8009224:	f04f 0c0a 	mov.w	ip, #10
 8009228:	4620      	mov	r0, r4
 800922a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800922e:	3a30      	subs	r2, #48	; 0x30
 8009230:	2a09      	cmp	r2, #9
 8009232:	d903      	bls.n	800923c <_svfiprintf_r+0x1a8>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0c5      	beq.n	80091c4 <_svfiprintf_r+0x130>
 8009238:	9105      	str	r1, [sp, #20]
 800923a:	e7c3      	b.n	80091c4 <_svfiprintf_r+0x130>
 800923c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009240:	4604      	mov	r4, r0
 8009242:	2301      	movs	r3, #1
 8009244:	e7f0      	b.n	8009228 <_svfiprintf_r+0x194>
 8009246:	ab03      	add	r3, sp, #12
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	462a      	mov	r2, r5
 800924c:	4b0f      	ldr	r3, [pc, #60]	; (800928c <_svfiprintf_r+0x1f8>)
 800924e:	a904      	add	r1, sp, #16
 8009250:	4638      	mov	r0, r7
 8009252:	f7fd ffc9 	bl	80071e8 <_printf_float>
 8009256:	1c42      	adds	r2, r0, #1
 8009258:	4606      	mov	r6, r0
 800925a:	d1d6      	bne.n	800920a <_svfiprintf_r+0x176>
 800925c:	89ab      	ldrh	r3, [r5, #12]
 800925e:	065b      	lsls	r3, r3, #25
 8009260:	f53f af2c 	bmi.w	80090bc <_svfiprintf_r+0x28>
 8009264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009266:	b01d      	add	sp, #116	; 0x74
 8009268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	ab03      	add	r3, sp, #12
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	462a      	mov	r2, r5
 8009272:	4b06      	ldr	r3, [pc, #24]	; (800928c <_svfiprintf_r+0x1f8>)
 8009274:	a904      	add	r1, sp, #16
 8009276:	4638      	mov	r0, r7
 8009278:	f7fe fa5a 	bl	8007730 <_printf_i>
 800927c:	e7eb      	b.n	8009256 <_svfiprintf_r+0x1c2>
 800927e:	bf00      	nop
 8009280:	0800a16c 	.word	0x0800a16c
 8009284:	0800a176 	.word	0x0800a176
 8009288:	080071e9 	.word	0x080071e9
 800928c:	08008fdd 	.word	0x08008fdd
 8009290:	0800a172 	.word	0x0800a172

08009294 <_sbrk_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4d06      	ldr	r5, [pc, #24]	; (80092b0 <_sbrk_r+0x1c>)
 8009298:	2300      	movs	r3, #0
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	f7f8 fb8a 	bl	80019b8 <_sbrk>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_sbrk_r+0x1a>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_sbrk_r+0x1a>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	20000360 	.word	0x20000360

080092b4 <__assert_func>:
 80092b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092b6:	4614      	mov	r4, r2
 80092b8:	461a      	mov	r2, r3
 80092ba:	4b09      	ldr	r3, [pc, #36]	; (80092e0 <__assert_func+0x2c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4605      	mov	r5, r0
 80092c0:	68d8      	ldr	r0, [r3, #12]
 80092c2:	b14c      	cbz	r4, 80092d8 <__assert_func+0x24>
 80092c4:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <__assert_func+0x30>)
 80092c6:	9100      	str	r1, [sp, #0]
 80092c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092cc:	4906      	ldr	r1, [pc, #24]	; (80092e8 <__assert_func+0x34>)
 80092ce:	462b      	mov	r3, r5
 80092d0:	f000 f80e 	bl	80092f0 <fiprintf>
 80092d4:	f000 faac 	bl	8009830 <abort>
 80092d8:	4b04      	ldr	r3, [pc, #16]	; (80092ec <__assert_func+0x38>)
 80092da:	461c      	mov	r4, r3
 80092dc:	e7f3      	b.n	80092c6 <__assert_func+0x12>
 80092de:	bf00      	nop
 80092e0:	2000000c 	.word	0x2000000c
 80092e4:	0800a17d 	.word	0x0800a17d
 80092e8:	0800a18a 	.word	0x0800a18a
 80092ec:	0800a1b8 	.word	0x0800a1b8

080092f0 <fiprintf>:
 80092f0:	b40e      	push	{r1, r2, r3}
 80092f2:	b503      	push	{r0, r1, lr}
 80092f4:	4601      	mov	r1, r0
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	4805      	ldr	r0, [pc, #20]	; (8009310 <fiprintf+0x20>)
 80092fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fe:	6800      	ldr	r0, [r0, #0]
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	f000 f897 	bl	8009434 <_vfiprintf_r>
 8009306:	b002      	add	sp, #8
 8009308:	f85d eb04 	ldr.w	lr, [sp], #4
 800930c:	b003      	add	sp, #12
 800930e:	4770      	bx	lr
 8009310:	2000000c 	.word	0x2000000c

08009314 <__ascii_mbtowc>:
 8009314:	b082      	sub	sp, #8
 8009316:	b901      	cbnz	r1, 800931a <__ascii_mbtowc+0x6>
 8009318:	a901      	add	r1, sp, #4
 800931a:	b142      	cbz	r2, 800932e <__ascii_mbtowc+0x1a>
 800931c:	b14b      	cbz	r3, 8009332 <__ascii_mbtowc+0x1e>
 800931e:	7813      	ldrb	r3, [r2, #0]
 8009320:	600b      	str	r3, [r1, #0]
 8009322:	7812      	ldrb	r2, [r2, #0]
 8009324:	1e10      	subs	r0, r2, #0
 8009326:	bf18      	it	ne
 8009328:	2001      	movne	r0, #1
 800932a:	b002      	add	sp, #8
 800932c:	4770      	bx	lr
 800932e:	4610      	mov	r0, r2
 8009330:	e7fb      	b.n	800932a <__ascii_mbtowc+0x16>
 8009332:	f06f 0001 	mvn.w	r0, #1
 8009336:	e7f8      	b.n	800932a <__ascii_mbtowc+0x16>

08009338 <memmove>:
 8009338:	4288      	cmp	r0, r1
 800933a:	b510      	push	{r4, lr}
 800933c:	eb01 0402 	add.w	r4, r1, r2
 8009340:	d902      	bls.n	8009348 <memmove+0x10>
 8009342:	4284      	cmp	r4, r0
 8009344:	4623      	mov	r3, r4
 8009346:	d807      	bhi.n	8009358 <memmove+0x20>
 8009348:	1e43      	subs	r3, r0, #1
 800934a:	42a1      	cmp	r1, r4
 800934c:	d008      	beq.n	8009360 <memmove+0x28>
 800934e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009356:	e7f8      	b.n	800934a <memmove+0x12>
 8009358:	4402      	add	r2, r0
 800935a:	4601      	mov	r1, r0
 800935c:	428a      	cmp	r2, r1
 800935e:	d100      	bne.n	8009362 <memmove+0x2a>
 8009360:	bd10      	pop	{r4, pc}
 8009362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800936a:	e7f7      	b.n	800935c <memmove+0x24>

0800936c <__malloc_lock>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__malloc_lock+0x8>)
 800936e:	f000 bc1f 	b.w	8009bb0 <__retarget_lock_acquire_recursive>
 8009372:	bf00      	nop
 8009374:	20000364 	.word	0x20000364

08009378 <__malloc_unlock>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__malloc_unlock+0x8>)
 800937a:	f000 bc1a 	b.w	8009bb2 <__retarget_lock_release_recursive>
 800937e:	bf00      	nop
 8009380:	20000364 	.word	0x20000364

08009384 <_realloc_r>:
 8009384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009388:	4680      	mov	r8, r0
 800938a:	4614      	mov	r4, r2
 800938c:	460e      	mov	r6, r1
 800938e:	b921      	cbnz	r1, 800939a <_realloc_r+0x16>
 8009390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009394:	4611      	mov	r1, r2
 8009396:	f7ff bdad 	b.w	8008ef4 <_malloc_r>
 800939a:	b92a      	cbnz	r2, 80093a8 <_realloc_r+0x24>
 800939c:	f7ff fd3e 	bl	8008e1c <_free_r>
 80093a0:	4625      	mov	r5, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a8:	f000 fc6a 	bl	8009c80 <_malloc_usable_size_r>
 80093ac:	4284      	cmp	r4, r0
 80093ae:	4607      	mov	r7, r0
 80093b0:	d802      	bhi.n	80093b8 <_realloc_r+0x34>
 80093b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093b6:	d812      	bhi.n	80093de <_realloc_r+0x5a>
 80093b8:	4621      	mov	r1, r4
 80093ba:	4640      	mov	r0, r8
 80093bc:	f7ff fd9a 	bl	8008ef4 <_malloc_r>
 80093c0:	4605      	mov	r5, r0
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d0ed      	beq.n	80093a2 <_realloc_r+0x1e>
 80093c6:	42bc      	cmp	r4, r7
 80093c8:	4622      	mov	r2, r4
 80093ca:	4631      	mov	r1, r6
 80093cc:	bf28      	it	cs
 80093ce:	463a      	movcs	r2, r7
 80093d0:	f7ff f97c 	bl	80086cc <memcpy>
 80093d4:	4631      	mov	r1, r6
 80093d6:	4640      	mov	r0, r8
 80093d8:	f7ff fd20 	bl	8008e1c <_free_r>
 80093dc:	e7e1      	b.n	80093a2 <_realloc_r+0x1e>
 80093de:	4635      	mov	r5, r6
 80093e0:	e7df      	b.n	80093a2 <_realloc_r+0x1e>

080093e2 <__sfputc_r>:
 80093e2:	6893      	ldr	r3, [r2, #8]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	b410      	push	{r4}
 80093ea:	6093      	str	r3, [r2, #8]
 80093ec:	da08      	bge.n	8009400 <__sfputc_r+0x1e>
 80093ee:	6994      	ldr	r4, [r2, #24]
 80093f0:	42a3      	cmp	r3, r4
 80093f2:	db01      	blt.n	80093f8 <__sfputc_r+0x16>
 80093f4:	290a      	cmp	r1, #10
 80093f6:	d103      	bne.n	8009400 <__sfputc_r+0x1e>
 80093f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093fc:	f000 b94a 	b.w	8009694 <__swbuf_r>
 8009400:	6813      	ldr	r3, [r2, #0]
 8009402:	1c58      	adds	r0, r3, #1
 8009404:	6010      	str	r0, [r2, #0]
 8009406:	7019      	strb	r1, [r3, #0]
 8009408:	4608      	mov	r0, r1
 800940a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800940e:	4770      	bx	lr

08009410 <__sfputs_r>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	4606      	mov	r6, r0
 8009414:	460f      	mov	r7, r1
 8009416:	4614      	mov	r4, r2
 8009418:	18d5      	adds	r5, r2, r3
 800941a:	42ac      	cmp	r4, r5
 800941c:	d101      	bne.n	8009422 <__sfputs_r+0x12>
 800941e:	2000      	movs	r0, #0
 8009420:	e007      	b.n	8009432 <__sfputs_r+0x22>
 8009422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009426:	463a      	mov	r2, r7
 8009428:	4630      	mov	r0, r6
 800942a:	f7ff ffda 	bl	80093e2 <__sfputc_r>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d1f3      	bne.n	800941a <__sfputs_r+0xa>
 8009432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009434 <_vfiprintf_r>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	460d      	mov	r5, r1
 800943a:	b09d      	sub	sp, #116	; 0x74
 800943c:	4614      	mov	r4, r2
 800943e:	4698      	mov	r8, r3
 8009440:	4606      	mov	r6, r0
 8009442:	b118      	cbz	r0, 800944c <_vfiprintf_r+0x18>
 8009444:	6983      	ldr	r3, [r0, #24]
 8009446:	b90b      	cbnz	r3, 800944c <_vfiprintf_r+0x18>
 8009448:	f000 fb14 	bl	8009a74 <__sinit>
 800944c:	4b89      	ldr	r3, [pc, #548]	; (8009674 <_vfiprintf_r+0x240>)
 800944e:	429d      	cmp	r5, r3
 8009450:	d11b      	bne.n	800948a <_vfiprintf_r+0x56>
 8009452:	6875      	ldr	r5, [r6, #4]
 8009454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009456:	07d9      	lsls	r1, r3, #31
 8009458:	d405      	bmi.n	8009466 <_vfiprintf_r+0x32>
 800945a:	89ab      	ldrh	r3, [r5, #12]
 800945c:	059a      	lsls	r2, r3, #22
 800945e:	d402      	bmi.n	8009466 <_vfiprintf_r+0x32>
 8009460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009462:	f000 fba5 	bl	8009bb0 <__retarget_lock_acquire_recursive>
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	071b      	lsls	r3, r3, #28
 800946a:	d501      	bpl.n	8009470 <_vfiprintf_r+0x3c>
 800946c:	692b      	ldr	r3, [r5, #16]
 800946e:	b9eb      	cbnz	r3, 80094ac <_vfiprintf_r+0x78>
 8009470:	4629      	mov	r1, r5
 8009472:	4630      	mov	r0, r6
 8009474:	f000 f96e 	bl	8009754 <__swsetup_r>
 8009478:	b1c0      	cbz	r0, 80094ac <_vfiprintf_r+0x78>
 800947a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800947c:	07dc      	lsls	r4, r3, #31
 800947e:	d50e      	bpl.n	800949e <_vfiprintf_r+0x6a>
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	b01d      	add	sp, #116	; 0x74
 8009486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948a:	4b7b      	ldr	r3, [pc, #492]	; (8009678 <_vfiprintf_r+0x244>)
 800948c:	429d      	cmp	r5, r3
 800948e:	d101      	bne.n	8009494 <_vfiprintf_r+0x60>
 8009490:	68b5      	ldr	r5, [r6, #8]
 8009492:	e7df      	b.n	8009454 <_vfiprintf_r+0x20>
 8009494:	4b79      	ldr	r3, [pc, #484]	; (800967c <_vfiprintf_r+0x248>)
 8009496:	429d      	cmp	r5, r3
 8009498:	bf08      	it	eq
 800949a:	68f5      	ldreq	r5, [r6, #12]
 800949c:	e7da      	b.n	8009454 <_vfiprintf_r+0x20>
 800949e:	89ab      	ldrh	r3, [r5, #12]
 80094a0:	0598      	lsls	r0, r3, #22
 80094a2:	d4ed      	bmi.n	8009480 <_vfiprintf_r+0x4c>
 80094a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094a6:	f000 fb84 	bl	8009bb2 <__retarget_lock_release_recursive>
 80094aa:	e7e9      	b.n	8009480 <_vfiprintf_r+0x4c>
 80094ac:	2300      	movs	r3, #0
 80094ae:	9309      	str	r3, [sp, #36]	; 0x24
 80094b0:	2320      	movs	r3, #32
 80094b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ba:	2330      	movs	r3, #48	; 0x30
 80094bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009680 <_vfiprintf_r+0x24c>
 80094c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c4:	f04f 0901 	mov.w	r9, #1
 80094c8:	4623      	mov	r3, r4
 80094ca:	469a      	mov	sl, r3
 80094cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094d0:	b10a      	cbz	r2, 80094d6 <_vfiprintf_r+0xa2>
 80094d2:	2a25      	cmp	r2, #37	; 0x25
 80094d4:	d1f9      	bne.n	80094ca <_vfiprintf_r+0x96>
 80094d6:	ebba 0b04 	subs.w	fp, sl, r4
 80094da:	d00b      	beq.n	80094f4 <_vfiprintf_r+0xc0>
 80094dc:	465b      	mov	r3, fp
 80094de:	4622      	mov	r2, r4
 80094e0:	4629      	mov	r1, r5
 80094e2:	4630      	mov	r0, r6
 80094e4:	f7ff ff94 	bl	8009410 <__sfputs_r>
 80094e8:	3001      	adds	r0, #1
 80094ea:	f000 80aa 	beq.w	8009642 <_vfiprintf_r+0x20e>
 80094ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094f0:	445a      	add	r2, fp
 80094f2:	9209      	str	r2, [sp, #36]	; 0x24
 80094f4:	f89a 3000 	ldrb.w	r3, [sl]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 80a2 	beq.w	8009642 <_vfiprintf_r+0x20e>
 80094fe:	2300      	movs	r3, #0
 8009500:	f04f 32ff 	mov.w	r2, #4294967295
 8009504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009508:	f10a 0a01 	add.w	sl, sl, #1
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	9307      	str	r3, [sp, #28]
 8009510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009514:	931a      	str	r3, [sp, #104]	; 0x68
 8009516:	4654      	mov	r4, sl
 8009518:	2205      	movs	r2, #5
 800951a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951e:	4858      	ldr	r0, [pc, #352]	; (8009680 <_vfiprintf_r+0x24c>)
 8009520:	f7f6 fe76 	bl	8000210 <memchr>
 8009524:	9a04      	ldr	r2, [sp, #16]
 8009526:	b9d8      	cbnz	r0, 8009560 <_vfiprintf_r+0x12c>
 8009528:	06d1      	lsls	r1, r2, #27
 800952a:	bf44      	itt	mi
 800952c:	2320      	movmi	r3, #32
 800952e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009532:	0713      	lsls	r3, r2, #28
 8009534:	bf44      	itt	mi
 8009536:	232b      	movmi	r3, #43	; 0x2b
 8009538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800953c:	f89a 3000 	ldrb.w	r3, [sl]
 8009540:	2b2a      	cmp	r3, #42	; 0x2a
 8009542:	d015      	beq.n	8009570 <_vfiprintf_r+0x13c>
 8009544:	9a07      	ldr	r2, [sp, #28]
 8009546:	4654      	mov	r4, sl
 8009548:	2000      	movs	r0, #0
 800954a:	f04f 0c0a 	mov.w	ip, #10
 800954e:	4621      	mov	r1, r4
 8009550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009554:	3b30      	subs	r3, #48	; 0x30
 8009556:	2b09      	cmp	r3, #9
 8009558:	d94e      	bls.n	80095f8 <_vfiprintf_r+0x1c4>
 800955a:	b1b0      	cbz	r0, 800958a <_vfiprintf_r+0x156>
 800955c:	9207      	str	r2, [sp, #28]
 800955e:	e014      	b.n	800958a <_vfiprintf_r+0x156>
 8009560:	eba0 0308 	sub.w	r3, r0, r8
 8009564:	fa09 f303 	lsl.w	r3, r9, r3
 8009568:	4313      	orrs	r3, r2
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	46a2      	mov	sl, r4
 800956e:	e7d2      	b.n	8009516 <_vfiprintf_r+0xe2>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	1d19      	adds	r1, r3, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	9103      	str	r1, [sp, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	bfbb      	ittet	lt
 800957c:	425b      	neglt	r3, r3
 800957e:	f042 0202 	orrlt.w	r2, r2, #2
 8009582:	9307      	strge	r3, [sp, #28]
 8009584:	9307      	strlt	r3, [sp, #28]
 8009586:	bfb8      	it	lt
 8009588:	9204      	strlt	r2, [sp, #16]
 800958a:	7823      	ldrb	r3, [r4, #0]
 800958c:	2b2e      	cmp	r3, #46	; 0x2e
 800958e:	d10c      	bne.n	80095aa <_vfiprintf_r+0x176>
 8009590:	7863      	ldrb	r3, [r4, #1]
 8009592:	2b2a      	cmp	r3, #42	; 0x2a
 8009594:	d135      	bne.n	8009602 <_vfiprintf_r+0x1ce>
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	1d1a      	adds	r2, r3, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	9203      	str	r2, [sp, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	bfb8      	it	lt
 80095a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80095a6:	3402      	adds	r4, #2
 80095a8:	9305      	str	r3, [sp, #20]
 80095aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009690 <_vfiprintf_r+0x25c>
 80095ae:	7821      	ldrb	r1, [r4, #0]
 80095b0:	2203      	movs	r2, #3
 80095b2:	4650      	mov	r0, sl
 80095b4:	f7f6 fe2c 	bl	8000210 <memchr>
 80095b8:	b140      	cbz	r0, 80095cc <_vfiprintf_r+0x198>
 80095ba:	2340      	movs	r3, #64	; 0x40
 80095bc:	eba0 000a 	sub.w	r0, r0, sl
 80095c0:	fa03 f000 	lsl.w	r0, r3, r0
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	4303      	orrs	r3, r0
 80095c8:	3401      	adds	r4, #1
 80095ca:	9304      	str	r3, [sp, #16]
 80095cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d0:	482c      	ldr	r0, [pc, #176]	; (8009684 <_vfiprintf_r+0x250>)
 80095d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095d6:	2206      	movs	r2, #6
 80095d8:	f7f6 fe1a 	bl	8000210 <memchr>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d03f      	beq.n	8009660 <_vfiprintf_r+0x22c>
 80095e0:	4b29      	ldr	r3, [pc, #164]	; (8009688 <_vfiprintf_r+0x254>)
 80095e2:	bb1b      	cbnz	r3, 800962c <_vfiprintf_r+0x1f8>
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	3307      	adds	r3, #7
 80095e8:	f023 0307 	bic.w	r3, r3, #7
 80095ec:	3308      	adds	r3, #8
 80095ee:	9303      	str	r3, [sp, #12]
 80095f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f2:	443b      	add	r3, r7
 80095f4:	9309      	str	r3, [sp, #36]	; 0x24
 80095f6:	e767      	b.n	80094c8 <_vfiprintf_r+0x94>
 80095f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095fc:	460c      	mov	r4, r1
 80095fe:	2001      	movs	r0, #1
 8009600:	e7a5      	b.n	800954e <_vfiprintf_r+0x11a>
 8009602:	2300      	movs	r3, #0
 8009604:	3401      	adds	r4, #1
 8009606:	9305      	str	r3, [sp, #20]
 8009608:	4619      	mov	r1, r3
 800960a:	f04f 0c0a 	mov.w	ip, #10
 800960e:	4620      	mov	r0, r4
 8009610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009614:	3a30      	subs	r2, #48	; 0x30
 8009616:	2a09      	cmp	r2, #9
 8009618:	d903      	bls.n	8009622 <_vfiprintf_r+0x1ee>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0c5      	beq.n	80095aa <_vfiprintf_r+0x176>
 800961e:	9105      	str	r1, [sp, #20]
 8009620:	e7c3      	b.n	80095aa <_vfiprintf_r+0x176>
 8009622:	fb0c 2101 	mla	r1, ip, r1, r2
 8009626:	4604      	mov	r4, r0
 8009628:	2301      	movs	r3, #1
 800962a:	e7f0      	b.n	800960e <_vfiprintf_r+0x1da>
 800962c:	ab03      	add	r3, sp, #12
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	462a      	mov	r2, r5
 8009632:	4b16      	ldr	r3, [pc, #88]	; (800968c <_vfiprintf_r+0x258>)
 8009634:	a904      	add	r1, sp, #16
 8009636:	4630      	mov	r0, r6
 8009638:	f7fd fdd6 	bl	80071e8 <_printf_float>
 800963c:	4607      	mov	r7, r0
 800963e:	1c78      	adds	r0, r7, #1
 8009640:	d1d6      	bne.n	80095f0 <_vfiprintf_r+0x1bc>
 8009642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009644:	07d9      	lsls	r1, r3, #31
 8009646:	d405      	bmi.n	8009654 <_vfiprintf_r+0x220>
 8009648:	89ab      	ldrh	r3, [r5, #12]
 800964a:	059a      	lsls	r2, r3, #22
 800964c:	d402      	bmi.n	8009654 <_vfiprintf_r+0x220>
 800964e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009650:	f000 faaf 	bl	8009bb2 <__retarget_lock_release_recursive>
 8009654:	89ab      	ldrh	r3, [r5, #12]
 8009656:	065b      	lsls	r3, r3, #25
 8009658:	f53f af12 	bmi.w	8009480 <_vfiprintf_r+0x4c>
 800965c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800965e:	e711      	b.n	8009484 <_vfiprintf_r+0x50>
 8009660:	ab03      	add	r3, sp, #12
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	462a      	mov	r2, r5
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <_vfiprintf_r+0x258>)
 8009668:	a904      	add	r1, sp, #16
 800966a:	4630      	mov	r0, r6
 800966c:	f7fe f860 	bl	8007730 <_printf_i>
 8009670:	e7e4      	b.n	800963c <_vfiprintf_r+0x208>
 8009672:	bf00      	nop
 8009674:	0800a2e4 	.word	0x0800a2e4
 8009678:	0800a304 	.word	0x0800a304
 800967c:	0800a2c4 	.word	0x0800a2c4
 8009680:	0800a16c 	.word	0x0800a16c
 8009684:	0800a176 	.word	0x0800a176
 8009688:	080071e9 	.word	0x080071e9
 800968c:	08009411 	.word	0x08009411
 8009690:	0800a172 	.word	0x0800a172

08009694 <__swbuf_r>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	460e      	mov	r6, r1
 8009698:	4614      	mov	r4, r2
 800969a:	4605      	mov	r5, r0
 800969c:	b118      	cbz	r0, 80096a6 <__swbuf_r+0x12>
 800969e:	6983      	ldr	r3, [r0, #24]
 80096a0:	b90b      	cbnz	r3, 80096a6 <__swbuf_r+0x12>
 80096a2:	f000 f9e7 	bl	8009a74 <__sinit>
 80096a6:	4b21      	ldr	r3, [pc, #132]	; (800972c <__swbuf_r+0x98>)
 80096a8:	429c      	cmp	r4, r3
 80096aa:	d12b      	bne.n	8009704 <__swbuf_r+0x70>
 80096ac:	686c      	ldr	r4, [r5, #4]
 80096ae:	69a3      	ldr	r3, [r4, #24]
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	071a      	lsls	r2, r3, #28
 80096b6:	d52f      	bpl.n	8009718 <__swbuf_r+0x84>
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	b36b      	cbz	r3, 8009718 <__swbuf_r+0x84>
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	6820      	ldr	r0, [r4, #0]
 80096c0:	1ac0      	subs	r0, r0, r3
 80096c2:	6963      	ldr	r3, [r4, #20]
 80096c4:	b2f6      	uxtb	r6, r6
 80096c6:	4283      	cmp	r3, r0
 80096c8:	4637      	mov	r7, r6
 80096ca:	dc04      	bgt.n	80096d6 <__swbuf_r+0x42>
 80096cc:	4621      	mov	r1, r4
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 f93c 	bl	800994c <_fflush_r>
 80096d4:	bb30      	cbnz	r0, 8009724 <__swbuf_r+0x90>
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	3b01      	subs	r3, #1
 80096da:	60a3      	str	r3, [r4, #8]
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	6022      	str	r2, [r4, #0]
 80096e2:	701e      	strb	r6, [r3, #0]
 80096e4:	6963      	ldr	r3, [r4, #20]
 80096e6:	3001      	adds	r0, #1
 80096e8:	4283      	cmp	r3, r0
 80096ea:	d004      	beq.n	80096f6 <__swbuf_r+0x62>
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	07db      	lsls	r3, r3, #31
 80096f0:	d506      	bpl.n	8009700 <__swbuf_r+0x6c>
 80096f2:	2e0a      	cmp	r6, #10
 80096f4:	d104      	bne.n	8009700 <__swbuf_r+0x6c>
 80096f6:	4621      	mov	r1, r4
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f927 	bl	800994c <_fflush_r>
 80096fe:	b988      	cbnz	r0, 8009724 <__swbuf_r+0x90>
 8009700:	4638      	mov	r0, r7
 8009702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <__swbuf_r+0x9c>)
 8009706:	429c      	cmp	r4, r3
 8009708:	d101      	bne.n	800970e <__swbuf_r+0x7a>
 800970a:	68ac      	ldr	r4, [r5, #8]
 800970c:	e7cf      	b.n	80096ae <__swbuf_r+0x1a>
 800970e:	4b09      	ldr	r3, [pc, #36]	; (8009734 <__swbuf_r+0xa0>)
 8009710:	429c      	cmp	r4, r3
 8009712:	bf08      	it	eq
 8009714:	68ec      	ldreq	r4, [r5, #12]
 8009716:	e7ca      	b.n	80096ae <__swbuf_r+0x1a>
 8009718:	4621      	mov	r1, r4
 800971a:	4628      	mov	r0, r5
 800971c:	f000 f81a 	bl	8009754 <__swsetup_r>
 8009720:	2800      	cmp	r0, #0
 8009722:	d0cb      	beq.n	80096bc <__swbuf_r+0x28>
 8009724:	f04f 37ff 	mov.w	r7, #4294967295
 8009728:	e7ea      	b.n	8009700 <__swbuf_r+0x6c>
 800972a:	bf00      	nop
 800972c:	0800a2e4 	.word	0x0800a2e4
 8009730:	0800a304 	.word	0x0800a304
 8009734:	0800a2c4 	.word	0x0800a2c4

08009738 <__ascii_wctomb>:
 8009738:	b149      	cbz	r1, 800974e <__ascii_wctomb+0x16>
 800973a:	2aff      	cmp	r2, #255	; 0xff
 800973c:	bf85      	ittet	hi
 800973e:	238a      	movhi	r3, #138	; 0x8a
 8009740:	6003      	strhi	r3, [r0, #0]
 8009742:	700a      	strbls	r2, [r1, #0]
 8009744:	f04f 30ff 	movhi.w	r0, #4294967295
 8009748:	bf98      	it	ls
 800974a:	2001      	movls	r0, #1
 800974c:	4770      	bx	lr
 800974e:	4608      	mov	r0, r1
 8009750:	4770      	bx	lr
	...

08009754 <__swsetup_r>:
 8009754:	4b32      	ldr	r3, [pc, #200]	; (8009820 <__swsetup_r+0xcc>)
 8009756:	b570      	push	{r4, r5, r6, lr}
 8009758:	681d      	ldr	r5, [r3, #0]
 800975a:	4606      	mov	r6, r0
 800975c:	460c      	mov	r4, r1
 800975e:	b125      	cbz	r5, 800976a <__swsetup_r+0x16>
 8009760:	69ab      	ldr	r3, [r5, #24]
 8009762:	b913      	cbnz	r3, 800976a <__swsetup_r+0x16>
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f985 	bl	8009a74 <__sinit>
 800976a:	4b2e      	ldr	r3, [pc, #184]	; (8009824 <__swsetup_r+0xd0>)
 800976c:	429c      	cmp	r4, r3
 800976e:	d10f      	bne.n	8009790 <__swsetup_r+0x3c>
 8009770:	686c      	ldr	r4, [r5, #4]
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009778:	0719      	lsls	r1, r3, #28
 800977a:	d42c      	bmi.n	80097d6 <__swsetup_r+0x82>
 800977c:	06dd      	lsls	r5, r3, #27
 800977e:	d411      	bmi.n	80097a4 <__swsetup_r+0x50>
 8009780:	2309      	movs	r3, #9
 8009782:	6033      	str	r3, [r6, #0]
 8009784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	f04f 30ff 	mov.w	r0, #4294967295
 800978e:	e03e      	b.n	800980e <__swsetup_r+0xba>
 8009790:	4b25      	ldr	r3, [pc, #148]	; (8009828 <__swsetup_r+0xd4>)
 8009792:	429c      	cmp	r4, r3
 8009794:	d101      	bne.n	800979a <__swsetup_r+0x46>
 8009796:	68ac      	ldr	r4, [r5, #8]
 8009798:	e7eb      	b.n	8009772 <__swsetup_r+0x1e>
 800979a:	4b24      	ldr	r3, [pc, #144]	; (800982c <__swsetup_r+0xd8>)
 800979c:	429c      	cmp	r4, r3
 800979e:	bf08      	it	eq
 80097a0:	68ec      	ldreq	r4, [r5, #12]
 80097a2:	e7e6      	b.n	8009772 <__swsetup_r+0x1e>
 80097a4:	0758      	lsls	r0, r3, #29
 80097a6:	d512      	bpl.n	80097ce <__swsetup_r+0x7a>
 80097a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097aa:	b141      	cbz	r1, 80097be <__swsetup_r+0x6a>
 80097ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097b0:	4299      	cmp	r1, r3
 80097b2:	d002      	beq.n	80097ba <__swsetup_r+0x66>
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7ff fb31 	bl	8008e1c <_free_r>
 80097ba:	2300      	movs	r3, #0
 80097bc:	6363      	str	r3, [r4, #52]	; 0x34
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	2300      	movs	r3, #0
 80097c8:	6063      	str	r3, [r4, #4]
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f043 0308 	orr.w	r3, r3, #8
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	b94b      	cbnz	r3, 80097ee <__swsetup_r+0x9a>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e4:	d003      	beq.n	80097ee <__swsetup_r+0x9a>
 80097e6:	4621      	mov	r1, r4
 80097e8:	4630      	mov	r0, r6
 80097ea:	f000 fa09 	bl	8009c00 <__smakebuf_r>
 80097ee:	89a0      	ldrh	r0, [r4, #12]
 80097f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097f4:	f010 0301 	ands.w	r3, r0, #1
 80097f8:	d00a      	beq.n	8009810 <__swsetup_r+0xbc>
 80097fa:	2300      	movs	r3, #0
 80097fc:	60a3      	str	r3, [r4, #8]
 80097fe:	6963      	ldr	r3, [r4, #20]
 8009800:	425b      	negs	r3, r3
 8009802:	61a3      	str	r3, [r4, #24]
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	b943      	cbnz	r3, 800981a <__swsetup_r+0xc6>
 8009808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800980c:	d1ba      	bne.n	8009784 <__swsetup_r+0x30>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	0781      	lsls	r1, r0, #30
 8009812:	bf58      	it	pl
 8009814:	6963      	ldrpl	r3, [r4, #20]
 8009816:	60a3      	str	r3, [r4, #8]
 8009818:	e7f4      	b.n	8009804 <__swsetup_r+0xb0>
 800981a:	2000      	movs	r0, #0
 800981c:	e7f7      	b.n	800980e <__swsetup_r+0xba>
 800981e:	bf00      	nop
 8009820:	2000000c 	.word	0x2000000c
 8009824:	0800a2e4 	.word	0x0800a2e4
 8009828:	0800a304 	.word	0x0800a304
 800982c:	0800a2c4 	.word	0x0800a2c4

08009830 <abort>:
 8009830:	b508      	push	{r3, lr}
 8009832:	2006      	movs	r0, #6
 8009834:	f000 fa54 	bl	8009ce0 <raise>
 8009838:	2001      	movs	r0, #1
 800983a:	f7f8 f845 	bl	80018c8 <_exit>
	...

08009840 <__sflush_r>:
 8009840:	898a      	ldrh	r2, [r1, #12]
 8009842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009846:	4605      	mov	r5, r0
 8009848:	0710      	lsls	r0, r2, #28
 800984a:	460c      	mov	r4, r1
 800984c:	d458      	bmi.n	8009900 <__sflush_r+0xc0>
 800984e:	684b      	ldr	r3, [r1, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	dc05      	bgt.n	8009860 <__sflush_r+0x20>
 8009854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	dc02      	bgt.n	8009860 <__sflush_r+0x20>
 800985a:	2000      	movs	r0, #0
 800985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009862:	2e00      	cmp	r6, #0
 8009864:	d0f9      	beq.n	800985a <__sflush_r+0x1a>
 8009866:	2300      	movs	r3, #0
 8009868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800986c:	682f      	ldr	r7, [r5, #0]
 800986e:	602b      	str	r3, [r5, #0]
 8009870:	d032      	beq.n	80098d8 <__sflush_r+0x98>
 8009872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	075a      	lsls	r2, r3, #29
 8009878:	d505      	bpl.n	8009886 <__sflush_r+0x46>
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	1ac0      	subs	r0, r0, r3
 800987e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009880:	b10b      	cbz	r3, 8009886 <__sflush_r+0x46>
 8009882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009884:	1ac0      	subs	r0, r0, r3
 8009886:	2300      	movs	r3, #0
 8009888:	4602      	mov	r2, r0
 800988a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800988c:	6a21      	ldr	r1, [r4, #32]
 800988e:	4628      	mov	r0, r5
 8009890:	47b0      	blx	r6
 8009892:	1c43      	adds	r3, r0, #1
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	d106      	bne.n	80098a6 <__sflush_r+0x66>
 8009898:	6829      	ldr	r1, [r5, #0]
 800989a:	291d      	cmp	r1, #29
 800989c:	d82c      	bhi.n	80098f8 <__sflush_r+0xb8>
 800989e:	4a2a      	ldr	r2, [pc, #168]	; (8009948 <__sflush_r+0x108>)
 80098a0:	40ca      	lsrs	r2, r1
 80098a2:	07d6      	lsls	r6, r2, #31
 80098a4:	d528      	bpl.n	80098f8 <__sflush_r+0xb8>
 80098a6:	2200      	movs	r2, #0
 80098a8:	6062      	str	r2, [r4, #4]
 80098aa:	04d9      	lsls	r1, r3, #19
 80098ac:	6922      	ldr	r2, [r4, #16]
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	d504      	bpl.n	80098bc <__sflush_r+0x7c>
 80098b2:	1c42      	adds	r2, r0, #1
 80098b4:	d101      	bne.n	80098ba <__sflush_r+0x7a>
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	b903      	cbnz	r3, 80098bc <__sflush_r+0x7c>
 80098ba:	6560      	str	r0, [r4, #84]	; 0x54
 80098bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098be:	602f      	str	r7, [r5, #0]
 80098c0:	2900      	cmp	r1, #0
 80098c2:	d0ca      	beq.n	800985a <__sflush_r+0x1a>
 80098c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098c8:	4299      	cmp	r1, r3
 80098ca:	d002      	beq.n	80098d2 <__sflush_r+0x92>
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7ff faa5 	bl	8008e1c <_free_r>
 80098d2:	2000      	movs	r0, #0
 80098d4:	6360      	str	r0, [r4, #52]	; 0x34
 80098d6:	e7c1      	b.n	800985c <__sflush_r+0x1c>
 80098d8:	6a21      	ldr	r1, [r4, #32]
 80098da:	2301      	movs	r3, #1
 80098dc:	4628      	mov	r0, r5
 80098de:	47b0      	blx	r6
 80098e0:	1c41      	adds	r1, r0, #1
 80098e2:	d1c7      	bne.n	8009874 <__sflush_r+0x34>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0c4      	beq.n	8009874 <__sflush_r+0x34>
 80098ea:	2b1d      	cmp	r3, #29
 80098ec:	d001      	beq.n	80098f2 <__sflush_r+0xb2>
 80098ee:	2b16      	cmp	r3, #22
 80098f0:	d101      	bne.n	80098f6 <__sflush_r+0xb6>
 80098f2:	602f      	str	r7, [r5, #0]
 80098f4:	e7b1      	b.n	800985a <__sflush_r+0x1a>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	e7ad      	b.n	800985c <__sflush_r+0x1c>
 8009900:	690f      	ldr	r7, [r1, #16]
 8009902:	2f00      	cmp	r7, #0
 8009904:	d0a9      	beq.n	800985a <__sflush_r+0x1a>
 8009906:	0793      	lsls	r3, r2, #30
 8009908:	680e      	ldr	r6, [r1, #0]
 800990a:	bf08      	it	eq
 800990c:	694b      	ldreq	r3, [r1, #20]
 800990e:	600f      	str	r7, [r1, #0]
 8009910:	bf18      	it	ne
 8009912:	2300      	movne	r3, #0
 8009914:	eba6 0807 	sub.w	r8, r6, r7
 8009918:	608b      	str	r3, [r1, #8]
 800991a:	f1b8 0f00 	cmp.w	r8, #0
 800991e:	dd9c      	ble.n	800985a <__sflush_r+0x1a>
 8009920:	6a21      	ldr	r1, [r4, #32]
 8009922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009924:	4643      	mov	r3, r8
 8009926:	463a      	mov	r2, r7
 8009928:	4628      	mov	r0, r5
 800992a:	47b0      	blx	r6
 800992c:	2800      	cmp	r0, #0
 800992e:	dc06      	bgt.n	800993e <__sflush_r+0xfe>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	f04f 30ff 	mov.w	r0, #4294967295
 800993c:	e78e      	b.n	800985c <__sflush_r+0x1c>
 800993e:	4407      	add	r7, r0
 8009940:	eba8 0800 	sub.w	r8, r8, r0
 8009944:	e7e9      	b.n	800991a <__sflush_r+0xda>
 8009946:	bf00      	nop
 8009948:	20400001 	.word	0x20400001

0800994c <_fflush_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	690b      	ldr	r3, [r1, #16]
 8009950:	4605      	mov	r5, r0
 8009952:	460c      	mov	r4, r1
 8009954:	b913      	cbnz	r3, 800995c <_fflush_r+0x10>
 8009956:	2500      	movs	r5, #0
 8009958:	4628      	mov	r0, r5
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	b118      	cbz	r0, 8009966 <_fflush_r+0x1a>
 800995e:	6983      	ldr	r3, [r0, #24]
 8009960:	b90b      	cbnz	r3, 8009966 <_fflush_r+0x1a>
 8009962:	f000 f887 	bl	8009a74 <__sinit>
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <_fflush_r+0x6c>)
 8009968:	429c      	cmp	r4, r3
 800996a:	d11b      	bne.n	80099a4 <_fflush_r+0x58>
 800996c:	686c      	ldr	r4, [r5, #4]
 800996e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0ef      	beq.n	8009956 <_fflush_r+0xa>
 8009976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009978:	07d0      	lsls	r0, r2, #31
 800997a:	d404      	bmi.n	8009986 <_fflush_r+0x3a>
 800997c:	0599      	lsls	r1, r3, #22
 800997e:	d402      	bmi.n	8009986 <_fflush_r+0x3a>
 8009980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009982:	f000 f915 	bl	8009bb0 <__retarget_lock_acquire_recursive>
 8009986:	4628      	mov	r0, r5
 8009988:	4621      	mov	r1, r4
 800998a:	f7ff ff59 	bl	8009840 <__sflush_r>
 800998e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009990:	07da      	lsls	r2, r3, #31
 8009992:	4605      	mov	r5, r0
 8009994:	d4e0      	bmi.n	8009958 <_fflush_r+0xc>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	059b      	lsls	r3, r3, #22
 800999a:	d4dd      	bmi.n	8009958 <_fflush_r+0xc>
 800999c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800999e:	f000 f908 	bl	8009bb2 <__retarget_lock_release_recursive>
 80099a2:	e7d9      	b.n	8009958 <_fflush_r+0xc>
 80099a4:	4b05      	ldr	r3, [pc, #20]	; (80099bc <_fflush_r+0x70>)
 80099a6:	429c      	cmp	r4, r3
 80099a8:	d101      	bne.n	80099ae <_fflush_r+0x62>
 80099aa:	68ac      	ldr	r4, [r5, #8]
 80099ac:	e7df      	b.n	800996e <_fflush_r+0x22>
 80099ae:	4b04      	ldr	r3, [pc, #16]	; (80099c0 <_fflush_r+0x74>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	bf08      	it	eq
 80099b4:	68ec      	ldreq	r4, [r5, #12]
 80099b6:	e7da      	b.n	800996e <_fflush_r+0x22>
 80099b8:	0800a2e4 	.word	0x0800a2e4
 80099bc:	0800a304 	.word	0x0800a304
 80099c0:	0800a2c4 	.word	0x0800a2c4

080099c4 <std>:
 80099c4:	2300      	movs	r3, #0
 80099c6:	b510      	push	{r4, lr}
 80099c8:	4604      	mov	r4, r0
 80099ca:	e9c0 3300 	strd	r3, r3, [r0]
 80099ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099d2:	6083      	str	r3, [r0, #8]
 80099d4:	8181      	strh	r1, [r0, #12]
 80099d6:	6643      	str	r3, [r0, #100]	; 0x64
 80099d8:	81c2      	strh	r2, [r0, #14]
 80099da:	6183      	str	r3, [r0, #24]
 80099dc:	4619      	mov	r1, r3
 80099de:	2208      	movs	r2, #8
 80099e0:	305c      	adds	r0, #92	; 0x5c
 80099e2:	f7fd fb59 	bl	8007098 <memset>
 80099e6:	4b05      	ldr	r3, [pc, #20]	; (80099fc <std+0x38>)
 80099e8:	6263      	str	r3, [r4, #36]	; 0x24
 80099ea:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <std+0x3c>)
 80099ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ee:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <std+0x40>)
 80099f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099f2:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <std+0x44>)
 80099f4:	6224      	str	r4, [r4, #32]
 80099f6:	6323      	str	r3, [r4, #48]	; 0x30
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	bf00      	nop
 80099fc:	08009d19 	.word	0x08009d19
 8009a00:	08009d3b 	.word	0x08009d3b
 8009a04:	08009d73 	.word	0x08009d73
 8009a08:	08009d97 	.word	0x08009d97

08009a0c <_cleanup_r>:
 8009a0c:	4901      	ldr	r1, [pc, #4]	; (8009a14 <_cleanup_r+0x8>)
 8009a0e:	f000 b8af 	b.w	8009b70 <_fwalk_reent>
 8009a12:	bf00      	nop
 8009a14:	0800994d 	.word	0x0800994d

08009a18 <__sfmoreglue>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	2268      	movs	r2, #104	; 0x68
 8009a1c:	1e4d      	subs	r5, r1, #1
 8009a1e:	4355      	muls	r5, r2
 8009a20:	460e      	mov	r6, r1
 8009a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a26:	f7ff fa65 	bl	8008ef4 <_malloc_r>
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	b140      	cbz	r0, 8009a40 <__sfmoreglue+0x28>
 8009a2e:	2100      	movs	r1, #0
 8009a30:	e9c0 1600 	strd	r1, r6, [r0]
 8009a34:	300c      	adds	r0, #12
 8009a36:	60a0      	str	r0, [r4, #8]
 8009a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a3c:	f7fd fb2c 	bl	8007098 <memset>
 8009a40:	4620      	mov	r0, r4
 8009a42:	bd70      	pop	{r4, r5, r6, pc}

08009a44 <__sfp_lock_acquire>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__sfp_lock_acquire+0x8>)
 8009a46:	f000 b8b3 	b.w	8009bb0 <__retarget_lock_acquire_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20000365 	.word	0x20000365

08009a50 <__sfp_lock_release>:
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <__sfp_lock_release+0x8>)
 8009a52:	f000 b8ae 	b.w	8009bb2 <__retarget_lock_release_recursive>
 8009a56:	bf00      	nop
 8009a58:	20000365 	.word	0x20000365

08009a5c <__sinit_lock_acquire>:
 8009a5c:	4801      	ldr	r0, [pc, #4]	; (8009a64 <__sinit_lock_acquire+0x8>)
 8009a5e:	f000 b8a7 	b.w	8009bb0 <__retarget_lock_acquire_recursive>
 8009a62:	bf00      	nop
 8009a64:	20000366 	.word	0x20000366

08009a68 <__sinit_lock_release>:
 8009a68:	4801      	ldr	r0, [pc, #4]	; (8009a70 <__sinit_lock_release+0x8>)
 8009a6a:	f000 b8a2 	b.w	8009bb2 <__retarget_lock_release_recursive>
 8009a6e:	bf00      	nop
 8009a70:	20000366 	.word	0x20000366

08009a74 <__sinit>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	4604      	mov	r4, r0
 8009a78:	f7ff fff0 	bl	8009a5c <__sinit_lock_acquire>
 8009a7c:	69a3      	ldr	r3, [r4, #24]
 8009a7e:	b11b      	cbz	r3, 8009a88 <__sinit+0x14>
 8009a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a84:	f7ff bff0 	b.w	8009a68 <__sinit_lock_release>
 8009a88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a8c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <__sinit+0x68>)
 8009a90:	4a13      	ldr	r2, [pc, #76]	; (8009ae0 <__sinit+0x6c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a96:	42a3      	cmp	r3, r4
 8009a98:	bf04      	itt	eq
 8009a9a:	2301      	moveq	r3, #1
 8009a9c:	61a3      	streq	r3, [r4, #24]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f820 	bl	8009ae4 <__sfp>
 8009aa4:	6060      	str	r0, [r4, #4]
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 f81c 	bl	8009ae4 <__sfp>
 8009aac:	60a0      	str	r0, [r4, #8]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 f818 	bl	8009ae4 <__sfp>
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	60e0      	str	r0, [r4, #12]
 8009ab8:	2104      	movs	r1, #4
 8009aba:	6860      	ldr	r0, [r4, #4]
 8009abc:	f7ff ff82 	bl	80099c4 <std>
 8009ac0:	68a0      	ldr	r0, [r4, #8]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	2109      	movs	r1, #9
 8009ac6:	f7ff ff7d 	bl	80099c4 <std>
 8009aca:	68e0      	ldr	r0, [r4, #12]
 8009acc:	2202      	movs	r2, #2
 8009ace:	2112      	movs	r1, #18
 8009ad0:	f7ff ff78 	bl	80099c4 <std>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	61a3      	str	r3, [r4, #24]
 8009ad8:	e7d2      	b.n	8009a80 <__sinit+0xc>
 8009ada:	bf00      	nop
 8009adc:	08009f4c 	.word	0x08009f4c
 8009ae0:	08009a0d 	.word	0x08009a0d

08009ae4 <__sfp>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	4607      	mov	r7, r0
 8009ae8:	f7ff ffac 	bl	8009a44 <__sfp_lock_acquire>
 8009aec:	4b1e      	ldr	r3, [pc, #120]	; (8009b68 <__sfp+0x84>)
 8009aee:	681e      	ldr	r6, [r3, #0]
 8009af0:	69b3      	ldr	r3, [r6, #24]
 8009af2:	b913      	cbnz	r3, 8009afa <__sfp+0x16>
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff ffbd 	bl	8009a74 <__sinit>
 8009afa:	3648      	adds	r6, #72	; 0x48
 8009afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	d503      	bpl.n	8009b0c <__sfp+0x28>
 8009b04:	6833      	ldr	r3, [r6, #0]
 8009b06:	b30b      	cbz	r3, 8009b4c <__sfp+0x68>
 8009b08:	6836      	ldr	r6, [r6, #0]
 8009b0a:	e7f7      	b.n	8009afc <__sfp+0x18>
 8009b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b10:	b9d5      	cbnz	r5, 8009b48 <__sfp+0x64>
 8009b12:	4b16      	ldr	r3, [pc, #88]	; (8009b6c <__sfp+0x88>)
 8009b14:	60e3      	str	r3, [r4, #12]
 8009b16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b1a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b1c:	f000 f847 	bl	8009bae <__retarget_lock_init_recursive>
 8009b20:	f7ff ff96 	bl	8009a50 <__sfp_lock_release>
 8009b24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b2c:	6025      	str	r5, [r4, #0]
 8009b2e:	61a5      	str	r5, [r4, #24]
 8009b30:	2208      	movs	r2, #8
 8009b32:	4629      	mov	r1, r5
 8009b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b38:	f7fd faae 	bl	8007098 <memset>
 8009b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b44:	4620      	mov	r0, r4
 8009b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b48:	3468      	adds	r4, #104	; 0x68
 8009b4a:	e7d9      	b.n	8009b00 <__sfp+0x1c>
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f7ff ff62 	bl	8009a18 <__sfmoreglue>
 8009b54:	4604      	mov	r4, r0
 8009b56:	6030      	str	r0, [r6, #0]
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d1d5      	bne.n	8009b08 <__sfp+0x24>
 8009b5c:	f7ff ff78 	bl	8009a50 <__sfp_lock_release>
 8009b60:	230c      	movs	r3, #12
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	e7ee      	b.n	8009b44 <__sfp+0x60>
 8009b66:	bf00      	nop
 8009b68:	08009f4c 	.word	0x08009f4c
 8009b6c:	ffff0001 	.word	0xffff0001

08009b70 <_fwalk_reent>:
 8009b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	4606      	mov	r6, r0
 8009b76:	4688      	mov	r8, r1
 8009b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b7c:	2700      	movs	r7, #0
 8009b7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b82:	f1b9 0901 	subs.w	r9, r9, #1
 8009b86:	d505      	bpl.n	8009b94 <_fwalk_reent+0x24>
 8009b88:	6824      	ldr	r4, [r4, #0]
 8009b8a:	2c00      	cmp	r4, #0
 8009b8c:	d1f7      	bne.n	8009b7e <_fwalk_reent+0xe>
 8009b8e:	4638      	mov	r0, r7
 8009b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b94:	89ab      	ldrh	r3, [r5, #12]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d907      	bls.n	8009baa <_fwalk_reent+0x3a>
 8009b9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	d003      	beq.n	8009baa <_fwalk_reent+0x3a>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	47c0      	blx	r8
 8009ba8:	4307      	orrs	r7, r0
 8009baa:	3568      	adds	r5, #104	; 0x68
 8009bac:	e7e9      	b.n	8009b82 <_fwalk_reent+0x12>

08009bae <__retarget_lock_init_recursive>:
 8009bae:	4770      	bx	lr

08009bb0 <__retarget_lock_acquire_recursive>:
 8009bb0:	4770      	bx	lr

08009bb2 <__retarget_lock_release_recursive>:
 8009bb2:	4770      	bx	lr

08009bb4 <__swhatbuf_r>:
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	460e      	mov	r6, r1
 8009bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	b096      	sub	sp, #88	; 0x58
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	461d      	mov	r5, r3
 8009bc4:	da08      	bge.n	8009bd8 <__swhatbuf_r+0x24>
 8009bc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	602a      	str	r2, [r5, #0]
 8009bce:	061a      	lsls	r2, r3, #24
 8009bd0:	d410      	bmi.n	8009bf4 <__swhatbuf_r+0x40>
 8009bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bd6:	e00e      	b.n	8009bf6 <__swhatbuf_r+0x42>
 8009bd8:	466a      	mov	r2, sp
 8009bda:	f000 f903 	bl	8009de4 <_fstat_r>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	dbf1      	blt.n	8009bc6 <__swhatbuf_r+0x12>
 8009be2:	9a01      	ldr	r2, [sp, #4]
 8009be4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009be8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bec:	425a      	negs	r2, r3
 8009bee:	415a      	adcs	r2, r3
 8009bf0:	602a      	str	r2, [r5, #0]
 8009bf2:	e7ee      	b.n	8009bd2 <__swhatbuf_r+0x1e>
 8009bf4:	2340      	movs	r3, #64	; 0x40
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	b016      	add	sp, #88	; 0x58
 8009bfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c00 <__smakebuf_r>:
 8009c00:	898b      	ldrh	r3, [r1, #12]
 8009c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c04:	079d      	lsls	r5, r3, #30
 8009c06:	4606      	mov	r6, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	d507      	bpl.n	8009c1c <__smakebuf_r+0x1c>
 8009c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	6123      	str	r3, [r4, #16]
 8009c14:	2301      	movs	r3, #1
 8009c16:	6163      	str	r3, [r4, #20]
 8009c18:	b002      	add	sp, #8
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}
 8009c1c:	ab01      	add	r3, sp, #4
 8009c1e:	466a      	mov	r2, sp
 8009c20:	f7ff ffc8 	bl	8009bb4 <__swhatbuf_r>
 8009c24:	9900      	ldr	r1, [sp, #0]
 8009c26:	4605      	mov	r5, r0
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff f963 	bl	8008ef4 <_malloc_r>
 8009c2e:	b948      	cbnz	r0, 8009c44 <__smakebuf_r+0x44>
 8009c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c34:	059a      	lsls	r2, r3, #22
 8009c36:	d4ef      	bmi.n	8009c18 <__smakebuf_r+0x18>
 8009c38:	f023 0303 	bic.w	r3, r3, #3
 8009c3c:	f043 0302 	orr.w	r3, r3, #2
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	e7e3      	b.n	8009c0c <__smakebuf_r+0xc>
 8009c44:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <__smakebuf_r+0x7c>)
 8009c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c50:	81a3      	strh	r3, [r4, #12]
 8009c52:	9b00      	ldr	r3, [sp, #0]
 8009c54:	6163      	str	r3, [r4, #20]
 8009c56:	9b01      	ldr	r3, [sp, #4]
 8009c58:	6120      	str	r0, [r4, #16]
 8009c5a:	b15b      	cbz	r3, 8009c74 <__smakebuf_r+0x74>
 8009c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c60:	4630      	mov	r0, r6
 8009c62:	f000 f8d1 	bl	8009e08 <_isatty_r>
 8009c66:	b128      	cbz	r0, 8009c74 <__smakebuf_r+0x74>
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	f023 0303 	bic.w	r3, r3, #3
 8009c6e:	f043 0301 	orr.w	r3, r3, #1
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	89a0      	ldrh	r0, [r4, #12]
 8009c76:	4305      	orrs	r5, r0
 8009c78:	81a5      	strh	r5, [r4, #12]
 8009c7a:	e7cd      	b.n	8009c18 <__smakebuf_r+0x18>
 8009c7c:	08009a0d 	.word	0x08009a0d

08009c80 <_malloc_usable_size_r>:
 8009c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c84:	1f18      	subs	r0, r3, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bfbc      	itt	lt
 8009c8a:	580b      	ldrlt	r3, [r1, r0]
 8009c8c:	18c0      	addlt	r0, r0, r3
 8009c8e:	4770      	bx	lr

08009c90 <_raise_r>:
 8009c90:	291f      	cmp	r1, #31
 8009c92:	b538      	push	{r3, r4, r5, lr}
 8009c94:	4604      	mov	r4, r0
 8009c96:	460d      	mov	r5, r1
 8009c98:	d904      	bls.n	8009ca4 <_raise_r+0x14>
 8009c9a:	2316      	movs	r3, #22
 8009c9c:	6003      	str	r3, [r0, #0]
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ca6:	b112      	cbz	r2, 8009cae <_raise_r+0x1e>
 8009ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cac:	b94b      	cbnz	r3, 8009cc2 <_raise_r+0x32>
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 f830 	bl	8009d14 <_getpid_r>
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	4620      	mov	r0, r4
 8009cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cbe:	f000 b817 	b.w	8009cf0 <_kill_r>
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d00a      	beq.n	8009cdc <_raise_r+0x4c>
 8009cc6:	1c59      	adds	r1, r3, #1
 8009cc8:	d103      	bne.n	8009cd2 <_raise_r+0x42>
 8009cca:	2316      	movs	r3, #22
 8009ccc:	6003      	str	r3, [r0, #0]
 8009cce:	2001      	movs	r0, #1
 8009cd0:	e7e7      	b.n	8009ca2 <_raise_r+0x12>
 8009cd2:	2400      	movs	r4, #0
 8009cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cd8:	4628      	mov	r0, r5
 8009cda:	4798      	blx	r3
 8009cdc:	2000      	movs	r0, #0
 8009cde:	e7e0      	b.n	8009ca2 <_raise_r+0x12>

08009ce0 <raise>:
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <raise+0xc>)
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	f7ff bfd3 	b.w	8009c90 <_raise_r>
 8009cea:	bf00      	nop
 8009cec:	2000000c 	.word	0x2000000c

08009cf0 <_kill_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	; (8009d10 <_kill_r+0x20>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	f7f7 fdd3 	bl	80018a8 <_kill>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d102      	bne.n	8009d0c <_kill_r+0x1c>
 8009d06:	682b      	ldr	r3, [r5, #0]
 8009d08:	b103      	cbz	r3, 8009d0c <_kill_r+0x1c>
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000360 	.word	0x20000360

08009d14 <_getpid_r>:
 8009d14:	f7f7 bdc0 	b.w	8001898 <_getpid>

08009d18 <__sread>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d20:	f000 f894 	bl	8009e4c <_read_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	bfab      	itete	ge
 8009d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d2c:	181b      	addge	r3, r3, r0
 8009d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d32:	bfac      	ite	ge
 8009d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d36:	81a3      	strhlt	r3, [r4, #12]
 8009d38:	bd10      	pop	{r4, pc}

08009d3a <__swrite>:
 8009d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3e:	461f      	mov	r7, r3
 8009d40:	898b      	ldrh	r3, [r1, #12]
 8009d42:	05db      	lsls	r3, r3, #23
 8009d44:	4605      	mov	r5, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	4616      	mov	r6, r2
 8009d4a:	d505      	bpl.n	8009d58 <__swrite+0x1e>
 8009d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d50:	2302      	movs	r3, #2
 8009d52:	2200      	movs	r2, #0
 8009d54:	f000 f868 	bl	8009e28 <_lseek_r>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	4632      	mov	r2, r6
 8009d66:	463b      	mov	r3, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	f000 b817 	b.w	8009da0 <_write_r>

08009d72 <__sseek>:
 8009d72:	b510      	push	{r4, lr}
 8009d74:	460c      	mov	r4, r1
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 f855 	bl	8009e28 <_lseek_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	bf15      	itete	ne
 8009d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d8e:	81a3      	strheq	r3, [r4, #12]
 8009d90:	bf18      	it	ne
 8009d92:	81a3      	strhne	r3, [r4, #12]
 8009d94:	bd10      	pop	{r4, pc}

08009d96 <__sclose>:
 8009d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9a:	f000 b813 	b.w	8009dc4 <_close_r>
	...

08009da0 <_write_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d07      	ldr	r5, [pc, #28]	; (8009dc0 <_write_r+0x20>)
 8009da4:	4604      	mov	r4, r0
 8009da6:	4608      	mov	r0, r1
 8009da8:	4611      	mov	r1, r2
 8009daa:	2200      	movs	r2, #0
 8009dac:	602a      	str	r2, [r5, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f7f7 fdb1 	bl	8001916 <_write>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_write_r+0x1e>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_write_r+0x1e>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	20000360 	.word	0x20000360

08009dc4 <_close_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4d06      	ldr	r5, [pc, #24]	; (8009de0 <_close_r+0x1c>)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	602b      	str	r3, [r5, #0]
 8009dd0:	f7f7 fdbd 	bl	800194e <_close>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	d102      	bne.n	8009dde <_close_r+0x1a>
 8009dd8:	682b      	ldr	r3, [r5, #0]
 8009dda:	b103      	cbz	r3, 8009dde <_close_r+0x1a>
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	20000360 	.word	0x20000360

08009de4 <_fstat_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d07      	ldr	r5, [pc, #28]	; (8009e04 <_fstat_r+0x20>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	4611      	mov	r1, r2
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	f7f7 fdb8 	bl	8001966 <_fstat>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d102      	bne.n	8009e00 <_fstat_r+0x1c>
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	b103      	cbz	r3, 8009e00 <_fstat_r+0x1c>
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	20000360 	.word	0x20000360

08009e08 <_isatty_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d06      	ldr	r5, [pc, #24]	; (8009e24 <_isatty_r+0x1c>)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4608      	mov	r0, r1
 8009e12:	602b      	str	r3, [r5, #0]
 8009e14:	f7f7 fdb7 	bl	8001986 <_isatty>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_isatty_r+0x1a>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_isatty_r+0x1a>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	20000360 	.word	0x20000360

08009e28 <_lseek_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d07      	ldr	r5, [pc, #28]	; (8009e48 <_lseek_r+0x20>)
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4611      	mov	r1, r2
 8009e32:	2200      	movs	r2, #0
 8009e34:	602a      	str	r2, [r5, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f7f7 fdb0 	bl	800199c <_lseek>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_lseek_r+0x1e>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_lseek_r+0x1e>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20000360 	.word	0x20000360

08009e4c <_read_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4d07      	ldr	r5, [pc, #28]	; (8009e6c <_read_r+0x20>)
 8009e50:	4604      	mov	r4, r0
 8009e52:	4608      	mov	r0, r1
 8009e54:	4611      	mov	r1, r2
 8009e56:	2200      	movs	r2, #0
 8009e58:	602a      	str	r2, [r5, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	f7f7 fd3e 	bl	80018dc <_read>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_read_r+0x1e>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_read_r+0x1e>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	20000360 	.word	0x20000360

08009e70 <_init>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	bf00      	nop
 8009e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e76:	bc08      	pop	{r3}
 8009e78:	469e      	mov	lr, r3
 8009e7a:	4770      	bx	lr

08009e7c <_fini>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	bf00      	nop
 8009e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e82:	bc08      	pop	{r3}
 8009e84:	469e      	mov	lr, r3
 8009e86:	4770      	bx	lr
